
--01ModifyTableNephrectomyProc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_NephrectomyProc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
	ProcPlannedType varchar(50) NULL,
	ProcCaseQuality varchar(50) NULL,
	ProcCompleteResection varchar(50) NULL,
	ProcPartialReason varchar(50) NULL,
	ProcPartialIschemia varchar(50) NULL,
	ProcPartialIceSlush varchar(50) NULL,
	ProcPartialClampStartTime varchar(50) NULL,
	ProcPartialClampStopTime varchar(50) NULL,
	ProcPartialClampDuration varchar(50) NULL,
	ProcPreOpDiagnosis varchar(255) NULL,
	ProcPostOpDiagnosis varchar(255) NULL,
	ProcTumorLocation varchar(255) NULL,
	ProcNumTumors varchar(50) NULL,
	ProcConversionReason varchar(255) NULL,
	ProcExcisionTechnique varchar(50) NULL,
	ProcIntraOpUS varchar(50) NULL,
	ProcIntraOpUS_Lesions varchar(50) NULL,
	ProcIVC_Inv varchar(50) NULL,
	ProcHypothermia varchar(50) NULL,
	ProcRenalHypothermiaType varchar(50) NULL,
	ProcUreteralStent varchar(50) NULL,
	ProcCollectingSystemEntry varchar(50) NULL,
	ProcCollectingSystemRepair varchar(50) NULL,
	ProcRenalVeinClamping varchar(50) NULL,
	ProcNumRenalArteries varchar(50) NULL,
	ProcNumRenalArteriesOccluded varchar(50) NULL,
	ProcSinusFatExtension varchar(50) NULL,
	ProcFrozenSections varchar(50) NULL,
	ProcAddTissue varchar(50) NULL,
	ProcDrains varchar(50) NULL,
	ProcCO2_PressureDuration varchar(50) NULL,
	ProcPercKidneySpared varchar(50) NULL,
	ProcComplication varchar(50) NULL,
	ProcInfusionType varchar(50) NULL,
	ProcInfusionBeforeClamping varchar(50) NULL,
	ProcInfusionToRenalVeinClampingTime varchar(50) NULL,
	ProcInfusionDetails varchar(1000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_NephrectomyProc)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_NephrectomyProc (LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcPlannedType, ProcCaseQuality, ProcCompleteResection, ProcPartialReason, ProcPartialIschemia, ProcPartialIceSlush, ProcPartialClampStartTime, ProcPartialClampStopTime, ProcPartialClampDuration, ProcPreOpDiagnosis, ProcPostOpDiagnosis, ProcTumorLocation, ProcNumTumors, ProcConversionReason, ProcExcisionTechnique, ProcIntraOpUS, ProcIntraOpUS_Lesions, ProcIVC_Inv, ProcHypothermia, ProcRenalHypothermiaType, ProcUreteralStent, ProcCollectingSystemEntry, ProcCollectingSystemRepair, ProcRenalVeinClamping, ProcNumRenalArteries, ProcNumRenalArteriesOccluded, ProcSinusFatExtension, ProcFrozenSections, ProcAddTissue, ProcDrains, ProcCO2_PressureDuration, ProcPercKidneySpared, ProcComplication, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcPlannedType, ProcCaseQuality, ProcCompleteResection, ProcPartialReason, ProcPartialIschemia, ProcPartialIceSlush, ProcPartialClampStartTime, ProcPartialClampStopTime, ProcPartialClampDuration, ProcPreOpDiagnosis, ProcPostOpDiagnosis, ProcTumorLocation, ProcNumTumors, ProcConversionReason, ProcExcisionTechnique, ProcIntraOpUS, ProcIntraOpUS_Lesions, ProcIVC_Inv, ProcHypothermia, ProcRenalHypothermiaType, ProcUreteralStent, ProcCollectingSystemEntry, ProcCollectingSystemRepair, ProcRenalVeinClamping, ProcNumRenalArteries, ProcNumRenalArteriesOccluded, ProcSinusFatExtension, ProcFrozenSections, ProcAddTissue, ProcDrains, ProcCO2_PressureDuration, ProcPercKidneySpared, ProcComplication, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_NephrectomyProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_NephrectomyProc
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_NephrectomyProc', N'AuditLog_NephrectomyProc', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.NephrectomyProc
	DROP CONSTRAINT FK_NephrectomyProc_Procedures
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_NephrectomyProc
	(
	ProcedureId int NOT NULL,
	ProcPlannedType varchar(50) NULL,
	ProcCaseQuality varchar(50) NULL,
	ProcCompleteResection varchar(50) NULL,
	ProcPartialReason varchar(50) NULL,
	ProcPartialIschemia varchar(50) NULL,
	ProcPartialIceSlush varchar(50) NULL,
	ProcPartialClampStartTime varchar(50) NULL,
	ProcPartialClampStopTime varchar(50) NULL,
	ProcPartialClampDuration varchar(50) NULL,
	ProcPreOpDiagnosis varchar(255) NULL,
	ProcPostOpDiagnosis varchar(255) NULL,
	ProcTumorLocation varchar(255) NULL,
	ProcNumTumors varchar(50) NULL,
	ProcConversionReason varchar(255) NULL,
	ProcExcisionTechnique varchar(50) NULL,
	ProcIntraOpUS varchar(50) NULL,
	ProcIntraOpUS_Lesions varchar(50) NULL,
	ProcIVC_Inv varchar(50) NULL,
	ProcHypothermia varchar(50) NULL,
	ProcRenalHypothermiaType varchar(50) NULL,
	ProcUreteralStent varchar(50) NULL,
	ProcCollectingSystemEntry varchar(50) NULL,
	ProcCollectingSystemRepair varchar(50) NULL,
	ProcRenalVeinClamping varchar(50) NULL,
	ProcNumRenalArteries varchar(50) NULL,
	ProcNumRenalArteriesOccluded varchar(50) NULL,
	ProcSinusFatExtension varchar(50) NULL,
	ProcFrozenSections varchar(50) NULL,
	ProcAddTissue varchar(50) NULL,
	ProcDrains varchar(50) NULL,
	ProcCO2_PressureDuration varchar(50) NULL,
	ProcPercKidneySpared varchar(50) NULL,
	ProcComplication varchar(50) NULL,
	ProcInfusionType varchar(50) NULL,
	ProcInfusionBeforeClamping varchar(50) NULL,
	ProcInfusionToRenalVeinClampingTime varchar(50) NULL,
	ProcInfusionDetails varchar(1000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.NephrectomyProc)
	 EXEC('INSERT INTO dbo.Tmp_NephrectomyProc (ProcedureId, ProcPlannedType, ProcCaseQuality, ProcCompleteResection, ProcPartialReason, ProcPartialIschemia, ProcPartialIceSlush, ProcPartialClampStartTime, ProcPartialClampStopTime, ProcPartialClampDuration, ProcPreOpDiagnosis, ProcPostOpDiagnosis, ProcTumorLocation, ProcNumTumors, ProcConversionReason, ProcExcisionTechnique, ProcIntraOpUS, ProcIntraOpUS_Lesions, ProcIVC_Inv, ProcHypothermia, ProcRenalHypothermiaType, ProcUreteralStent, ProcCollectingSystemEntry, ProcCollectingSystemRepair, ProcRenalVeinClamping, ProcNumRenalArteries, ProcNumRenalArteriesOccluded, ProcSinusFatExtension, ProcFrozenSections, ProcAddTissue, ProcDrains, ProcCO2_PressureDuration, ProcPercKidneySpared, ProcComplication, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT ProcedureId, ProcPlannedType, ProcCaseQuality, ProcCompleteResection, ProcPartialReason, ProcPartialIschemia, ProcPartialIceSlush, ProcPartialClampStartTime, ProcPartialClampStopTime, ProcPartialClampDuration, ProcPreOpDiagnosis, ProcPostOpDiagnosis, ProcTumorLocation, ProcNumTumors, ProcConversionReason, ProcExcisionTechnique, ProcIntraOpUS, ProcIntraOpUS_Lesions, ProcIVC_Inv, ProcHypothermia, ProcRenalHypothermiaType, ProcUreteralStent, ProcCollectingSystemEntry, ProcCollectingSystemRepair, ProcRenalVeinClamping, ProcNumRenalArteries, ProcNumRenalArteriesOccluded, ProcSinusFatExtension, ProcFrozenSections, ProcAddTissue, ProcDrains, ProcCO2_PressureDuration, ProcPercKidneySpared, ProcComplication, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.NephrectomyProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.NephrectomyProc
GO
EXECUTE sp_rename N'dbo.Tmp_NephrectomyProc', N'NephrectomyProc', 'OBJECT' 
GO
ALTER TABLE dbo.NephrectomyProc ADD CONSTRAINT
	PK_NephrectomyProc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.NephrectomyProc WITH NOCHECK ADD CONSTRAINT
	FK_NephrectomyProc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditNephrectomyProc_UD
ON dbo.NephrectomyProc FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_NephrectomyProc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_NephrectomyProc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO

--02ModifyDxImageFindingsKidney.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_DxImageFindingsKidney
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	DiagnosticId int NULL,
	DxImageFindingKidneyId int NULL,
	ImgFindSide varchar(50) NULL,
	ImgFindPole varchar(50) NULL,
	ImgFindAP varchar(50) NULL,
	ImgFindSite varchar(50) NULL,
	ImgFindHeight varchar(50) NULL,
	ImgFindWidth varchar(50) NULL,
	ImgFindLength varchar(50) NULL,
	ImgFindResult varchar(50) NULL,
	ImgFindExtension varchar(50) NULL,
	ImgFindRV_Inv varchar(50) NULL,
	ImgFindIVC_Inv varchar(50) NULL,
	ImgFindIVC_WallInv varchar(50) NULL,
	ImgFindTumorType varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_DxImageFindingsKidney)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_DxImageFindingsKidney (LoggedOperation, LoggedBy, LoggedTime, DiagnosticId, DxImageFindingKidneyId, ImgFindSide, ImgFindPole, ImgFindAP, ImgFindSite, ImgFindHeight, ImgFindWidth, ImgFindLength, ImgFindResult, ImgFindExtension, ImgFindRV_Inv, ImgFindIVC_Inv, ImgFindIVC_WallInv, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, DiagnosticId, DxImageFindingKidneyId, ImgFindSide, ImgFindPole, ImgFindAP, ImgFindSite, ImgFindHeight, ImgFindWidth, ImgFindLength, ImgFindResult, ImgFindExtension, ImgFindRV_Inv, ImgFindIVC_Inv, ImgFindIVC_WallInv, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_DxImageFindingsKidney WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_DxImageFindingsKidney
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_DxImageFindingsKidney', N'AuditLog_DxImageFindingsKidney', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageFindingsKidney
	DROP CONSTRAINT FK_DxImageFindingsKidney_Diagnostics
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_DxImageFindingsKidney
	(
	DiagnosticId int NOT NULL,
	DxImageFindingKidneyId int NOT NULL IDENTITY (1, 1),
	ImgFindSide varchar(50) NULL,
	ImgFindPole varchar(50) NULL,
	ImgFindAP varchar(50) NULL,
	ImgFindSite varchar(50) NULL,
	ImgFindHeight varchar(50) NULL,
	ImgFindWidth varchar(50) NULL,
	ImgFindLength varchar(50) NULL,
	ImgFindResult varchar(50) NULL,
	ImgFindExtension varchar(50) NULL,
	ImgFindRV_Inv varchar(50) NULL,
	ImgFindIVC_Inv varchar(50) NULL,
	ImgFindIVC_WallInv varchar(50) NULL,
	ImgFindTumorType varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
SET IDENTITY_INSERT dbo.Tmp_DxImageFindingsKidney ON
GO
IF EXISTS(SELECT * FROM dbo.DxImageFindingsKidney)
	 EXEC('INSERT INTO dbo.Tmp_DxImageFindingsKidney (DiagnosticId, DxImageFindingKidneyId, ImgFindSide, ImgFindPole, ImgFindAP, ImgFindSite, ImgFindHeight, ImgFindWidth, ImgFindLength, ImgFindResult, ImgFindExtension, ImgFindRV_Inv, ImgFindIVC_Inv, ImgFindIVC_WallInv, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT DiagnosticId, DxImageFindingKidneyId, ImgFindSide, ImgFindPole, ImgFindAP, ImgFindSite, ImgFindHeight, ImgFindWidth, ImgFindLength, ImgFindResult, ImgFindExtension, ImgFindRV_Inv, ImgFindIVC_Inv, ImgFindIVC_WallInv, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.DxImageFindingsKidney WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_DxImageFindingsKidney OFF
GO
DROP TABLE dbo.DxImageFindingsKidney
GO
EXECUTE sp_rename N'dbo.Tmp_DxImageFindingsKidney', N'DxImageFindingsKidney', 'OBJECT' 
GO
ALTER TABLE dbo.DxImageFindingsKidney ADD CONSTRAINT
	PK_DxImageFindingsKidney PRIMARY KEY CLUSTERED 
	(
	DxImageFindingKidneyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_DxImageFindingsKidney_DiagnosticId ON dbo.DxImageFindingsKidney
	(
	DiagnosticId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.DxImageFindingsKidney WITH NOCHECK ADD CONSTRAINT
	FK_DxImageFindingsKidney_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditDxImageFindingsKidney_UD
ON dbo.DxImageFindingsKidney FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_DxImageFindingsKidney
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.DxImageFindingKidneyId = Inserted.DxImageFindingKidneyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_DxImageFindingsKidney
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditDxImageFindingsKidney_UD', N'last', N'update'
GO
COMMIT
GO

--03ModifyspGetPatientHPIKidney.sql
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[spGetPatientHPIKidney]
   @PatientId int = NULL,
   @Rowcount int = NULL OUTPUT
AS
SET NOCOUNT ON
--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

/*
SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'

DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate     datetime NULL,
   VarString    varchar(255) NULL
   )
*/
DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarSummary
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarSummary   varchar(1000) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   TableName    varchar(50) NULL,
   PrimaryKey   int NOT NULL,
   ExtraInfo    varchar(500) NULL,
   VarStopDate  varchar(50) NULL
   )

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT MedTxDateText, 'Systemic Therapy: ' + MedTxType + ':', LTRIM(ISNULL(MedTxAgent,'')), MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId
FROM MedicalTherapy
WHERE MedicalTherapy.PatientId = @PatientId AND
      MedTxType IN('Chemo','Immuno','Bio_Tx')

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT MedTxDateText, MedTxType , LTRIM(ISNULL(': ' + MedTxAgent,'')), MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId
FROM MedicalTherapy
WHERE MedicalTherapy.PatientId = @PatientId AND
      MedTxType NOT IN('Chemo','Immuno','Bio_Tx')

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT RadTxDateText, 'Radiation Therapy: ' + ISNULL(RadTxType,'') + ':' , ISNULL(RadTxTarget,''), RadTxQuality, RadTxDate,RadTxStopDateText, 'RadiationTherapy', RadiationTherapyId
FROM RadiationTherapy
WHERE (RadiationTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT TOP 1 StatusDateText, '', Status  + ISNULL(': ' + StatusNotes,''), StatusQuality, StatusDate, 'Status', StatusId
FROM Status
WHERE Status.PatientId = @PatientId AND Status = 'Distant Metastasis'
ORDER BY StatusDate ASC 

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT TOP 1 StatusDateText, '', Status  + ISNULL(': ' + StatusNotes,''), StatusQuality, StatusDate, 'Status', StatusId
FROM Status
WHERE Status.PatientId = @PatientId AND Status = 'Local Recurrence'
ORDER BY StatusDate ASC 

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT TOP 1 StatusDateText, '', Status  + ISNULL(': ' + StatusNotes,''), StatusQuality, StatusDate, 'Status', StatusId
FROM Status
WHERE Status.PatientId = @PatientId AND 
      StatusDisease In('Renal Cell Carcinoma','Kidney','Kidney Cancer','Renal Cancer','Renal Pelvis Cancer')  AND
      StatusId NOT IN (SELECT PrimaryKey FROM @ChronoTable WHERE TableName='Status')
ORDER BY StatusDate DESC 

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,ExtraInfo)
SELECT OpDateText, '' VarName, ISNULL(OpCaseSurgeon + ' ','') + LTRIM(ISNULL(ProcSide + ' ','') 
       + ISNULL(ProcName,'Nephrectomy, unspecified')  + ISNULL(', Intra-Op Complications = ' + ProcComplication,'') 
       + ISNULL(', Histology = ' + PathHistology,'') + ISNULL(', Histology2 = ' + PathHistology2,'') 
       + ISNULL(', Tumor Size = ' + PathCancerMaxDim + ' cm','') + ISNULL(', TNM-Stage = ' + PathStageT,'') 
       + ISNULL(', ' + PathStageM,'') + + ISNULL(' (' + PathStageSystem + ')','')  
       ) VarSummary, OpQuality, OpDate, 'Procedures' TableName, Procedures.ProcedureId PrimaryKey,
       CASE WHEN (NephrectomyProc.ProcedureId IS NOT NULL OR Pathology.PathologyId IS NOT NULL )  
            THEN 'ProcNephrectomyDetails' 
            ELSE 'ProcNephrectomyNoDetails' 
       END ExtraInfo --The marks dupes
FROM OperatingRoomDetails INNER JOIN Procedures ON OperatingRoomDetails.OperatingRoomDetailId = Procedures.OperatingRoomDetailId
                          LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                          LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId AND
                                                                 PathologyStageGradeId = (SELECT TOP 1 PathologyStageGradeId 
                                                                                          FROM PathologyStageGrade
                                                                                          WHERE PathologyId = Pathology.PathologyId)
                          LEFT OUTER JOIN NephrectomyPath ON Pathology.PathologyId = NephrectomyPath.PathologyId
                          LEFT OUTER JOIN NephrectomyProc ON Procedures.ProcedureId = NephrectomyProc.ProcedureId
WHERE Procedures.PatientId = @PatientId AND 
      ProcName IN('Nephrectomy','Partial Nephrectomy','Laparoscopic Nephroureterectomy','Partial for Horshoe Kidney','Laparoscopic Partial Nephrectomy','Nephroureterectomy','Laparoscopic Radical Nephrectomy','Radical Nephrectomy','Exploratory Laparotomy', 'Robotic Partial Nephrectomy', 'Robotic Radical Nephrectomy') 

/*
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,ISNULL(ProcName + ',',''), ISNULL('Result = ' + PathResult,'') + ISNULL(', Histology = ' + PathHistology,'') + ISNULL(', Histology2 = ' + PathHistology2,''), PathQuality, ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
WHERE (Procedures.PatientId = @PatientId) AND 
      ProcName IN('RLND','Thoracotomy','Lobectomy','Craniotomy','Adrenalectomy','Vertebral Body Resection','Hepatic Resection','Distal Pancreatectomy','Lobectomy','Wedge Resection','Bronchoscopy','Bone Resection','Renal Bed Resection','RPLND')
*/

--procedures not in the current list
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, ISNULL(ProcApproach + ' ','') +  LTRIM(ISNULL(RIGHT(PathStageSystem,2),'') + ' '  + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ISNULL(PathStageM,'') + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathResult,'')), ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN 
                (SELECT PrimaryKey,VarName FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT VarDate,VarName, ISNULL(VarExtraInfo,'') + ISNULL(' ' + VarValue,''),Quality,SortDate,
       (SELECT TOP 1 PtProtocolStatusDateText
        FROM PatientProtocolStatus 
        WHERE PatientProtocolId = PatProtId AND PtProtocolStatus = 'Off Study') VarStopDate,
       TableName,PrimaryKey
FROM 
   (
   SELECT dbo.fnGetPtProtocolStatusDate(PatientProtocolId,'DateText') VarDate,'Protocol' VarName,
          ISNULL(dbo.fnGetPtProtocolStatusLast(PatientProtocolId),PtProtocolStatus) VarValue,PtProtocolQuality Quality,
          CAST(dbo.fnGetPtProtocolStatusDate(PatientProtocolId,'Date') AS datetime) SortDate,
          'PatientProtocols' TableName,PatientProtocolId PrimaryKey,
          ProtocolNum VarExtraInfo,
          PatientProtocolId PatProtId
   FROM PatientProtocols INNER JOIN Protocols ON PatientProtocols.ProtocolId = Protocols.ProtocolId
   WHERE (PatientId = @PatientId) 
   ) a LEFT OUTER JOIN 
   (
   SELECT c.LkpCode 
   FROM LookupCodeAttributes a INNER JOIN
        LookupAttributes b ON a.AttributeId=b.AttributeId INNER JOIN
        LookupCodes c ON a.LookupCodeId=c.LookupCodeId
   WHERE AttributeName = 'ProtocolScreening' AND
         AttributeValue = 'HPI'
   ) b ON a.VarValue LIKE ('%' + b.LkpCode + '%')
WHERE b.LkpCode IS NULL

--Clean up variables
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarSummary = ''
WHERE VarSummary IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL
UPDATE @ChronoTable 
   SET ExtraInfo = ''
WHERE ExtraInfo IS NULL

--Remove Dupe nephrectomy records
DELETE @ChronoTable FROM @ChronoTable a INNER JOIN 
                           (
                           SELECT SortDate FROM @ChronoTable
                           WHERE TableName='Procedures' AND ExtraInfo = 'ProcNephrectomyDetails'
                           ) b ON a.SortDate = b.SortDate
WHERE TableName='Procedures' AND ExtraInfo='ProcNephrectomyNoDetails' 

--More dupe procedures removed
SELECT PatientHPI 
FROM 
   (
   SELECT DISTINCT LTRIM(VarDate 
               + CASE WHEN VarStopDate IS NULL THEN ' ' ELSE ' - ' + VarStopDate + ' ' END 
               + CASE WHEN VarName<>'' THEN VarName + ' ' ELSE '' END 
               + VarSummary) AS PatientHPI,SortDate --,VarName,VarDate
   FROM @ChronoTable
   ) a
ORDER BY SortDate
SET @Rowcount = @@ROWCOUNT
GO

--04ModifyspChronologicalList.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spChronologicalList]
	@PatientId int = NULL,
	@UserName varchar(50) = NULL,
   @AbsentEvents bit = 0,
	@Actions bit = 0,
	@Allergies bit = 0,
	@BrachyTherapy bit = 0,
	@Categories bit = 0,
	@ClinicalStages bit = 0,
	@Comorbidities bit = 0,
	@Cytologies bit = 0,
	@Diagnostics bit = 0,
	@DietaryIntake bit = 0,
	@Encounters bit = 0,
	@FamilyMembers bit = 0,
	@Hospitalizations bit = 0,
	@Identifiers bit = 0,
	@ItemsPending bit = 0, --special case
	@ItemsMissing bit = 0, --special case
	@LabTests bit = 0,
	@ListAll bit = 0, --special case
	@ListCommon bit = 0, --special case
	@ListTreatments bit = 0, --special case
	@Medications bit = 0,
	@MedicalTherapy bit = 0,
	@OperatingRoomDetails bit = 0, --special case
	@Pathology bit = 0,
	@PatientConsent bit = 0,
	@PatientPhysicians bit = 0,
	@Procedures bit = 0,
	@ProcNeuralStimulations bit = 0,
	@Protocols bit = 0,
	@QOL_Therapy bit = 0,
	@RadiationTherapy bit = 0,
	@SocialHistories bit = 0,
	@SpecimenAccessions bit = 0,
	@Surveys bit = 0,
	@Status bit = 0,
	@Toxicities bit = 0,
   @ExcludeLabs bit = 0 --special case
AS
SET NOCOUNT ON
--Each above variable represents a table name except for the special cases.

--DECLARE @ChronoTable TABLE 
/*
table variable might be more efficient than temp table however cannot
use syntax 'INSERT INTO @ChronoTable EXEC spChronoListAll @PatientId' with
a table variable. Cannot use a procedure as the from clause when inserting to a 
table variable would need to rewrite each spChrono child procedure as a table-valued 
function then can use that function in the FROM clause of Insert statement.
'INSERT INTO @ChronoTable SELECT * FROM dbo.fn_ChronoListAll(@PatientId)'
However sp is much more flexible than table-valued function.
*/

CREATE TABLE #ChronoTable
   (
   ChronoId         int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate          varchar(50) NULL,
   VarName          varchar(100) NULL,
   VarValue         varchar(500) NULL,
   Quality          varchar(50) NULL,
   SortDate         datetime NULL,
   GroupNumber      int NULL,
   TableName        varchar(50) COLLATE database_default NULL,
   PrimaryKey       int NOT NULL,
   ParentKey        int NULL,
   ProcId           int NULL,
   OpId             int NULL,
   CommonKey        int NULL,
   PendingNote      bit NULL DEFAULT (0)
   )

--Add single compound index
CREATE INDEX I_ChronoTable ON #ChronoTable (SortDate,CommonKey,ProcId,GroupNumber)

--holds patient Notifications records
DECLARE @NotificationTable TABLE
	(
	NotificationId int NOT NULL,
	TableName varchar(50) NULL,
	TablePrimaryKey int NULL,
	Response varchar(255) NULL
	)

--most special cases are mutually exclusive
IF @ListAll = 1
   BEGIN
      SET @AbsentEvents = 1
      SET @Actions = 1
      SET @Allergies = 1
      SET @BrachyTherapy = 1
      SET @Categories = 1
      SET @ClinicalStages = 1
      SET @Comorbidities = 1
      SET @Diagnostics = 1
      SET @DietaryIntake = 1
      SET @Encounters = 1
      SET @FamilyMembers = 1
      SET @Hospitalizations = 1
      SET @Identifiers = 1
      SET @LabTests = 1
      SET @Medications = 1
      SET @MedicalTherapy = 1
      SET @Pathology = 1
      SET @PatientConsent = 1
      SET @PatientPhysicians = 1
      SET @Procedures = 1
      SET @ProcNeuralStimulations = 1
      SET @Protocols = 1
      SET @QOL_Therapy = 1
      SET @RadiationTherapy = 1
      SET @SocialHistories = 1
      SET @OperatingRoomDetails = 1
      SET @SpecimenAccessions = 1
      SET @Status = 1
      SET @Surveys = 1
      SET @Toxicities = 1
   END
ELSE IF @ListCommon = 1
   BEGIN
      SET @BrachyTherapy = 1
      SET @ClinicalStages = 1
      SET @Diagnostics = 1
      SET @LabTests = 1
      SET @MedicalTherapy = 1
      SET @Pathology = 1
      SET @Procedures = 1
      SET @Protocols = 1
      SET @QOL_Therapy = 1
      SET @RadiationTherapy = 1
      SET @OperatingRoomDetails = 1
      SET @SpecimenAccessions =1
      SET @Status = 1
      SET @Toxicities = 1
   END
ELSE IF @ListTreatments = 1
   BEGIN
      SET @BrachyTherapy = 1
      SET @MedicalTherapy = 1
      SET @Procedures = 1
      SET @Protocols = 1
      SET @RadiationTherapy = 1
      SET @OperatingRoomDetails = 1
   END
ELSE IF @OperatingRoomDetails = 1
   BEGIN
      SET @Pathology = 1
      SET @Procedures = 1
      SET @ProcNeuralStimulations = 1
      SET @SpecimenAccessions = 1
   END

--Special handling for excluding labs from any list
IF @ExcludeLabs = 1
   SET @LabTests = 0

IF @AbsentEvents = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListAbsentEvents @PatientId
IF @Actions = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListActions @PatientId
IF @Allergies = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListAllergies @PatientId
IF @BrachyTherapy = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListBrachyTherapy @PatientId
IF @Categories = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListCategories @PatientId, @UserName
IF @ClinicalStages = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListClinicalStages @PatientId
IF @Comorbidities = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListComorbidities @PatientId
IF @Cytologies = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListCytologies @PatientId
IF @Diagnostics = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListDiagnostics @PatientId
IF @DietaryIntake = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListDietaryIntake @PatientId
IF @Encounters = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListEncounters @PatientId
IF @FamilyMembers = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListFamilyMembers @PatientId
IF @Hospitalizations = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListHospitalizations @PatientId
IF @Identifiers = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListIdentifiers @PatientId
IF @ItemsMissing = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListItemsMissing @PatientId
IF @ItemsPending = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListItemsPending @PatientId
IF @LabTests = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListLabTests @PatientId
IF @Medications = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListMedications @PatientId
IF @MedicalTherapy = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListMedicalTherapy @PatientId
IF @OperatingRoomDetails = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListOperatingRoomDetails @PatientId
IF @Pathology = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey,ProcId,OpId) EXEC spChronoListPathology @PatientId
IF @PatientConsent = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListPatientConsent @PatientId
IF @PatientPhysicians = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListPatientPhysicians @PatientId
IF @Procedures = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey,ProcId,OpId) EXEC spChronoListProcedures @PatientId
IF @ProcNeuralStimulations =1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey,ProcId,OpId) EXEC spChronoListProcNeuralStimulations @PatientIdIF @Protocols = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListProtocols @PatientId
IF @QOL_Therapy = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListQOL_Therapy @PatientId
IF @RadiationTherapy = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListRadiationTherapy @PatientId
IF @SocialHistories = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListSocialHistories @PatientId
IF @SpecimenAccessions = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListSpecimenAccessions @PatientId
IF @Status = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListStatus @PatientId
IF @Surveys = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListSurveys @PatientId
IF @Toxicities = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListToxicities @PatientId

--load the notifications records for the patient. PatientId is indexed
INSERT INTO @NotificationTable (NotificationId,TableName,TablePrimaryKey,Response)
SELECT NotificationId,TableName,TablePrimaryKey,Response
FROM Notifications
WHERE PatientId=@PatientId

--Would work instead of using column list but makes chrono list slower
--ALTER TABLE #ChronoTable ADD OpId int

--This section is post processing to display complex data
--ProstatectomyPath
UPDATE #ChronoTable
SET VarValue = dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,OperatingRoomDetailId)
FROM #ChronoTable INNER JOIN ProstatectomyPath ON PrimaryKey = PathologyId
                  INNER JOIN Pathology ON ProstatectomyPath.PathologyId=Pathology.PathologyId
WHERE TableName = 'Pathology'
--CystectomyPath
UPDATE #ChronoTable
SET VarValue = LTRIM(ISNULL(RIGHT(PathStageSystem,2),'') + ' ' + ISNULL(PathStageT,'') + ' ' +  ISNULL(PathGrade,''))            
FROM #ChronoTable INNER JOIN CystectomyPath ON PrimaryKey = PathologyId
                  INNER JOIN Pathology ON CystectomyPath.PathologyId=Pathology.PathologyId
                  LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId=PathologyStageGrade.PathologyId
WHERE TableName = 'Pathology'
--PancreasPath
UPDATE #ChronoTable
SET VarValue = RTRIM(ISNULL(PathStageSystem,'') + ' ' + ISNULL(PathStageT,'')) + ' ' + RTRIM(ISNULL(PathHistology,'') + ' ' + RTRIM(ISNULL(PathGrade,'')) + ' ' + ISNULL(PathSite,''))
FROM #ChronoTable INNER JOIN PancreasPath ON PrimaryKey = PathologyId
                  INNER JOIN Pathology ON PancreasPath.PathologyId=Pathology.PathologyId
                  LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId=PathologyStageGrade.PathologyId
WHERE TableName = 'Pathology'
--RPLND
UPDATE #ChronoTable
SET VarValue = ISNULL(NULLIF(LTRIM(ISNULL(PathHistology,'') + ' ' + ISNULL(PathStageN,'') + ' ' +  ISNULL(PathStageM,'')),''), VarValue)
FROM #ChronoTable INNER JOIN Pathology ON PrimaryKey = Pathology.PathologyId
                  INNER JOIN RPLND_Proc ON RPLND_Proc.ProcedureId=Pathology.ProcedureId
                  LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId=PathologyStageGrade.PathologyId
WHERE TableName = 'Pathology'
--Endoscopy based on a lookup code
UPDATE #ChronoTable
SET VarName = ISNULL(PathSpecimenCollection,PathSpecimenType),
    VarValue = LTRIM(ISNULL(RIGHT(PathStageSystem,2),'') + ' '  + ISNULL(PathStageT,'') + ' ' + ISNULL(PathGrade,''))
FROM #ChronoTable INNER JOIN Pathology ON PrimaryKey = Pathology.PathologyId
                  LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId=PathologyStageGrade.PathologyId
WHERE TableName = 'Pathology' AND PathSpecimenType = 'Endoscopy'
--Prostate Biopsies
UPDATE #ChronoTable
SET VarValue = dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult)
FROM #ChronoTable INNER JOIN ProstateBiopsyPath ON PrimaryKey = PathologyId
                  INNER JOIN Pathology ON ProstateBiopsyPath.PathologyId=Pathology.PathologyId
WHERE TableName = 'Pathology'

/*
The GroupNumber Columns allows a secondary sort order after the date.
It also allows the date value to be removed for certain rows.
*/
UPDATE #ChronoTable
SET GroupNumber = LkpOrder
FROM #ChronoTable INNER JOIN LookupCodes ON TableName = LkpCode
WHERE LkpFieldName = 'ChronoList' AND GroupNumber IS NULL

/*
The CommonKey column allows grouping parent and child records together
*/
UPDATE #ChronoTable
SET CommonKey = PrimaryKey
WHERE TableName IN ('Encounters','OperatingRoomDetails') AND CommonKey IS NULL

UPDATE #ChronoTable
SET CommonKey = ParentKey
WHERE TableName Like 'Enc%' AND CommonKey IS NULL

UPDATE #ChronoTable
SET CommonKey = ISNULL(OpId,ProcId)
WHERE TableName IN ('Procedures','Pathology','NeuralStimulationProcFinding') AND CommonKey IS NULL

/*
This will force a pathology to group with it's related procedure or Operating room detail
regardless of the date assigned in the path report however date does need to be filled in
because of null comparison. 
*/
UPDATE #ChronoTable
SET SortDate = b.SortDate
FROM #ChronoTable AS a INNER JOIN 
                  (SELECT CommonKey,SortDate
                   FROM  #ChronoTable 
                   WHERE TableName IN('Procedures','OperatingRoomDetails') AND CommonKey IS NOT NULL
                  ) AS b ON a.CommonKey = b.CommonKey AND a.SortDate <> b.SortDate
WHERE a.TableName = 'Pathology' AND a.CommonKey IS NOT NULL

--Update the PendingNote using the notification data
UPDATE #ChronoTable
SET PendingNote = 1
FROM #ChronoTable AS a INNER JOIN @NotificationTable b ON a.PrimaryKey=b.TablePrimaryKey AND
                                                          a.TableName=b.TableName
WHERE ISNULL(Response,'None') = 'None'

SELECT * FROM #ChronoTable
ORDER BY SortDate,CommonKey,ProcId,GroupNumber
--DROP TABLE #ChronoTable
GO

--05ModifyViewFJ_CurrentDataView.sql
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER  VIEW [dbo].[FJ_CurrentDataView]
AS
--Not all tables are represented here Includes deceased patients
SELECT a.PatientId AS PatientId
FROM 
   (
   SELECT ClinStageDate AS SortDate, 'ClinicalStages' AS TableName, PatientId
   FROM ClinicalStages
   WHERE ClinStageDate > DATEADD(m,-14,GETDATE())
   UNION
   SELECT DxDate, 'Diagnostics', PatientId
   FROM Diagnostics
   WHERE DxDate > DATEADD(m,-14,GETDATE())
   UNION
   SELECT LabDate, 'LabTests', PatientId
   FROM LabTests
   WHERE LabDate > DATEADD(m,-14,GETDATE())
   UNION
   SELECT MedTxDate, 'MedicalTherapy', PatientId
   FROM MedicalTherapy
   WHERE MedTxDate > DATEADD(m,-14,GETDATE())
   UNION
   SELECT ProcDate, 'Procedures', PatientId
   FROM Procedures
   WHERE ProcDate > DATEADD(m,-14,GETDATE())
   UNION
   SELECT OpDate, 'OperatingRoomDetails', PatientId
   FROM OperatingRoomDetails
   WHERE OpDate > DATEADD(m,-14,GETDATE())
   UNION
   SELECT PathDate, 'Pathology', PatientId
   FROM Pathology
   WHERE PathDate > DATEADD(m,-14,GETDATE())
   UNION
   SELECT BrachyDate, 'BrachyTherapy', PatientId
   FROM BrachyTherapy
   WHERE BrachyDate > DATEADD(m,-14,GETDATE())
   UNION
   SELECT RadTxDate, 'RadiationTherapy', PatientId
   FROM RadiationTherapy
   WHERE RadTxDate > DATEADD(m,-14,GETDATE())
   UNION
   SELECT StatusDate, 'Status', PatientId
   FROM Status
   WHERE StatusDate > DATEADD(m,-14,GETDATE())
   UNION
   SELECT PtProtocolStatusDate, 'Protocols', PatientId
   FROM PatientProtocols INNER JOIN PatientProtocolStatus ON PatientProtocolStatus.PatientProtocolId = PatientProtocols.PatientProtocolId
   WHERE PtProtocolStatusDate > DATEADD(m,-14,GETDATE())
   UNION
   SELECT EncDate, 'Encounters', PatientId
   FROM Encounters
   WHERE EncDate > DATEADD(m,-14,GETDATE())
   UNION
   SELECT SurveyDate, 'Surveys', PatientId
   FROM Surveys
   WHERE SurveyDate > DATEADD(m,-14,GETDATE())
   --Add in deceased patients classified as having a DeathDateText
   UNION
   SELECT PtDeathDate, 'Patients',PatientId
   FROM Patients
   WHERE (PtDeathDateText IS NOT NULL)
   )  AS a
GROUP BY a.PatientId
GO

--06ModifyTableDiagnostics.sql
GO
ALTER TABLE AuditLog_Diagnostics
ALTER COLUMN DxNotes varchar(2000)

ALTER TABLE Diagnostics
ALTER COLUMN DxNotes varchar(2000)
GO

--07ModifyTableThyroidProc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_ThyroidProc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
	ProcR_Lobe varchar(50) NULL,
	ProcL_Lobe varchar(50) NULL,
	ProcIsthmus varchar(50) NULL,
	ProcTracheaMgmt varchar(50) NULL,
	ProcTracheaReconstruct varchar(50) NULL,
	ProcTracheostomy varchar(50) NULL,
	ProcLarynxMgmt varchar(50) NULL,
	ProcEsophagusPharynxMgmt varchar(50) NULL,
	ProcEsophagusPharynxReconstruct varchar(50) NULL,
	ProcLaryngealNerveRight varchar(50) NULL,
	ProcLaryngealNerveLeft varchar(50) NULL,
	ProcPalpableNodes varchar(50) NULL,
	ProcNodeDissection varchar(255) NULL,
	ProcTotalThyroidectomy varchar(50) NULL,
	ProcR_SuperiorParathyroid varchar(50) NULL,
	ProcR_InferiorParathyroid varchar(50) NULL,
	ProcL_SuperiorParathyroid varchar(50) NULL,
	ProcL_InferiorParathyroid varchar(50) NULL,
	ProcStrapMuscle varchar(50) NULL,
	ProcPositioningDraping varchar(1000) NULL,
	ProcIncisionFlaps varchar(1000) NULL,
	ProcR_Lobectomy varchar(1000) NULL,
	ProcL_Lobectomy varchar(1000) NULL,
	ProcWoundClosure varchar(1000) NULL,
	ProcDrain varchar(50) NULL,
	ProcIncisionLength varchar(50) NULL,
	ProcSuperiorLaryngealNerve varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_ThyroidProc)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_ThyroidProc (LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcR_Lobe, ProcL_Lobe, ProcIsthmus, ProcTracheaMgmt, ProcTracheaReconstruct, ProcTracheostomy, ProcLarynxMgmt, ProcEsophagusPharynxMgmt, ProcEsophagusPharynxReconstruct, ProcLaryngealNerveRight, ProcLaryngealNerveLeft, ProcPalpableNodes, ProcNodeDissection, ProcTotalThyroidectomy, ProcR_SuperiorParathyroid, ProcR_InferiorParathyroid, ProcL_SuperiorParathyroid, ProcL_InferiorParathyroid, ProcStrapMuscle, ProcPositioningDraping, ProcIncisionFlaps, ProcR_Lobectomy, ProcL_Lobectomy, ProcWoundClosure, ProcDrain, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcR_Lobe, ProcL_Lobe, ProcIsthmus, ProcTracheaMgmt, ProcTracheaReconstruct, ProcTracheostomy, ProcLarynxMgmt, ProcEsophagusPharynxMgmt, ProcEsophagusPharynxReconstruct, ProcLaryngealNerveRight, ProcLaryngealNerveLeft, ProcPalpableNodes, ProcNodeDissection, ProcTotalThyroidectomy, ProcR_SuperiorParathyroid, ProcR_InferiorParathyroid, ProcL_SuperiorParathyroid, ProcL_InferiorParathyroid, ProcStrapMuscle, ProcPositioningDraping, ProcIncisionFlaps, ProcR_Lobectomy, ProcL_Lobectomy, ProcWoundClosure, ProcDrain, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_ThyroidProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_ThyroidProc
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_ThyroidProc', N'AuditLog_ThyroidProc', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ThyroidProc
	DROP CONSTRAINT FK_ThyroidProc_Procedures
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_ThyroidProc
	(
	ProcedureId int NOT NULL,
	ProcR_Lobe varchar(50) NULL,
	ProcL_Lobe varchar(50) NULL,
	ProcIsthmus varchar(50) NULL,
	ProcTracheaMgmt varchar(50) NULL,
	ProcTracheaReconstruct varchar(50) NULL,
	ProcTracheostomy varchar(50) NULL,
	ProcLarynxMgmt varchar(50) NULL,
	ProcEsophagusPharynxMgmt varchar(50) NULL,
	ProcEsophagusPharynxReconstruct varchar(50) NULL,
	ProcLaryngealNerveRight varchar(50) NULL,
	ProcLaryngealNerveLeft varchar(50) NULL,
	ProcPalpableNodes varchar(50) NULL,
	ProcNodeDissection varchar(255) NULL,
	ProcTotalThyroidectomy varchar(50) NULL,
	ProcR_SuperiorParathyroid varchar(50) NULL,
	ProcR_InferiorParathyroid varchar(50) NULL,
	ProcL_SuperiorParathyroid varchar(50) NULL,
	ProcL_InferiorParathyroid varchar(50) NULL,
	ProcStrapMuscle varchar(50) NULL,
	ProcPositioningDraping varchar(1000) NULL,
	ProcIncisionFlaps varchar(1000) NULL,
	ProcR_Lobectomy varchar(1000) NULL,
	ProcL_Lobectomy varchar(1000) NULL,
	ProcWoundClosure varchar(1000) NULL,
	ProcDrain varchar(50) NULL,
	ProcIncisionLength varchar(50) NULL,
	ProcSuperiorLaryngealNerve varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.ThyroidProc)
	 EXEC('INSERT INTO dbo.Tmp_ThyroidProc (ProcedureId, ProcR_Lobe, ProcL_Lobe, ProcIsthmus, ProcTracheaMgmt, ProcTracheaReconstruct, ProcTracheostomy, ProcLarynxMgmt, ProcEsophagusPharynxMgmt, ProcEsophagusPharynxReconstruct, ProcLaryngealNerveRight, ProcLaryngealNerveLeft, ProcPalpableNodes, ProcNodeDissection, ProcTotalThyroidectomy, ProcR_SuperiorParathyroid, ProcR_InferiorParathyroid, ProcL_SuperiorParathyroid, ProcL_InferiorParathyroid, ProcStrapMuscle, ProcPositioningDraping, ProcIncisionFlaps, ProcR_Lobectomy, ProcL_Lobectomy, ProcWoundClosure, ProcDrain, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT ProcedureId, ProcR_Lobe, ProcL_Lobe, ProcIsthmus, ProcTracheaMgmt, ProcTracheaReconstruct, ProcTracheostomy, ProcLarynxMgmt, ProcEsophagusPharynxMgmt, ProcEsophagusPharynxReconstruct, ProcLaryngealNerveRight, ProcLaryngealNerveLeft, ProcPalpableNodes, ProcNodeDissection, ProcTotalThyroidectomy, ProcR_SuperiorParathyroid, ProcR_InferiorParathyroid, ProcL_SuperiorParathyroid, ProcL_InferiorParathyroid, ProcStrapMuscle, ProcPositioningDraping, ProcIncisionFlaps, ProcR_Lobectomy, ProcL_Lobectomy, ProcWoundClosure, ProcDrain, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.ThyroidProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.ThyroidProc
GO
EXECUTE sp_rename N'dbo.Tmp_ThyroidProc', N'ThyroidProc', 'OBJECT' 
GO
ALTER TABLE dbo.ThyroidProc ADD CONSTRAINT
	PK_ThyroidProc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.ThyroidProc WITH NOCHECK ADD CONSTRAINT
	FK_ThyroidProc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
CREATE TRIGGER dbo.trgAuditThyroidProc_UD
ON dbo.ThyroidProc FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_ThyroidProc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_ThyroidProc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO

--08ModifyTableProstatectomyProc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_ProstatectomyProc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
	ProcStageSystem varchar(50) NULL,
	ProcStageT varchar(50) NULL,
	ProcBulldogClamps varchar(50) NULL,
	ProcBladderClosure varchar(50) NULL,
	ProcAccessVessels varchar(50) NULL,
	ProcAV_Preserved varchar(50) NULL,
	ProcPuboprostatics varchar(50) NULL,
	ProcR_AV_Site varchar(50) NULL,
	ProcR_AV_Diam varchar(50) NULL,
	ProcL_AV_Site varchar(50) NULL,
	ProcL_AV_Diam varchar(50) NULL,
	ProcR_DopplerStatus varchar(50) NULL,
	ProcR_DopplerVA varchar(50) NULL,
	ProcL_DopplerStatus varchar(50) NULL,
	ProcL_DopplerVA varchar(50) NULL,
	ProcL_NVB_DissectionType varchar(50) NULL,
	ProcL_NVB_Status varchar(50) NULL,
	ProcL_NVB_Graft varchar(50) NULL,
	ProcL_NVB_Donor varchar(50) NULL,
	ProcL_NVB_Quality varchar(50) NULL,
	ProcR_NVB_DissectionType varchar(50) NULL,
	ProcR_NVB_Status varchar(50) NULL,
	ProcR_NVB_Graft varchar(50) NULL,
	ProcR_NVB_Donor varchar(50) NULL,
	ProcR_NVB_Quality varchar(50) NULL,
	ProcAnastQuality varchar(50) NULL,
	ProcAnastNumSutures varchar(50) NULL,
	ProcAnastSuturePattern varchar(50) NULL,
	ProcAnastSutureNotes varchar(255) NULL,
	ProcAnastWatertight varchar(50) NULL,
	ProcBN_Diam varchar(50) NULL,
	ProcBN_DegreeEversion varchar(50) NULL,
	ProcSuspVeinComplex varchar(50) NULL,
	ProcL_Drain varchar(50) NULL,
	ProcR_Drain varchar(50) NULL,
	ProcAnteriorDrain varchar(50) NULL,
	ProcPosteriorDrain varchar(50) NULL,
	ProcCathTraction varchar(50) NULL,
	ProcCathTractionDuration varchar(50) NULL,
	ProcSV_DissectFirst varchar(50) NULL,
	ProcPeriprostaticVeins varchar(50) NULL,
	ProcBladderNeckPreservation varchar(50) NULL,
	ProcUrethralStumpScore varchar(50) NULL,
	ProcPelvisAccessibility varchar(50) NULL,
	ProcSkinIncisionLength varchar(50) NULL,
	ProcFascialIncisionLength varchar(50) NULL,
	ProcMedianLobe varchar(50) NULL,
	ProcUrachalSparing varchar(50) NULL,
	ProcNumSize5Ports varchar(50) NULL,
	ProcNumSize8Ports varchar(50) NULL,
	ProcNumSize10Ports varchar(50) NULL,
	ProcNumSize12Ports varchar(50) NULL,
	ProcMethodOfEntry varchar(50) NULL,
	ProcSkinClosure varchar(50) NULL,
	ProcFascialClosureMethod varchar(50) NULL,
	ProcClosureMaterialsUsed varchar(50) NULL,
	ProcSV_Excision varchar(50) NULL,
	ProcL_SV_Excision varchar(50) NULL,
	ProcR_SV_Excision varchar(50) NULL,
	ProcHypogastric varchar(50) NULL,
	ProcPneumoperPressure varchar(50) NULL,
	ProcFoleyPlacement varchar(50) NULL,
	ProcBladderNeckReconstruction varchar(50) NULL,
	ProcAnteriorFascialSuspension varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_ProstatectomyProc)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_ProstatectomyProc (LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcStageSystem, ProcStageT, ProcBulldogClamps, ProcBladderClosure, ProcAccessVessels, ProcAV_Preserved, ProcPuboprostatics, ProcR_AV_Site, ProcR_AV_Diam, ProcL_AV_Site, ProcL_AV_Diam, ProcR_DopplerStatus, ProcR_DopplerVA, ProcL_DopplerStatus, ProcL_DopplerVA, ProcL_NVB_DissectionType, ProcL_NVB_Status, ProcL_NVB_Graft, ProcL_NVB_Donor, ProcL_NVB_Quality, ProcR_NVB_DissectionType, ProcR_NVB_Status, ProcR_NVB_Graft, ProcR_NVB_Donor, ProcR_NVB_Quality, ProcAnastQuality, ProcAnastNumSutures, ProcAnastSuturePattern, ProcAnastSutureNotes, ProcAnastWatertight, ProcBN_Diam, ProcBN_DegreeEversion, ProcSuspVeinComplex, ProcL_Drain, ProcR_Drain, ProcAnteriorDrain, ProcPosteriorDrain, ProcCathTraction, ProcCathTractionDuration, ProcSV_DissectFirst, ProcPeriprostaticVeins, ProcBladderNeckPreservation, ProcUrethralStumpScore, ProcPelvisAccessibility, ProcSkinIncisionLength, ProcFascialIncisionLength, ProcMedianLobe, ProcUrachalSparing, ProcNumSize5Ports, ProcNumSize8Ports, ProcNumSize10Ports, ProcNumSize12Ports, ProcMethodOfEntry, ProcSkinClosure, ProcFascialClosureMethod, ProcClosureMaterialsUsed, ProcSV_Excision, ProcL_SV_Excision, ProcR_SV_Excision, ProcHypogastric, ProcPneumoperPressure, ProcFoleyPlacement, ProcBladderNeckReconstruction, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcStageSystem, ProcStageT, ProcBulldogClamps, ProcBladderClosure, ProcAccessVessels, ProcAV_Preserved, ProcPuboprostatics, ProcR_AV_Site, ProcR_AV_Diam, ProcL_AV_Site, ProcL_AV_Diam, ProcR_DopplerStatus, ProcR_DopplerVA, ProcL_DopplerStatus, ProcL_DopplerVA, ProcL_NVB_DissectionType, ProcL_NVB_Status, ProcL_NVB_Graft, ProcL_NVB_Donor, ProcL_NVB_Quality, ProcR_NVB_DissectionType, ProcR_NVB_Status, ProcR_NVB_Graft, ProcR_NVB_Donor, ProcR_NVB_Quality, ProcAnastQuality, ProcAnastNumSutures, ProcAnastSuturePattern, ProcAnastSutureNotes, ProcAnastWatertight, ProcBN_Diam, ProcBN_DegreeEversion, ProcSuspVeinComplex, ProcL_Drain, ProcR_Drain, ProcAnteriorDrain, ProcPosteriorDrain, ProcCathTraction, ProcCathTractionDuration, ProcSV_DissectFirst, ProcPeriprostaticVeins, ProcBladderNeckPreservation, ProcUrethralStumpScore, ProcPelvisAccessibility, ProcSkinIncisionLength, ProcFascialIncisionLength, ProcMedianLobe, ProcUrachalSparing, ProcNumSize5Ports, ProcNumSize8Ports, ProcNumSize10Ports, ProcNumSize12Ports, ProcMethodOfEntry, ProcSkinClosure, ProcFascialClosureMethod, ProcClosureMaterialsUsed, ProcSV_Excision, ProcL_SV_Excision, ProcR_SV_Excision, ProcHypogastric, ProcPneumoperPressure, ProcFoleyPlacement, ProcBladderNeckReconstruction, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_ProstatectomyProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_ProstatectomyProc
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_ProstatectomyProc', N'AuditLog_ProstatectomyProc', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProstatectomyProc
	DROP CONSTRAINT FK_ProstatectomyProc_Procedures
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_ProstatectomyProc
	(
	ProcedureId int NOT NULL,
	ProcStageSystem varchar(50) NULL,
	ProcStageT varchar(50) NULL,
	ProcBulldogClamps varchar(50) NULL,
	ProcBladderClosure varchar(50) NULL,
	ProcAccessVessels varchar(50) NULL,
	ProcAV_Preserved varchar(50) NULL,
	ProcPuboprostatics varchar(50) NULL,
	ProcR_AV_Site varchar(50) NULL,
	ProcR_AV_Diam varchar(50) NULL,
	ProcL_AV_Site varchar(50) NULL,
	ProcL_AV_Diam varchar(50) NULL,
	ProcR_DopplerStatus varchar(50) NULL,
	ProcR_DopplerVA varchar(50) NULL,
	ProcL_DopplerStatus varchar(50) NULL,
	ProcL_DopplerVA varchar(50) NULL,
	ProcL_NVB_DissectionType varchar(50) NULL,
	ProcL_NVB_Status varchar(50) NULL,
	ProcL_NVB_Graft varchar(50) NULL,
	ProcL_NVB_Donor varchar(50) NULL,
	ProcL_NVB_Quality varchar(50) NULL,
	ProcR_NVB_DissectionType varchar(50) NULL,
	ProcR_NVB_Status varchar(50) NULL,
	ProcR_NVB_Graft varchar(50) NULL,
	ProcR_NVB_Donor varchar(50) NULL,
	ProcR_NVB_Quality varchar(50) NULL,
	ProcAnastQuality varchar(50) NULL,
	ProcAnastNumSutures varchar(50) NULL,
	ProcAnastSuturePattern varchar(50) NULL,
	ProcAnastSutureNotes varchar(255) NULL,
	ProcAnastWatertight varchar(50) NULL,
	ProcBN_Diam varchar(50) NULL,
	ProcBN_DegreeEversion varchar(50) NULL,
	ProcSuspVeinComplex varchar(50) NULL,
	ProcL_Drain varchar(50) NULL,
	ProcR_Drain varchar(50) NULL,
	ProcAnteriorDrain varchar(50) NULL,
	ProcPosteriorDrain varchar(50) NULL,
	ProcCathTraction varchar(50) NULL,
	ProcCathTractionDuration varchar(50) NULL,
	ProcSV_DissectFirst varchar(50) NULL,
	ProcPeriprostaticVeins varchar(50) NULL,
	ProcBladderNeckPreservation varchar(50) NULL,
	ProcUrethralStumpScore varchar(50) NULL,
	ProcPelvisAccessibility varchar(50) NULL,
	ProcSkinIncisionLength varchar(50) NULL,
	ProcFascialIncisionLength varchar(50) NULL,
	ProcMedianLobe varchar(50) NULL,
	ProcUrachalSparing varchar(50) NULL,
	ProcNumSize5Ports varchar(50) NULL,
	ProcNumSize8Ports varchar(50) NULL,
	ProcNumSize10Ports varchar(50) NULL,
	ProcNumSize12Ports varchar(50) NULL,
	ProcMethodOfEntry varchar(50) NULL,
	ProcSkinClosure varchar(50) NULL,
	ProcFascialClosureMethod varchar(50) NULL,
	ProcClosureMaterialsUsed varchar(50) NULL,
	ProcSV_Excision varchar(50) NULL,
	ProcL_SV_Excision varchar(50) NULL,
	ProcR_SV_Excision varchar(50) NULL,
	ProcHypogastric varchar(50) NULL,
	ProcPneumoperPressure varchar(50) NULL,
	ProcFoleyPlacement varchar(50) NULL,
	ProcBladderNeckReconstruction varchar(50) NULL,
	ProcAnteriorFascialSuspension varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.ProstatectomyProc)
	 EXEC('INSERT INTO dbo.Tmp_ProstatectomyProc (ProcedureId, ProcStageSystem, ProcStageT, ProcBulldogClamps, ProcBladderClosure, ProcAccessVessels, ProcAV_Preserved, ProcPuboprostatics, ProcR_AV_Site, ProcR_AV_Diam, ProcL_AV_Site, ProcL_AV_Diam, ProcR_DopplerStatus, ProcR_DopplerVA, ProcL_DopplerStatus, ProcL_DopplerVA, ProcL_NVB_DissectionType, ProcL_NVB_Status, ProcL_NVB_Graft, ProcL_NVB_Donor, ProcL_NVB_Quality, ProcR_NVB_DissectionType, ProcR_NVB_Status, ProcR_NVB_Graft, ProcR_NVB_Donor, ProcR_NVB_Quality, ProcAnastQuality, ProcAnastNumSutures, ProcAnastSuturePattern, ProcAnastSutureNotes, ProcAnastWatertight, ProcBN_Diam, ProcBN_DegreeEversion, ProcSuspVeinComplex, ProcL_Drain, ProcR_Drain, ProcAnteriorDrain, ProcPosteriorDrain, ProcCathTraction, ProcCathTractionDuration, ProcSV_DissectFirst, ProcPeriprostaticVeins, ProcBladderNeckPreservation, ProcUrethralStumpScore, ProcPelvisAccessibility, ProcSkinIncisionLength, ProcFascialIncisionLength, ProcMedianLobe, ProcUrachalSparing, ProcNumSize5Ports, ProcNumSize8Ports, ProcNumSize10Ports, ProcNumSize12Ports, ProcMethodOfEntry, ProcSkinClosure, ProcFascialClosureMethod, ProcClosureMaterialsUsed, ProcSV_Excision, ProcL_SV_Excision, ProcR_SV_Excision, ProcHypogastric, ProcPneumoperPressure, ProcFoleyPlacement, ProcBladderNeckReconstruction, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT ProcedureId, ProcStageSystem, ProcStageT, ProcBulldogClamps, ProcBladderClosure, ProcAccessVessels, ProcAV_Preserved, ProcPuboprostatics, ProcR_AV_Site, ProcR_AV_Diam, ProcL_AV_Site, ProcL_AV_Diam, ProcR_DopplerStatus, ProcR_DopplerVA, ProcL_DopplerStatus, ProcL_DopplerVA, ProcL_NVB_DissectionType, ProcL_NVB_Status, ProcL_NVB_Graft, ProcL_NVB_Donor, ProcL_NVB_Quality, ProcR_NVB_DissectionType, ProcR_NVB_Status, ProcR_NVB_Graft, ProcR_NVB_Donor, ProcR_NVB_Quality, ProcAnastQuality, ProcAnastNumSutures, ProcAnastSuturePattern, ProcAnastSutureNotes, ProcAnastWatertight, ProcBN_Diam, ProcBN_DegreeEversion, ProcSuspVeinComplex, ProcL_Drain, ProcR_Drain, ProcAnteriorDrain, ProcPosteriorDrain, ProcCathTraction, ProcCathTractionDuration, ProcSV_DissectFirst, ProcPeriprostaticVeins, ProcBladderNeckPreservation, ProcUrethralStumpScore, ProcPelvisAccessibility, ProcSkinIncisionLength, ProcFascialIncisionLength, ProcMedianLobe, ProcUrachalSparing, ProcNumSize5Ports, ProcNumSize8Ports, ProcNumSize10Ports, ProcNumSize12Ports, ProcMethodOfEntry, ProcSkinClosure, ProcFascialClosureMethod, ProcClosureMaterialsUsed, ProcSV_Excision, ProcL_SV_Excision, ProcR_SV_Excision, ProcHypogastric, ProcPneumoperPressure, ProcFoleyPlacement, ProcBladderNeckReconstruction, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.ProstatectomyProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.ProstatectomyProc
GO
EXECUTE sp_rename N'dbo.Tmp_ProstatectomyProc', N'ProstatectomyProc', 'OBJECT' 
GO
ALTER TABLE dbo.ProstatectomyProc ADD CONSTRAINT
	PK_ProstatectomyProc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.ProstatectomyProc WITH NOCHECK ADD CONSTRAINT
	FK_ProstatectomyProc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditProstatectomyProc_UD
ON dbo.ProstatectomyProc FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_ProstatectomyProc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_ProstatectomyProc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO

--09ModifyspGetPatientHPIKidney.sql
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[spGetPatientHPIKidney]
   @PatientId int = NULL,
   @Rowcount int = NULL OUTPUT
AS
SET NOCOUNT ON
--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

/*
SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'

DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate     datetime NULL,
   VarString    varchar(255) NULL
   )
*/
DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarSummary
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarSummary   varchar(1000) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   TableName    varchar(50) NULL,
   PrimaryKey   int NOT NULL,
   ExtraInfo    varchar(500) NULL,
   VarStopDate  varchar(50) NULL
   )

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT MedTxDateText, 'Systemic Therapy: ' + MedTxType + ':', LTRIM(ISNULL(MedTxAgent,'')), MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId
FROM MedicalTherapy
WHERE MedicalTherapy.PatientId = @PatientId AND
      MedTxType IN('Chemo','Immuno','Bio_Tx')

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT MedTxDateText, MedTxType , LTRIM(ISNULL(': ' + MedTxAgent,'')), MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId
FROM MedicalTherapy
WHERE MedicalTherapy.PatientId = @PatientId AND
      MedTxType NOT IN('Chemo','Immuno','Bio_Tx')

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT RadTxDateText, 'Radiation Therapy: ' + ISNULL(RadTxType,'') + ':' , ISNULL(RadTxTarget,''), RadTxQuality, RadTxDate,RadTxStopDateText, 'RadiationTherapy', RadiationTherapyId
FROM RadiationTherapy
WHERE (RadiationTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT TOP 1 StatusDateText, '', Status  + ISNULL(': ' + StatusNotes,''), StatusQuality, StatusDate, 'Status', StatusId
FROM Status
WHERE Status.PatientId = @PatientId AND Status = 'Distant Metastasis'
ORDER BY StatusDate ASC 

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT TOP 1 StatusDateText, '', Status  + ISNULL(': ' + StatusNotes,''), StatusQuality, StatusDate, 'Status', StatusId
FROM Status
WHERE Status.PatientId = @PatientId AND Status = 'Local Recurrence'
ORDER BY StatusDate ASC 

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT TOP 1 StatusDateText, '', Status  + ISNULL(': ' + StatusNotes,''), StatusQuality, StatusDate, 'Status', StatusId
FROM Status
WHERE Status.PatientId = @PatientId AND 
      StatusDisease In('Renal Cell Carcinoma','Kidney','Kidney Cancer','Renal Cancer','Renal Pelvis Cancer')  AND
      StatusId NOT IN (SELECT PrimaryKey FROM @ChronoTable WHERE TableName='Status')
ORDER BY StatusDate DESC 

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,ExtraInfo)
SELECT OpDateText, '' VarName, ISNULL(OpCaseSurgeon + ' ','') + LTRIM(ISNULL(ProcSide + ' ','') 
       + ISNULL(ProcName,'Nephrectomy, unspecified')  + ISNULL(', Intra-Op Complications = ' + ProcComplication,'') 
       + ISNULL(', Histology = ' + PathHistology,'') + ISNULL(', Histology2 = ' + PathHistology2,'') 
       + ISNULL(', Tumor Size = ' + PathCancerMaxDim + ' cm','') + ISNULL(', TNM-Stage = ' + PathStageT,'') 
       + ISNULL(', ' + PathStageM,'') + + ISNULL(' (' + PathStageSystem + ')','')  
       ) VarSummary, OpQuality, OpDate, 'Procedures' TableName, Procedures.ProcedureId PrimaryKey,
       CASE WHEN (NephrectomyProc.ProcedureId IS NOT NULL OR Pathology.PathologyId IS NOT NULL )  
            THEN 'ProcNephrectomyDetails' 
            ELSE 'ProcNephrectomyNoDetails' 
       END ExtraInfo --The marks dupes
FROM OperatingRoomDetails INNER JOIN Procedures ON OperatingRoomDetails.OperatingRoomDetailId = Procedures.OperatingRoomDetailId
                          LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                          LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId AND
                                                                 PathologyStageGradeId = (SELECT TOP 1 PathologyStageGradeId 
                                                                                          FROM PathologyStageGrade
                                                                                          WHERE PathologyId = Pathology.PathologyId)
                          LEFT OUTER JOIN NephrectomyPath ON Pathology.PathologyId = NephrectomyPath.PathologyId
                          LEFT OUTER JOIN NephrectomyProc ON Procedures.ProcedureId = NephrectomyProc.ProcedureId
WHERE Procedures.PatientId = @PatientId AND 
      ProcName IN('Nephrectomy','Partial Nephrectomy','Laparoscopic Nephroureterectomy','Partial for Horshoe Kidney','Laparoscopic Partial Nephrectomy','Nephroureterectomy','Laparoscopic Radical Nephrectomy','Radical Nephrectomy','Exploratory Laparotomy', 'Robotic Partial Nephrectomy', 'Robotic Radical Nephrectomy') 

/*
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,ISNULL(ProcName + ',',''), ISNULL('Result = ' + PathResult,'') + ISNULL(', Histology = ' + PathHistology,'') + ISNULL(', Histology2 = ' + PathHistology2,''), PathQuality, ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
WHERE (Procedures.PatientId = @PatientId) AND 
      ProcName IN('RLND','Thoracotomy','Lobectomy','Craniotomy','Adrenalectomy','Vertebral Body Resection','Hepatic Resection','Distal Pancreatectomy','Lobectomy','Wedge Resection','Bronchoscopy','Bone Resection','Renal Bed Resection','RPLND')
*/

--procedures not in the current list
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, 
       CASE WHEN ProcName LIKE '%Biopsy%' THEN ISNULL(ProcSite + ' ','') ELSE '' END
       + ISNULL(ProcApproach + ' ','') +  LTRIM(ISNULL(RIGHT(PathStageSystem,2),'') + ' '  + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ISNULL(PathStageM,'') + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathResult,'')), ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN 
                (SELECT PrimaryKey,VarName FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT VarDate,VarName, ISNULL(VarExtraInfo,'') + ISNULL(' ' + VarValue,''),Quality,SortDate,
       (SELECT TOP 1 PtProtocolStatusDateText
        FROM PatientProtocolStatus 
        WHERE PatientProtocolId = PatProtId AND PtProtocolStatus = 'Off Study') VarStopDate,
       TableName,PrimaryKey
FROM 
   (
   SELECT dbo.fnGetPtProtocolStatusDate(PatientProtocolId,'DateText') VarDate,'Protocol' VarName,
          ISNULL(dbo.fnGetPtProtocolStatusLast(PatientProtocolId),PtProtocolStatus) VarValue,PtProtocolQuality Quality,
          CAST(dbo.fnGetPtProtocolStatusDate(PatientProtocolId,'Date') AS datetime) SortDate,
          'PatientProtocols' TableName,PatientProtocolId PrimaryKey,
          ProtocolNum VarExtraInfo,
          PatientProtocolId PatProtId
   FROM PatientProtocols INNER JOIN Protocols ON PatientProtocols.ProtocolId = Protocols.ProtocolId
   WHERE (PatientId = @PatientId) 
   ) a LEFT OUTER JOIN 
   (
   SELECT c.LkpCode 
   FROM LookupCodeAttributes a INNER JOIN
        LookupAttributes b ON a.AttributeId=b.AttributeId INNER JOIN
        LookupCodes c ON a.LookupCodeId=c.LookupCodeId
   WHERE AttributeName = 'ProtocolScreening' AND
         AttributeValue = 'HPI'
   ) b ON a.VarValue LIKE ('%' + b.LkpCode + '%')
WHERE b.LkpCode IS NULL

--Clean up variables
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarSummary = ''
WHERE VarSummary IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL
UPDATE @ChronoTable 
   SET ExtraInfo = ''
WHERE ExtraInfo IS NULL

--Remove Dupe nephrectomy records
DELETE @ChronoTable FROM @ChronoTable a INNER JOIN 
                           (
                           SELECT SortDate FROM @ChronoTable
                           WHERE TableName='Procedures' AND ExtraInfo = 'ProcNephrectomyDetails'
                           ) b ON a.SortDate = b.SortDate
WHERE TableName='Procedures' AND ExtraInfo='ProcNephrectomyNoDetails' 

--More dupe procedures removed
SELECT PatientHPI 
FROM 
   (
   SELECT DISTINCT LTRIM(VarDate 
               + CASE WHEN VarStopDate IS NULL THEN ' ' ELSE ' - ' + VarStopDate + ' ' END 
               + CASE WHEN VarName<>'' THEN VarName + ' ' ELSE '' END 
               + VarSummary) AS PatientHPI,SortDate --,VarName,VarDate
   FROM @ChronoTable
   ) a
ORDER BY SortDate
SET @Rowcount = @@ROWCOUNT
GO

--10ModifyTablePatients.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_Patients
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PtMRN varchar(50) NULL,
	PatientId int NULL,
	PtTitle varchar(50) NULL,
	PtFirstName varchar(50) NULL,
	PtMiddleName varchar(50) NULL,
	PtLastName varchar(50) NULL,
	PtSuffix varchar(50) NULL,
	PtAlias varchar(50) NULL,
	PtMaidenName varchar(50) NULL,
	PtGender varchar(50) NULL,
	PtCompany varchar(50) NULL,
	PtBusinessCity varchar(50) NULL,
	PtBusinessState varchar(50) NULL,
	PtAddress1 varchar(100) NULL,
	PtAddress2 varchar(100) NULL,
	PtCity varchar(50) NULL,
	PtState varchar(50) NULL,
	PtPostalCode varchar(50) NULL,
	PtCountry varchar(50) NULL,
	PtEmail varchar(50) NULL,
	PtBirthDateText varchar(50) NULL,
	PtBirthDate datetime NULL,
	PtBirthPlace varchar(100) NULL,
	PtDeathDateText varchar(50) NULL,
	PtDeathDate datetime NULL,
	PtDeathType varchar(50) NULL,
	PtDeathCause varchar(255) NULL,
	PtContactPerson varchar(50) NULL,
	PtContactAddress1 varchar(100) NULL,
	PtContactAddress2 varchar(100) NULL,
	PtContactCity varchar(50) NULL,
	PtContactState varchar(50) NULL,
	PtContactPostalCode varchar(50) NULL,
	PtContactPhone varchar(50) NULL,
	PtSpouse varchar(50) NULL,
	PtRace varchar(50) NULL,
	PtEthnicity varchar(50) NULL,
	PtLanguage varchar(50) NULL,
	PtContactStatus varchar(50) NULL,
	PtContactPreference varchar(50) NULL,
	PtNotes varchar(1000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_Patients)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_Patients (LoggedOperation, LoggedBy, LoggedTime, PtMRN, PatientId, PtTitle, PtFirstName, PtMiddleName, PtLastName, PtSuffix, PtAlias, PtMaidenName, PtGender, PtCompany, PtBusinessCity, PtBusinessState, PtAddress1, PtAddress2, PtCity, PtState, PtPostalCode, PtCountry, PtEmail, PtBirthDateText, PtBirthDate, PtBirthPlace, PtDeathDateText, PtDeathDate, PtDeathType, PtDeathCause, PtContactPerson, PtContactAddress1, PtContactAddress2, PtContactCity, PtContactState, PtContactPostalCode, PtContactPhone, PtSpouse, PtRace, PtEthnicity, PtLanguage, PtContactStatus, PtNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PtMRN, PatientId, PtTitle, PtFirstName, PtMiddleName, PtLastName, PtSuffix, PtAlias, PtMaidenName, PtGender, PtCompany, PtBusinessCity, PtBusinessState, PtAddress1, PtAddress2, PtCity, PtState, PtPostalCode, PtCountry, PtEmail, PtBirthDateText, PtBirthDate, PtBirthPlace, PtDeathDateText, PtDeathDate, PtDeathType, PtDeathCause, PtContactPerson, PtContactAddress1, PtContactAddress2, PtContactCity, PtContactState, PtContactPostalCode, PtContactPhone, PtSpouse, PtRace, PtEthnicity, PtLanguage, PtContactStatus, PtNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_Patients WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_Patients
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_Patients', N'AuditLog_Patients', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Patients
	(
	PtMRN varchar(50) NULL,
	PatientId int NOT NULL IDENTITY (1, 1),
	PtTitle varchar(50) NULL,
	PtFirstName varchar(50) NULL,
	PtMiddleName varchar(50) NULL,
	PtLastName varchar(50) NULL,
	PtSuffix varchar(50) NULL,
	PtAlias varchar(50) NULL,
	PtMaidenName varchar(50) NULL,
	PtGender varchar(50) NULL,
	PtCompany varchar(50) NULL,
	PtBusinessCity varchar(50) NULL,
	PtBusinessState varchar(50) NULL,
	PtAddress1 varchar(100) NULL,
	PtAddress2 varchar(100) NULL,
	PtCity varchar(50) NULL,
	PtState varchar(50) NULL,
	PtPostalCode varchar(50) NULL,
	PtCountry varchar(50) NULL,
	PtEmail varchar(50) NULL,
	PtBirthDateText varchar(50) NULL,
	PtBirthDate datetime NULL,
	PtBirthPlace varchar(100) NULL,
	PtDeathDateText varchar(50) NULL,
	PtDeathDate datetime NULL,
	PtDeathType varchar(50) NULL,
	PtDeathCause varchar(255) NULL,
	PtContactPerson varchar(50) NULL,
	PtContactAddress1 varchar(100) NULL,
	PtContactAddress2 varchar(100) NULL,
	PtContactCity varchar(50) NULL,
	PtContactState varchar(50) NULL,
	PtContactPostalCode varchar(50) NULL,
	PtContactPhone varchar(50) NULL,
	PtSpouse varchar(50) NULL,
	PtRace varchar(50) NULL,
	PtEthnicity varchar(50) NULL,
	PtLanguage varchar(50) NULL,
	PtContactStatus varchar(50) NULL,
	PtContactPreference varchar(50) NULL,
	PtNotes varchar(1000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
SET IDENTITY_INSERT dbo.Tmp_Patients ON
GO
IF EXISTS(SELECT * FROM dbo.Patients)
	 EXEC('INSERT INTO dbo.Tmp_Patients (PtMRN, PatientId, PtTitle, PtFirstName, PtMiddleName, PtLastName, PtSuffix, PtAlias, PtMaidenName, PtGender, PtCompany, PtBusinessCity, PtBusinessState, PtAddress1, PtAddress2, PtCity, PtState, PtPostalCode, PtCountry, PtEmail, PtBirthDateText, PtBirthDate, PtBirthPlace, PtDeathDateText, PtDeathDate, PtDeathType, PtDeathCause, PtContactPerson, PtContactAddress1, PtContactAddress2, PtContactCity, PtContactState, PtContactPostalCode, PtContactPhone, PtSpouse, PtRace, PtEthnicity, PtLanguage, PtContactStatus, PtNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PtMRN, PatientId, PtTitle, PtFirstName, PtMiddleName, PtLastName, PtSuffix, PtAlias, PtMaidenName, PtGender, PtCompany, PtBusinessCity, PtBusinessState, PtAddress1, PtAddress2, PtCity, PtState, PtPostalCode, PtCountry, PtEmail, PtBirthDateText, PtBirthDate, PtBirthPlace, PtDeathDateText, PtDeathDate, PtDeathType, PtDeathCause, PtContactPerson, PtContactAddress1, PtContactAddress2, PtContactCity, PtContactState, PtContactPostalCode, PtContactPhone, PtSpouse, PtRace, PtEthnicity, PtLanguage, PtContactStatus, PtNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.Patients WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Patients OFF
GO
ALTER TABLE dbo.Encounters
	DROP CONSTRAINT FK_Encounters_Patients
GO
ALTER TABLE dbo.FamilyMembers
	DROP CONSTRAINT FK_FamilyMembers_Patients
GO
ALTER TABLE dbo.BrachyTherapy
	DROP CONSTRAINT FK_BrachyTherapy_Patients
GO
ALTER TABLE dbo.PatientPhysicians
	DROP CONSTRAINT FK_PatientPhysicians_Patients
GO
ALTER TABLE dbo.AbsentEvents
	DROP CONSTRAINT FK_AbsentEvents_Patients
GO
ALTER TABLE dbo.PatientProblems
	DROP CONSTRAINT FK_PatientProblems_Patients
GO
ALTER TABLE dbo.Comorbidities
	DROP CONSTRAINT FK_Comorbidities_Patients
GO
ALTER TABLE dbo.DietaryIntake
	DROP CONSTRAINT FK_DietaryIntake_Patients
GO
ALTER TABLE dbo.PatientConsent
	DROP CONSTRAINT FK_PatientConsent_Patients
GO
ALTER TABLE dbo.Status
	DROP CONSTRAINT FK_Status_Patients
GO
ALTER TABLE dbo.EForms
	DROP CONSTRAINT FK_EForms_Patients
GO
ALTER TABLE dbo.PatientProtocols
	DROP CONSTRAINT FK_PatientProtocols_Patients
GO
ALTER TABLE dbo.Toxicities
	DROP CONSTRAINT FK_Toxicities_Patients
GO
ALTER TABLE dbo.ProtocolMgr_PatientSchemas
	DROP CONSTRAINT FK_ProtocolMgr_PatientSchemas_Patients
GO
ALTER TABLE dbo.Allergies
	DROP CONSTRAINT FK_Allergies_Patients
GO
ALTER TABLE dbo.Categories
	DROP CONSTRAINT FK_Categories_Patients
GO
ALTER TABLE dbo.Identifiers
	DROP CONSTRAINT FK_Identifiers_Patients
GO
ALTER TABLE dbo.Narratives
	DROP CONSTRAINT FK_Narratives_Patients
GO
ALTER TABLE dbo.Actions
	DROP CONSTRAINT FK_Actions_Patients
GO
ALTER TABLE dbo.Surveys
	DROP CONSTRAINT FK_Surveys_Patients
GO
ALTER TABLE dbo.PatientPhoneNumbers
	DROP CONSTRAINT FK_PatientPhoneNumbers_Patients
GO
ALTER TABLE dbo.SocialHistories
	DROP CONSTRAINT FK_SocialHistories_Patients
GO
ALTER TABLE dbo.Procedures
	DROP CONSTRAINT FK_Procedures_Patients
GO
ALTER TABLE dbo.OperatingRoomDetails
	DROP CONSTRAINT FK_OperatingRoomDetails_Patients
GO
ALTER TABLE dbo.ClinicalStages
	DROP CONSTRAINT FK_ClinicalStages_Patients
GO
ALTER TABLE dbo.QOL_Therapy
	DROP CONSTRAINT FK_QOL_Therapy_Patients
GO
ALTER TABLE dbo.Medications
	DROP CONSTRAINT FK_Medications_Patients
GO
ALTER TABLE dbo.LabTests
	DROP CONSTRAINT FK_LabTests_Patients
GO
ALTER TABLE dbo.Pathology
	DROP CONSTRAINT FK_Pathology_Patients
GO
ALTER TABLE dbo.Hospitalizations
	DROP CONSTRAINT FK_Hospitalizations_Patients
GO
ALTER TABLE dbo.MedicalTherapy
	DROP CONSTRAINT FK_MedicalTherapy_Patients
GO
ALTER TABLE dbo.RadiationTherapy
	DROP CONSTRAINT FK_RadiationTherapy_Patients
GO
ALTER TABLE dbo.Diagnostics
	DROP CONSTRAINT FK_Diagnostics_Patients
GO
ALTER TABLE dbo.PatientDiseases
	DROP CONSTRAINT FK_PatientDiseases_Patients
GO
ALTER TABLE dbo.PatientInstitutions
	DROP CONSTRAINT FK_PatientInstitutions_Patients
GO
DROP TABLE dbo.Patients
GO
EXECUTE sp_rename N'dbo.Tmp_Patients', N'Patients', 'OBJECT' 
GO
ALTER TABLE dbo.Patients ADD CONSTRAINT
	PK_Patients PRIMARY KEY CLUSTERED 
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_Patients_PtMRN ON dbo.Patients
	(
	PtMRN
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX I_Patients_PtLastName ON dbo.Patients
	(
	PtLastName
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE TRIGGER dbo.trgAuditPatients_UD
ON dbo.Patients FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_Patients
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.PatientId = Inserted.PatientId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_Patients
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditPatients_UD', N'last', N'update'
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PatientInstitutions ADD CONSTRAINT
	FK_PatientInstitutions_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PatientDiseases WITH NOCHECK ADD CONSTRAINT
	FK_PatientDiseases_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Diagnostics WITH NOCHECK ADD CONSTRAINT
	FK_Diagnostics_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.RadiationTherapy WITH NOCHECK ADD CONSTRAINT
	FK_RadiationTherapy_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.MedicalTherapy WITH NOCHECK ADD CONSTRAINT
	FK_MedicalTherapy_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Hospitalizations ADD CONSTRAINT
	FK_Hospitalizations_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Pathology WITH NOCHECK ADD CONSTRAINT
	FK_Pathology_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.LabTests WITH NOCHECK ADD CONSTRAINT
	FK_LabTests_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Medications WITH NOCHECK ADD CONSTRAINT
	FK_Medications_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.QOL_Therapy WITH NOCHECK ADD CONSTRAINT
	FK_QOL_Therapy_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ClinicalStages WITH NOCHECK ADD CONSTRAINT
	FK_ClinicalStages_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.OperatingRoomDetails WITH NOCHECK ADD CONSTRAINT
	FK_OperatingRoomDetails_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Procedures WITH NOCHECK ADD CONSTRAINT
	FK_Procedures_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SocialHistories WITH NOCHECK ADD CONSTRAINT
	FK_SocialHistories_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PatientPhoneNumbers WITH NOCHECK ADD CONSTRAINT
	FK_PatientPhoneNumbers_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Surveys WITH NOCHECK ADD CONSTRAINT
	FK_Surveys_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Actions WITH NOCHECK ADD CONSTRAINT
	FK_Actions_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Narratives WITH NOCHECK ADD CONSTRAINT
	FK_Narratives_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Identifiers WITH NOCHECK ADD CONSTRAINT
	FK_Identifiers_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Categories WITH NOCHECK ADD CONSTRAINT
	FK_Categories_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Allergies WITH NOCHECK ADD CONSTRAINT
	FK_Allergies_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProtocolMgr_PatientSchemas ADD CONSTRAINT
	FK_ProtocolMgr_PatientSchemas_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Toxicities WITH NOCHECK ADD CONSTRAINT
	FK_Toxicities_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PatientProtocols WITH NOCHECK ADD CONSTRAINT
	FK_PatientProtocols_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.EForms WITH NOCHECK ADD CONSTRAINT
	FK_EForms_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Status WITH NOCHECK ADD CONSTRAINT
	FK_Status_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PatientConsent WITH NOCHECK ADD CONSTRAINT
	FK_PatientConsent_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DietaryIntake WITH NOCHECK ADD CONSTRAINT
	FK_DietaryIntake_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Comorbidities WITH NOCHECK ADD CONSTRAINT
	FK_Comorbidities_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PatientProblems WITH NOCHECK ADD CONSTRAINT
	FK_PatientProblems_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.AbsentEvents ADD CONSTRAINT
	FK_AbsentEvents_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PatientPhysicians WITH NOCHECK ADD CONSTRAINT
	FK_PatientPhysicians_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.BrachyTherapy WITH NOCHECK ADD CONSTRAINT
	FK_BrachyTherapy_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.FamilyMembers WITH NOCHECK ADD CONSTRAINT
	FK_FamilyMembers_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Encounters WITH NOCHECK ADD CONSTRAINT
	FK_Encounters_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
GO

--11ModifyTablePathologyFinding.sql
GO
--resize column
ALTER TABLE AuditLog_PathologyFinding ALTER COLUMN PathFindResult varchar(255)
ALTER TABLE PathologyFinding ALTER COLUMN PathFindResult varchar(255)
GO

--12ModifyTableSpecimenEvents.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_SpecimenEvents
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	SpecimenId int NULL,
	ContactId int NULL,
	SpecimenEventId int NULL,
	EventPending bit NULL,
	EventDateText varchar(50) NULL,
	EventDate datetime NULL,
	EventTime varchar(10) NULL,
	EventType varchar(255) NULL,
	EventSubType varchar(255) NULL,
	EventAnalyte varchar(50) NULL,
	EventExtReference varchar(255) NULL,
	EventResult varchar(255) NULL,
	QuantityUsed varchar(50) NULL,
	QuantityUnits varchar(50) NULL,
	ProcessedBy varchar(50) NULL,
	ResultsReceivedDate datetime NULL,
	ResultsReceivedDateText varchar(50) NULL,
	EventNotes varchar(4000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_SpecimenEvents)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_SpecimenEvents (LoggedOperation, LoggedBy, LoggedTime, SpecimenId, ContactId, SpecimenEventId, EventPending, EventDateText, EventDate, EventTime, EventType, EventSubType, EventAnalyte, EventExtReference, EventResult, QuantityUsed, QuantityUnits, ProcessedBy, EventNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, SpecimenId, ContactId, SpecimenEventId, EventPending, EventDateText, EventDate, EventTime, EventType, EventSubType, EventAnalyte, EventExtReference, EventResult, QuantityUsed, QuantityUnits, ProcessedBy, EventNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_SpecimenEvents WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_SpecimenEvents
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_SpecimenEvents', N'AuditLog_SpecimenEvents', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SpecimenEvents
	DROP CONSTRAINT FK_SpecimenEvents_Specimens
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SpecimenEvents
	DROP CONSTRAINT DF_SpecimenEvents_EventPending
GO
CREATE TABLE dbo.Tmp_SpecimenEvents
	(
	SpecimenId int NOT NULL,
	ContactId int NULL,
	SpecimenEventId int NOT NULL IDENTITY (1, 1),
	EventPending bit NULL,
	EventDateText varchar(50) NULL,
	EventDate datetime NULL,
	EventTime varchar(10) NULL,
	EventType varchar(255) NULL,
	EventSubType varchar(255) NULL,
	EventAnalyte varchar(50) NULL,
	EventExtReference varchar(255) NULL,
	EventResult varchar(255) NULL,
	QuantityUsed varchar(50) NULL,
	QuantityUnits varchar(50) NULL,
	ProcessedBy varchar(50) NULL,
	ResultsReceivedDate datetime NULL,
	ResultsReceivedDateText varchar(50) NULL,
	EventNotes varchar(4000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_SpecimenEvents ADD CONSTRAINT
	DF_SpecimenEvents_EventPending DEFAULT ((0)) FOR EventPending
GO
SET IDENTITY_INSERT dbo.Tmp_SpecimenEvents ON
GO
IF EXISTS(SELECT * FROM dbo.SpecimenEvents)
	 EXEC('INSERT INTO dbo.Tmp_SpecimenEvents (SpecimenId, ContactId, SpecimenEventId, EventPending, EventDateText, EventDate, EventTime, EventType, EventSubType, EventAnalyte, EventExtReference, EventResult, QuantityUsed, QuantityUnits, ProcessedBy, EventNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT SpecimenId, ContactId, SpecimenEventId, EventPending, EventDateText, EventDate, EventTime, EventType, EventSubType, EventAnalyte, EventExtReference, EventResult, QuantityUsed, QuantityUnits, ProcessedBy, EventNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.SpecimenEvents WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_SpecimenEvents OFF
GO
DROP TABLE dbo.SpecimenEvents
GO
EXECUTE sp_rename N'dbo.Tmp_SpecimenEvents', N'SpecimenEvents', 'OBJECT' 
GO
ALTER TABLE dbo.SpecimenEvents ADD CONSTRAINT
	PK_SpecimenEvent PRIMARY KEY CLUSTERED 
	(
	SpecimenEventId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_SpecimenEvent_SpecimenId ON dbo.SpecimenEvents
	(
	SpecimenId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX I_SpecimenEvent_ContactId ON dbo.SpecimenEvents
	(
	ContactId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.SpecimenEvents ADD CONSTRAINT
	FK_SpecimenEvents_Specimens FOREIGN KEY
	(
	SpecimenId
	) REFERENCES dbo.Specimens
	(
	SpecimenId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER [dbo].[trgAuditSpecimenEvents_UD]
ON dbo.SpecimenEvents FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_SpecimenEvents
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.SpecimenEventId = Inserted.SpecimenEventId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_SpecimenEvents
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditSpecimenEvents_UD', N'last', N'update'
GO
COMMIT
GO

--13ModifyTableSpecimens.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_Specimens
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	SpecimenId int NULL,
	ParentSpecimenId int NULL,
	SpecimenAccessionId int NULL,
	ContactId int NULL,
	SpecimenType varchar(50) NULL,
	SpecimenSubType varchar(50) NULL,
	SpecimenStatus varchar(100) NULL,
	SpecimenPreservationType varchar(100) NULL,
	SpecimenReferenceNumber varchar(50) NULL,
	SpecimenOriginalQty varchar(50) NULL,
	SpecimenUnits varchar(50) NULL,
	SpecimenRemainingQty varchar(50) NULL,
	BoxId int NULL,
	PositionId int NULL,
	SpecimenNotes varchar(1000) NULL,
	SpecimenNumFreezeThaw varchar(50) NULL,
	SpecimenTimeToStorage varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_Specimens)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_Specimens (LoggedOperation, LoggedBy, LoggedTime, SpecimenId, ParentSpecimenId, SpecimenAccessionId, ContactId, SpecimenType, SpecimenSubType, SpecimenStatus, SpecimenPreservationType, SpecimenReferenceNumber, SpecimenOriginalQty, SpecimenUnits, SpecimenRemainingQty, BoxId, PositionId, SpecimenNotes, SpecimenNumFreezeThaw, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, SpecimenId, ParentSpecimenId, SpecimenAccessionId, ContactId, SpecimenType, SpecimenSubType, SpecimenStatus, SpecimenPreservationType, SpecimenReferenceNumber, SpecimenOriginalQty, SpecimenUnits, SpecimenRemainingQty, BoxId, PositionId, SpecimenNotes, SpecimenNumFreezeThaw, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_Specimens WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_Specimens
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_Specimens', N'AuditLog_Specimens', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Specimens
	DROP CONSTRAINT FK_Specimens_SpecimenAccessions
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Specimens
	(
	SpecimenId int NOT NULL IDENTITY (1, 1),
	ParentSpecimenId int NULL,
	SpecimenAccessionId int NOT NULL,
	ContactId int NULL,
	SpecimenType varchar(50) NULL,
	SpecimenSubType varchar(50) NULL,
	SpecimenStatus varchar(100) NULL,
	SpecimenPreservationType varchar(100) NULL,
	SpecimenReferenceNumber varchar(50) NULL,
	SpecimenOriginalQty varchar(50) NULL,
	SpecimenUnits varchar(50) NULL,
	SpecimenRemainingQty varchar(50) NULL,
	BoxId int NULL,
	PositionId int NULL,
	SpecimenNotes varchar(1000) NULL,
	SpecimenNumFreezeThaw varchar(50) NULL,
	SpecimenTimeToStorage varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
SET IDENTITY_INSERT dbo.Tmp_Specimens ON
GO
IF EXISTS(SELECT * FROM dbo.Specimens)
	 EXEC('INSERT INTO dbo.Tmp_Specimens (SpecimenId, ParentSpecimenId, SpecimenAccessionId, ContactId, SpecimenType, SpecimenSubType, SpecimenStatus, SpecimenPreservationType, SpecimenReferenceNumber, SpecimenOriginalQty, SpecimenUnits, SpecimenRemainingQty, BoxId, PositionId, SpecimenNotes, SpecimenNumFreezeThaw, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT SpecimenId, ParentSpecimenId, SpecimenAccessionId, ContactId, SpecimenType, SpecimenSubType, SpecimenStatus, SpecimenPreservationType, SpecimenReferenceNumber, SpecimenOriginalQty, SpecimenUnits, SpecimenRemainingQty, BoxId, PositionId, SpecimenNotes, SpecimenNumFreezeThaw, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.Specimens WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Specimens OFF
GO
ALTER TABLE dbo.SpecimenEvents
	DROP CONSTRAINT FK_SpecimenEvents_Specimens
GO
ALTER TABLE dbo.Specimen_SpecimenCollections
	DROP CONSTRAINT FK_Specimen_SpecimenCollections_Specimens
GO
DROP TABLE dbo.Specimens
GO
EXECUTE sp_rename N'dbo.Tmp_Specimens', N'Specimens', 'OBJECT' 
GO
ALTER TABLE dbo.Specimens ADD CONSTRAINT
	PK_Specimens PRIMARY KEY CLUSTERED 
	(
	SpecimenId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_Specimens_SpecimenAccessionId ON dbo.Specimens
	(
	SpecimenAccessionId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.Specimens WITH NOCHECK ADD CONSTRAINT
	FK_Specimens_SpecimenAccessions FOREIGN KEY
	(
	SpecimenAccessionId
	) REFERENCES dbo.SpecimenAccessions
	(
	SpecimenAccessionId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
CREATE TRIGGER [dbo].[trgAuditSpecimens_UD]
ON dbo.Specimens FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_Specimens
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.SpecimenId = Inserted.SpecimenId
ELSE IF @action = 'DELETE'
   BEGIN
	   INSERT INTO AuditLog_Specimens
	   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
	   FROM Deleted

	   DELETE SpecimenPositions FROM SpecimenPositions INNER JOIN Deleted ON 
							   SpecimenPositions.PositionId=Deleted.PositionId
   END
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Specimen_SpecimenCollections ADD CONSTRAINT
	FK_Specimen_SpecimenCollections_Specimens FOREIGN KEY
	(
	SpecimenId
	) REFERENCES dbo.Specimens
	(
	SpecimenId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SpecimenEvents ADD CONSTRAINT
	FK_SpecimenEvents_Specimens FOREIGN KEY
	(
	SpecimenId
	) REFERENCES dbo.Specimens
	(
	SpecimenId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
GO

--14ModifyTablePatientProtocolRegistration.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PatientProtocolRegistration
	DROP CONSTRAINT FK_PatientProtocolRegistration_PatientProtocols
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_PatientProtocolRegistration
	(
	PatientProtocolId int NOT NULL,
	PatientProtocolRegistrationId int NOT NULL IDENTITY (1, 1),
	ConsentedBy varchar(50) NULL,
	ConsentedTo varchar(1000) NULL,
	RegisteredBy varchar(50) NULL,
	PhysicianOfRecord varchar(50) NULL,
	ResearchAuthorizationSigned varchar(50) NULL,
	PrivacyPracticeNoticeVerified varchar(50) NULL,
	PtRegistrationAge varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
SET IDENTITY_INSERT dbo.Tmp_PatientProtocolRegistration ON
GO
IF EXISTS(SELECT * FROM dbo.PatientProtocolRegistration)
	 EXEC('INSERT INTO dbo.Tmp_PatientProtocolRegistration (PatientProtocolId, PatientProtocolRegistrationId, ConsentedBy, ConsentedTo, RegisteredBy, PhysicianOfRecord, ResearchAuthorizationSigned, PrivacyPracticeNoticeVerified, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT PatientProtocolId, PatientProtocolRegistrationId, ConsentedBy, ConsentedTo, RegisteredBy, PhysicianOfRecord, ResearchAuthorizationSigned, PrivacyPracticeNoticeVerified, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.PatientProtocolRegistration WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_PatientProtocolRegistration OFF
GO
ALTER TABLE dbo.PatientProtocolRegQuestionnaires
	DROP CONSTRAINT FK_PatientProtocolRegQuestionnaires_PatientProtocolRegistration
GO
DROP TABLE dbo.PatientProtocolRegistration
GO
EXECUTE sp_rename N'dbo.Tmp_PatientProtocolRegistration', N'PatientProtocolRegistration', 'OBJECT' 
GO
ALTER TABLE dbo.PatientProtocolRegistration ADD CONSTRAINT
	PK_PatientProtocolRegistration PRIMARY KEY CLUSTERED 
	(
	PatientProtocolRegistrationId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_PatientProtocolRegistration_PatientProtocolId ON dbo.PatientProtocolRegistration
	(
	PatientProtocolId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.PatientProtocolRegistration ADD CONSTRAINT
	FK_PatientProtocolRegistration_PatientProtocols FOREIGN KEY
	(
	PatientProtocolId
	) REFERENCES dbo.PatientProtocols
	(
	PatientProtocolId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PatientProtocolRegQuestionnaires ADD CONSTRAINT
	FK_PatientProtocolRegQuestionnaires_PatientProtocolRegistration FOREIGN KEY
	(
	PatientProtocolRegistrationId
	) REFERENCES dbo.PatientProtocolRegistration
	(
	PatientProtocolRegistrationId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
GO

--15ModifyTableDxImageFindingsProstate.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_DxImageFindingsProstate
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	DiagnosticId int NULL,
	DxImageFindingProstateId int NULL,
	ImgFindSide varchar(50) NULL,
	ImgFindLevel varchar(50) NULL,
	ImgFindAP varchar(50) NULL,
	ImgFindZone varchar(50) NULL,
	ImgFindHeight varchar(50) NULL,
	ImgFindWidth varchar(50) NULL,
	ImgFindLength varchar(50) NULL,
	ImgFindResult varchar(50) NULL,
	ImgFindExtension varchar(50) NULL,
	ImgFindLaterality varchar(50) NULL,
	ImgNotes varchar(1000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_DxImageFindingsProstate)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_DxImageFindingsProstate (LoggedOperation, LoggedBy, LoggedTime, DiagnosticId, DxImageFindingProstateId, ImgFindSide, ImgFindLevel, ImgFindAP, ImgFindZone, ImgFindHeight, ImgFindWidth, ImgFindLength, ImgFindResult, ImgFindExtension, ImgNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, DiagnosticId, DxImageFindingProstateId, ImgFindSide, ImgFindLevel, ImgFindAP, ImgFindZone, ImgFindHeight, ImgFindWidth, ImgFindLength, ImgFindResult, ImgFindExtension, ImgNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_DxImageFindingsProstate WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_DxImageFindingsProstate
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_DxImageFindingsProstate', N'AuditLog_DxImageFindingsProstate', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageFindingsProstate
	DROP CONSTRAINT FK_DxImageFindingsProstate_Diagnostics
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_DxImageFindingsProstate
	(
	DiagnosticId int NOT NULL,
	DxImageFindingProstateId int NOT NULL IDENTITY (1, 1),
	ImgFindSide varchar(50) NULL,
	ImgFindLevel varchar(50) NULL,
	ImgFindAP varchar(50) NULL,
	ImgFindZone varchar(50) NULL,
	ImgFindHeight varchar(50) NULL,
	ImgFindWidth varchar(50) NULL,
	ImgFindLength varchar(50) NULL,
	ImgFindResult varchar(50) NULL,
	ImgFindExtension varchar(50) NULL,
	ImgFindLaterality varchar(50) NULL,
	ImgNotes varchar(1000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
SET IDENTITY_INSERT dbo.Tmp_DxImageFindingsProstate ON
GO
IF EXISTS(SELECT * FROM dbo.DxImageFindingsProstate)
	 EXEC('INSERT INTO dbo.Tmp_DxImageFindingsProstate (DiagnosticId, DxImageFindingProstateId, ImgFindSide, ImgFindLevel, ImgFindAP, ImgFindZone, ImgFindHeight, ImgFindWidth, ImgFindLength, ImgFindResult, ImgFindExtension, ImgNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT DiagnosticId, DxImageFindingProstateId, ImgFindSide, ImgFindLevel, ImgFindAP, ImgFindZone, ImgFindHeight, ImgFindWidth, ImgFindLength, ImgFindResult, ImgFindExtension, ImgNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.DxImageFindingsProstate WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_DxImageFindingsProstate OFF
GO
DROP TABLE dbo.DxImageFindingsProstate
GO
EXECUTE sp_rename N'dbo.Tmp_DxImageFindingsProstate', N'DxImageFindingsProstate', 'OBJECT' 
GO
ALTER TABLE dbo.DxImageFindingsProstate ADD CONSTRAINT
	PK_DxImageFindingsProstate PRIMARY KEY CLUSTERED 
	(
	DxImageFindingProstateId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_DxImageFindingsProstate_DiagnosticId ON dbo.DxImageFindingsProstate
	(
	DiagnosticId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.DxImageFindingsProstate WITH NOCHECK ADD CONSTRAINT
	FK_DxImageFindingsProstate_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditDxImageFindingsProstate_UD
ON dbo.DxImageFindingsProstate FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_DxImageFindingsProstate
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.DxImageFindingProstateId = Inserted.DxImageFindingProstateId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_DxImageFindingsProstate
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditDxImageFindingsProstate_UD', N'last', N'update'
GO
COMMIT
GO

--16ModifyTableNodePathFinding.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_NodePathFinding
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PathologyId int NULL,
	NodePathFindingId int NULL,
	PathFindSide varchar(50) NULL,
	PathFindSite varchar(255) NULL,
	PathFindMaxDim varchar(50) NULL,
	PathFindExtension varchar(50) NULL,
	PathFindPosNodes varchar(50) NULL,
	PathFindNumNodes varchar(50) NULL,
	PathFindHistology varchar(255) NULL,
	PathFindMetsFocusMaxDim varchar(50) NULL,
	PathFindNotes varchar(1000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_NodePathFinding)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_NodePathFinding (LoggedOperation, LoggedBy, LoggedTime, PathologyId, NodePathFindingId, PathFindSide, PathFindSite, PathFindMaxDim, PathFindExtension, PathFindPosNodes, PathFindNumNodes, PathFindHistology, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PathologyId, NodePathFindingId, PathFindSide, PathFindSite, PathFindMaxDim, PathFindExtension, PathFindPosNodes, PathFindNumNodes, PathFindHistology, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_NodePathFinding WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_NodePathFinding
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_NodePathFinding', N'AuditLog_NodePathFinding', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.NodePathFinding
	DROP CONSTRAINT FK_NodePathFinding_Pathology
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_NodePathFinding
	(
	PathologyId int NOT NULL,
	NodePathFindingId int NOT NULL IDENTITY (1, 1),
	PathFindSide varchar(50) NULL,
	PathFindSite varchar(255) NULL,
	PathFindMaxDim varchar(50) NULL,
	PathFindExtension varchar(50) NULL,
	PathFindPosNodes varchar(50) NULL,
	PathFindNumNodes varchar(50) NULL,
	PathFindHistology varchar(255) NULL,
	PathFindMetsFocusMaxDim varchar(50) NULL,
	PathFindNotes varchar(1000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
SET IDENTITY_INSERT dbo.Tmp_NodePathFinding ON
GO
IF EXISTS(SELECT * FROM dbo.NodePathFinding)
	 EXEC('INSERT INTO dbo.Tmp_NodePathFinding (PathologyId, NodePathFindingId, PathFindSide, PathFindSite, PathFindMaxDim, PathFindExtension, PathFindPosNodes, PathFindNumNodes, PathFindHistology, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT PathologyId, NodePathFindingId, PathFindSide, PathFindSite, PathFindMaxDim, PathFindExtension, PathFindPosNodes, PathFindNumNodes, PathFindHistology, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.NodePathFinding WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_NodePathFinding OFF
GO
DROP TABLE dbo.NodePathFinding
GO
EXECUTE sp_rename N'dbo.Tmp_NodePathFinding', N'NodePathFinding', 'OBJECT' 
GO
ALTER TABLE dbo.NodePathFinding ADD CONSTRAINT
	PK_NodePathFinding PRIMARY KEY CLUSTERED 
	(
	NodePathFindingId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.NodePathFinding WITH NOCHECK ADD CONSTRAINT
	FK_NodePathFinding_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditNodePathFinding_UD
ON dbo.NodePathFinding FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_NodePathFinding
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.NodePathFindingId = Inserted.NodePathFindingId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_NodePathFinding
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO

--17Modify_fnGetPtProtocolStatusLast.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER FUNCTION [dbo].[fnGetPtProtocolStatusLast]
(
@PatientProtocolId int=NULL
)
RETURNS varchar (50)
AS 
BEGIN 
   DECLARE @strReturn varchar(50)
   DECLARE @dteLastIneligible datetime
   DECLARE @dteLastEligible datetime

   SELECT TOP 1 @strReturn = PtProtocolStatus 
   FROM PatientProtocolStatus
   WHERE PatientProtocolId = @PatientProtocolId
   ORDER BY PtProtocolStatusDate DESC

   SELECT TOP 1 @dteLastIneligible = PtProtocolStatusDate
   FROM PatientProtocolStatus
   WHERE PatientProtocolId = @PatientProtocolId  AND 
         PtProtocolStatus='Ineligible'
   ORDER BY PtProtocolStatusDate DESC

   SELECT TOP 1 @dteLastEligible = PtProtocolStatusDate
   FROM PatientProtocolStatus
   WHERE PatientProtocolId = @PatientProtocolId  AND 
         PtProtocolStatus='Eligible'
   ORDER BY PtProtocolStatusDate DESC

   IF EXISTS(SELECT * FROM PatientProtocolStatus 
             WHERE PatientProtocolId = @PatientProtocolId AND 
                   PtProtocolStatus='Registered') AND
                   @strReturn <> 'Registered'
      SET @strReturn = 'Registered' + (': ' + @strReturn)
   ELSE IF (@dteLastIneligible > @dteLastEligible) OR 
           (@dteLastIneligible IS NOT NULL AND @dteLastEligible IS NULL)
           AND @strReturn <> 'Ineligible'
      SET @strReturn = 'Ineligible' + (': ' + @strReturn)
   RETURN (@strReturn)
END
GO

--18Modify_ProjectOrganization.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProjectOrganization
	DROP CONSTRAINT DF_ProjectOrganization_CoordinatingCenter
GO
CREATE TABLE dbo.Tmp_ProjectOrganization
	(
	OrganizationId int NOT NULL IDENTITY (1, 1),
	Name varchar(255) NULL,
	ShortName varchar(50) NULL,
	Address1 varchar(50) NULL,
	Address2 varchar(50) NULL,
	City varchar(50) NULL,
	State varchar(50) NULL,
	Country varchar(50) NULL,
	PostalCode varchar(50) NULL,
	ColorCode varchar(50) NULL,
	CoordinatingCenter bit NULL,
	OrgNum varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_ProjectOrganization ADD CONSTRAINT
	DF_ProjectOrganization_CoordinatingCenter DEFAULT ((0)) FOR CoordinatingCenter
GO
SET IDENTITY_INSERT dbo.Tmp_ProjectOrganization ON
GO
IF EXISTS(SELECT * FROM dbo.ProjectOrganization)
	 EXEC('INSERT INTO dbo.Tmp_ProjectOrganization (OrganizationId, Name, ShortName, Address1, Address2, City, State, Country, PostalCode, ColorCode, CoordinatingCenter, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT OrganizationId, Name, ShortName, Address1, Address2, City, State, Country, PostalCode, ColorCode, CoordinatingCenter, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.ProjectOrganization WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_ProjectOrganization OFF
GO
ALTER TABLE dbo.Project_ProjectOrganization
	DROP CONSTRAINT FK_Project_ProjectOrganization_ProjectOrganization
GO
ALTER TABLE dbo.ProjectOrganization_ProjectContact
	DROP CONSTRAINT FK_ProjectOrganization_ProjectContact_ProjectOrganization
GO
ALTER TABLE dbo.ProjectLOIResponse
	DROP CONSTRAINT FK_ProjectLOIResponse_ProjectOrganization
GO
ALTER TABLE dbo.ProjectCommunicationLog
	DROP CONSTRAINT FK_ProjectCommunicationLog_ProjectOrganization
GO
DROP TABLE dbo.ProjectOrganization
GO
EXECUTE sp_rename N'dbo.Tmp_ProjectOrganization', N'ProjectOrganization', 'OBJECT' 
GO
ALTER TABLE dbo.ProjectOrganization ADD CONSTRAINT
	PK_ProjectOrganization PRIMARY KEY CLUSTERED 
	(
	OrganizationId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProjectCommunicationLog ADD CONSTRAINT
	FK_ProjectCommunicationLog_ProjectOrganization FOREIGN KEY
	(
	OrganizationId
	) REFERENCES dbo.ProjectOrganization
	(
	OrganizationId
	) ON UPDATE  CASCADE 
	 ON DELETE  SET NULL 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProjectLOIResponse ADD CONSTRAINT
	FK_ProjectLOIResponse_ProjectOrganization FOREIGN KEY
	(
	OrganizationId
	) REFERENCES dbo.ProjectOrganization
	(
	OrganizationId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProjectOrganization_ProjectContact WITH NOCHECK ADD CONSTRAINT
	FK_ProjectOrganization_ProjectContact_ProjectOrganization FOREIGN KEY
	(
	OrganizationId
	) REFERENCES dbo.ProjectOrganization
	(
	OrganizationId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Project_ProjectOrganization WITH NOCHECK ADD CONSTRAINT
	FK_Project_ProjectOrganization_ProjectOrganization FOREIGN KEY
	(
	OrganizationId
	) REFERENCES dbo.ProjectOrganization
	(
	OrganizationId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
GO

--19ModifyTableSocialHistories.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_SocialHistories
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PatientId int NULL,
	SocHxOccupation varchar(50) NULL,
	SocHxMaritalStatus varchar(50) NULL,
	SocHxChildren varchar(50) NULL,
	SocHxTobaccoType varchar(50) NULL,
	SocHxTobaccoPacksPerDay varchar(50) NULL,
	SocHxTobaccoPacksPerYear varchar(50) NULL,
	SocHxTobaccoYears varchar(50) NULL,
	SocHxTobaccoQuitYear varchar(50) NULL,
	SocHxCarcinogen varchar(50) NULL,
	SocHxAlcohol varchar(50) NULL,
	SocHxAlcoholDrinksPerDay varchar(50) NULL,
	SocHxAlcoholYears varchar(50) NULL,
	SocHxAlcoholQuitYear varchar(50) NULL,
	SocHxOther varchar(255) NULL,
	SocHxMenarcheAge varchar(50) NULL,
	SocHxMenopauseAge varchar(50) NULL,
	SocHxMenopauseStatus varchar(50) NULL,
	SocHxGravida varchar(50) NULL,
	SocHxParity varchar(50) NULL,
	SocHxFirstBirthAge varchar(50) NULL,
	SocHxNotes varchar(1000) NULL,
	SocHxDataSource varchar(100) NULL,
	SocHxQuality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_SocialHistories)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_SocialHistories (LoggedOperation, LoggedBy, LoggedTime, PatientId, SocHxOccupation, SocHxMaritalStatus, SocHxChildren, SocHxTobaccoType, SocHxTobaccoPacksPerDay, SocHxTobaccoPacksPerYear, SocHxTobaccoYears, SocHxTobaccoQuitYear, SocHxCarcinogen, SocHxAlcohol, SocHxAlcoholDrinksPerDay, SocHxAlcoholYears, SocHxAlcoholQuitYear, SocHxOther, SocHxMenarcheAge, SocHxMenopauseAge, SocHxGravida, SocHxParity, SocHxFirstBirthAge, SocHxNotes, SocHxDataSource, SocHxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PatientId, SocHxOccupation, SocHxMaritalStatus, SocHxChildren, SocHxTobaccoType, SocHxTobaccoPacksPerDay, SocHxTobaccoPacksPerYear, SocHxTobaccoYears, SocHxTobaccoQuitYear, SocHxCarcinogen, SocHxAlcohol, SocHxAlcoholDrinksPerDay, SocHxAlcoholYears, SocHxAlcoholQuitYear, SocHxOther, SocHxMenarcheAge, SocHxMenopauseAge, SocHxGravida, SocHxParity, SocHxFirstBirthAge, SocHxNotes, SocHxDataSource, SocHxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_SocialHistories WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_SocialHistories
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_SocialHistories', N'AuditLog_SocialHistories', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SocialHistories
	DROP CONSTRAINT FK_SocialHistories_Patients
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_SocialHistories
	(
	PatientId int NOT NULL,
	SocHxOccupation varchar(50) NULL,
	SocHxMaritalStatus varchar(50) NULL,
	SocHxChildren varchar(50) NULL,
	SocHxTobaccoType varchar(50) NULL,
	SocHxTobaccoPacksPerDay varchar(50) NULL,
	SocHxTobaccoPacksPerYear varchar(50) NULL,
	SocHxTobaccoYears varchar(50) NULL,
	SocHxTobaccoQuitYear varchar(50) NULL,
	SocHxCarcinogen varchar(50) NULL,
	SocHxAlcohol varchar(50) NULL,
	SocHxAlcoholDrinksPerDay varchar(50) NULL,
	SocHxAlcoholYears varchar(50) NULL,
	SocHxAlcoholQuitYear varchar(50) NULL,
	SocHxOther varchar(255) NULL,
	SocHxMenarcheAge varchar(50) NULL,
	SocHxMenopauseAge varchar(50) NULL,
	SocHxMenopauseStatus varchar(50) NULL,
	SocHxGravida varchar(50) NULL,
	SocHxParity varchar(50) NULL,
	SocHxFirstBirthAge varchar(50) NULL,
	SocHxNotes varchar(1000) NULL,
	SocHxDataSource varchar(100) NULL,
	SocHxQuality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.SocialHistories)
	 EXEC('INSERT INTO dbo.Tmp_SocialHistories (PatientId, SocHxOccupation, SocHxMaritalStatus, SocHxChildren, SocHxTobaccoType, SocHxTobaccoPacksPerDay, SocHxTobaccoPacksPerYear, SocHxTobaccoYears, SocHxTobaccoQuitYear, SocHxCarcinogen, SocHxAlcohol, SocHxAlcoholDrinksPerDay, SocHxAlcoholYears, SocHxAlcoholQuitYear, SocHxOther, SocHxMenarcheAge, SocHxMenopauseAge, SocHxGravida, SocHxParity, SocHxFirstBirthAge, SocHxNotes, SocHxDataSource, SocHxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PatientId, SocHxOccupation, SocHxMaritalStatus, SocHxChildren, SocHxTobaccoType, SocHxTobaccoPacksPerDay, SocHxTobaccoPacksPerYear, SocHxTobaccoYears, SocHxTobaccoQuitYear, SocHxCarcinogen, SocHxAlcohol, SocHxAlcoholDrinksPerDay, SocHxAlcoholYears, SocHxAlcoholQuitYear, SocHxOther, SocHxMenarcheAge, SocHxMenopauseAge, SocHxGravida, SocHxParity, SocHxFirstBirthAge, SocHxNotes, SocHxDataSource, SocHxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.SocialHistories WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.SocialHistories
GO
EXECUTE sp_rename N'dbo.Tmp_SocialHistories', N'SocialHistories', 'OBJECT' 
GO
ALTER TABLE dbo.SocialHistories ADD CONSTRAINT
	PK_SocialHistories PRIMARY KEY CLUSTERED 
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.SocialHistories WITH NOCHECK ADD CONSTRAINT
	FK_SocialHistories_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditSocialHistories_UD
ON dbo.SocialHistories FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_SocialHistories
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.PatientId = Inserted.PatientId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_SocialHistories
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditSocialHistories_UD', N'last', N'update'
GO
COMMIT
GO

--20ModifyTableRadiationTherapy.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_RadiationTherapy
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PatientId int NULL,
	RadiationTherapyId int NULL,
	RadTxPending bit NULL,
	RadTxDateText varchar(50) NULL,
	RadTxDate datetime NULL,
	RadTxType varchar(50) NULL,
	RadTxDisease varchar(50) NULL,
	RadTxIndication varchar(50) NULL,
	RadTxIntent varchar(50) NULL,
	RadTxTarget varchar(50) NULL,
	RadTxSide varchar(50) NULL,
	RadTxPosition varchar(50) NULL,
	RadTxStopDateText varchar(50) NULL,
	RadTxStopDate datetime NULL,
	RadTxIsotope varchar(50) NULL,
	RadTxDosePerFraction varchar(50) NULL,
	RadTxTotalDose varchar(50) NULL,
	RadTxUnits varchar(50) NULL,
	RadTxNumFractions varchar(50) NULL,
	RadTxNumFields varchar(50) NULL,
	RadTxSchedule varchar(50) NULL,
	RadTxPhysician varchar(50) NULL,
	RadTxInstitution varchar(100) NULL,
	RadTxNotes varchar(1000) NULL,
	RadTxDataSource varchar(100) NULL,
	RadTxQuality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_RadiationTherapy)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_RadiationTherapy (LoggedOperation, LoggedBy, LoggedTime, PatientId, RadiationTherapyId, RadTxPending, RadTxDateText, RadTxDate, RadTxType, RadTxDisease, RadTxIndication, RadTxIntent, RadTxTarget, RadTxStopDateText, RadTxStopDate, RadTxIsotope, RadTxDosePerFraction, RadTxTotalDose, RadTxUnits, RadTxNumFractions, RadTxNumFields, RadTxSchedule, RadTxPhysician, RadTxInstitution, RadTxNotes, RadTxDataSource, RadTxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PatientId, RadiationTherapyId, RadTxPending, RadTxDateText, RadTxDate, RadTxType, RadTxDisease, RadTxIndication, RadTxIntent, RadTxTarget, RadTxStopDateText, RadTxStopDate, RadTxIsotope, RadTxDosePerFraction, RadTxTotalDose, RadTxUnits, RadTxNumFractions, RadTxNumFields, RadTxSchedule, RadTxPhysician, RadTxInstitution, RadTxNotes, RadTxDataSource, RadTxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_RadiationTherapy WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_RadiationTherapy
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_RadiationTherapy', N'AuditLog_RadiationTherapy', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.RadiationTherapy
	DROP CONSTRAINT FK_RadiationTherapy_Patients
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.RadiationTherapy
	DROP CONSTRAINT DF_RadiationTherapy_RadTxPending
GO
CREATE TABLE dbo.Tmp_RadiationTherapy
	(
	PatientId int NOT NULL,
	RadiationTherapyId int NOT NULL IDENTITY (1, 1),
	RadTxPending bit NULL,
	RadTxDateText varchar(50) NULL,
	RadTxDate datetime NULL,
	RadTxType varchar(50) NOT NULL,
	RadTxDisease varchar(50) NULL,
	RadTxIndication varchar(50) NULL,
	RadTxIntent varchar(50) NULL,
	RadTxTarget varchar(50) NULL,
	RadTxSide varchar(50) NULL,
	RadTxPosition varchar(50) NULL,
	RadTxStopDateText varchar(50) NULL,
	RadTxStopDate datetime NULL,
	RadTxIsotope varchar(50) NULL,
	RadTxDosePerFraction varchar(50) NULL,
	RadTxTotalDose varchar(50) NULL,
	RadTxUnits varchar(50) NULL,
	RadTxNumFractions varchar(50) NULL,
	RadTxNumFields varchar(50) NULL,
	RadTxSchedule varchar(50) NULL,
	RadTxPhysician varchar(50) NULL,
	RadTxInstitution varchar(100) NULL,
	RadTxNotes varchar(1000) NULL,
	RadTxDataSource varchar(100) NULL,
	RadTxQuality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_RadiationTherapy ADD CONSTRAINT
	DF_RadiationTherapy_RadTxPending DEFAULT ((0)) FOR RadTxPending
GO
SET IDENTITY_INSERT dbo.Tmp_RadiationTherapy ON
GO
IF EXISTS(SELECT * FROM dbo.RadiationTherapy)
	 EXEC('INSERT INTO dbo.Tmp_RadiationTherapy (PatientId, RadiationTherapyId, RadTxPending, RadTxDateText, RadTxDate, RadTxType, RadTxDisease, RadTxIndication, RadTxIntent, RadTxTarget, RadTxStopDateText, RadTxStopDate, RadTxIsotope, RadTxDosePerFraction, RadTxTotalDose, RadTxUnits, RadTxNumFractions, RadTxNumFields, RadTxSchedule, RadTxPhysician, RadTxInstitution, RadTxNotes, RadTxDataSource, RadTxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PatientId, RadiationTherapyId, RadTxPending, RadTxDateText, RadTxDate, RadTxType, RadTxDisease, RadTxIndication, RadTxIntent, RadTxTarget, RadTxStopDateText, RadTxStopDate, RadTxIsotope, RadTxDosePerFraction, RadTxTotalDose, RadTxUnits, RadTxNumFractions, RadTxNumFields, RadTxSchedule, RadTxPhysician, RadTxInstitution, RadTxNotes, RadTxDataSource, RadTxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.RadiationTherapy WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_RadiationTherapy OFF
GO
ALTER TABLE dbo.RadTxAdministration
	DROP CONSTRAINT FK_RadTxAdministration_RadiationTherapy
GO
DROP TABLE dbo.RadiationTherapy
GO
EXECUTE sp_rename N'dbo.Tmp_RadiationTherapy', N'RadiationTherapy', 'OBJECT' 
GO
ALTER TABLE dbo.RadiationTherapy ADD CONSTRAINT
	PK_RadiationTherapy PRIMARY KEY CLUSTERED 
	(
	RadiationTherapyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_RadiationTherapy_PatientId ON dbo.RadiationTherapy
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.RadiationTherapy WITH NOCHECK ADD CONSTRAINT
	FK_RadiationTherapy_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  NO ACTION 
	
GO
CREATE TRIGGER dbo.trgAuditRadiationTherapy_UD
ON dbo.RadiationTherapy FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_RadiationTherapy
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.RadiationTherapyId = Inserted.RadiationTherapyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_RadiationTherapy
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditRadiationTherapy_UD', N'last', N'update'
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.RadTxAdministration ADD CONSTRAINT
	FK_RadTxAdministration_RadiationTherapy FOREIGN KEY
	(
	RadiationTherapyId
	) REFERENCES dbo.RadiationTherapy
	(
	RadiationTherapyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
GO

--21AddspChronoListPatientProblems.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[spChronoListPatientProblems]
	@PatientId int = NULL
AS
SELECT ProblemDateText AS VarDate, 'Patient Problem' AS VarName, LEFT(ProblemName,100) AS VarValue, NULL AS Quality, ProblemDate AS SortDate, NULL AS GroupNumber, 'PatientProblems' AS TableName, PatientProblemId AS PrimaryKey, PatientId AS ParentKey
FROM PatientProblems
WHERE PatientId = @PatientId
GO

--22ModifyspChronologicalList.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spChronologicalList]
	@PatientId int = NULL,
	@UserName varchar(50) = NULL,
   @AbsentEvents bit = 0,
	@Actions bit = 0,
	@Allergies bit = 0,
	@BrachyTherapy bit = 0,
	@Categories bit = 0,
	@ClinicalStages bit = 0,
	@Comorbidities bit = 0,
	@Cytologies bit = 0,
	@Diagnostics bit = 0,
	@DietaryIntake bit = 0,
	@Encounters bit = 0,
	@FamilyMembers bit = 0,
	@Hospitalizations bit = 0,
	@Identifiers bit = 0,
	@ItemsPending bit = 0, --special case
	@ItemsMissing bit = 0, --special case
	@LabTests bit = 0,
	@ListAll bit = 0, --special case
	@ListCommon bit = 0, --special case
	@ListTreatments bit = 0, --special case
	@Medications bit = 0,
	@MedicalTherapy bit = 0,
	@OperatingRoomDetails bit = 0, --special case
	@Pathology bit = 0,
	@PatientConsent bit = 0,
	@PatientPhysicians bit = 0,
	@Procedures bit = 0,
	@ProcNeuralStimulations bit = 0,
	@Protocols bit = 0,
	@QOL_Therapy bit = 0,
	@RadiationTherapy bit = 0,
	@SocialHistories bit = 0,
	@SpecimenAccessions bit = 0,
	@Surveys bit = 0,
	@Status bit = 0,
	@Toxicities bit = 0,
   @ExcludeLabs bit = 0, --special case
   @PatientProblems bit = 0
AS
SET NOCOUNT ON
--Each above variable represents a table name except for the special cases.

--DECLARE @ChronoTable TABLE 
/*
table variable might be more efficient than temp table however cannot
use syntax 'INSERT INTO @ChronoTable EXEC spChronoListAll @PatientId' with
a table variable. Cannot use a procedure as the from clause when inserting to a 
table variable would need to rewrite each spChrono child procedure as a table-valued 
function then can use that function in the FROM clause of Insert statement.
'INSERT INTO @ChronoTable SELECT * FROM dbo.fn_ChronoListAll(@PatientId)'
However sp is much more flexible than table-valued function.
*/

CREATE TABLE #ChronoTable
   (
   ChronoId         int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate          varchar(50) NULL,
   VarName          varchar(100) NULL,
   VarValue         varchar(500) NULL,
   Quality          varchar(50) NULL,
   SortDate         datetime NULL,
   GroupNumber      int NULL,
   TableName        varchar(50) COLLATE database_default NULL,
   PrimaryKey       int NOT NULL,
   ParentKey        int NULL,
   ProcId           int NULL,
   OpId             int NULL,
   CommonKey        int NULL,
   PendingNote      bit NULL DEFAULT (0)
   )

--Add single compound index
CREATE INDEX I_ChronoTable ON #ChronoTable (SortDate,CommonKey,ProcId,GroupNumber)

--holds patient Notifications records
DECLARE @NotificationTable TABLE
	(
	NotificationId int NOT NULL,
	TableName varchar(50) NULL,
	TablePrimaryKey int NULL,
	Response varchar(255) NULL
	)

--most special cases are mutually exclusive
IF @ListAll = 1
   BEGIN
      SET @AbsentEvents = 1
      SET @Actions = 1
      SET @Allergies = 1
      SET @BrachyTherapy = 1
      SET @Categories = 1
      SET @ClinicalStages = 1
      SET @Comorbidities = 1
      SET @Diagnostics = 1
      SET @DietaryIntake = 1
      SET @Encounters = 1
      SET @FamilyMembers = 1
      SET @Hospitalizations = 1
      SET @Identifiers = 1
      SET @LabTests = 1
      SET @Medications = 1
      SET @MedicalTherapy = 1
      SET @Pathology = 1
      SET @PatientConsent = 1
      SET @PatientPhysicians = 1
      SET @Procedures = 1
      SET @ProcNeuralStimulations = 1
      SET @Protocols = 1
      SET @QOL_Therapy = 1
      SET @RadiationTherapy = 1
      SET @SocialHistories = 1
      SET @OperatingRoomDetails = 1
      SET @SpecimenAccessions = 1
      SET @Status = 1
      SET @Surveys = 1
      SET @Toxicities = 1
      SET @PatientProblems = 1
   END
ELSE IF @ListCommon = 1
   BEGIN
      SET @BrachyTherapy = 1
      SET @ClinicalStages = 1
      SET @Diagnostics = 1
      SET @LabTests = 1
      SET @MedicalTherapy = 1
      SET @Pathology = 1
      SET @Procedures = 1
      SET @Protocols = 1
      SET @QOL_Therapy = 1
      SET @RadiationTherapy = 1
      SET @OperatingRoomDetails = 1
      SET @SpecimenAccessions =1
      SET @Status = 1
      SET @Toxicities = 1
   END
ELSE IF @ListTreatments = 1
   BEGIN
      SET @BrachyTherapy = 1
      SET @MedicalTherapy = 1
      SET @Procedures = 1
      SET @Protocols = 1
      SET @RadiationTherapy = 1
      SET @OperatingRoomDetails = 1
   END
ELSE IF @OperatingRoomDetails = 1
   BEGIN
      SET @Pathology = 1
      SET @Procedures = 1
      SET @ProcNeuralStimulations = 1
      SET @SpecimenAccessions = 1
   END

--Special handling for excluding labs from any list
IF @ExcludeLabs = 1
   SET @LabTests = 0

IF @AbsentEvents = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListAbsentEvents @PatientId
IF @Actions = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListActions @PatientId
IF @Allergies = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListAllergies @PatientId
IF @BrachyTherapy = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListBrachyTherapy @PatientId
IF @Categories = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListCategories @PatientId, @UserName
IF @ClinicalStages = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListClinicalStages @PatientId
IF @Comorbidities = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListComorbidities @PatientId
IF @Cytologies = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListCytologies @PatientId
IF @Diagnostics = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListDiagnostics @PatientId
IF @DietaryIntake = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListDietaryIntake @PatientId
IF @Encounters = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListEncounters @PatientId
IF @FamilyMembers = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListFamilyMembers @PatientId
IF @Hospitalizations = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListHospitalizations @PatientId
IF @Identifiers = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListIdentifiers @PatientId
IF @ItemsMissing = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListItemsMissing @PatientId
IF @ItemsPending = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListItemsPending @PatientId
IF @LabTests = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListLabTests @PatientId
IF @Medications = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListMedications @PatientId
IF @MedicalTherapy = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListMedicalTherapy @PatientId
IF @OperatingRoomDetails = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListOperatingRoomDetails @PatientId
IF @Pathology = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey,ProcId,OpId) EXEC spChronoListPathology @PatientId
IF @PatientConsent = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListPatientConsent @PatientId
IF @PatientPhysicians = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListPatientPhysicians @PatientId
IF @Procedures = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey,ProcId,OpId) EXEC spChronoListProcedures @PatientId
IF @ProcNeuralStimulations =1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey,ProcId,OpId) EXEC spChronoListProcNeuralStimulations @PatientIdIF @Protocols = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListProtocols @PatientId
IF @QOL_Therapy = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListQOL_Therapy @PatientId
IF @RadiationTherapy = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListRadiationTherapy @PatientId
IF @SocialHistories = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListSocialHistories @PatientId
IF @SpecimenAccessions = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListSpecimenAccessions @PatientId
IF @Status = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListStatus @PatientId
IF @Surveys = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListSurveys @PatientId
IF @Toxicities = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListToxicities @PatientId
IF @PatientProblems = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListPatientProblems @PatientId

--load the notifications records for the patient. PatientId is indexed
INSERT INTO @NotificationTable (NotificationId,TableName,TablePrimaryKey,Response)
SELECT NotificationId,TableName,TablePrimaryKey,Response
FROM Notifications
WHERE PatientId=@PatientId

--Would work instead of using column list but makes chrono list slower
--ALTER TABLE #ChronoTable ADD OpId int

--This section is post processing to display complex data
--ProstatectomyPath
UPDATE #ChronoTable
SET VarValue = dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,OperatingRoomDetailId)
FROM #ChronoTable INNER JOIN ProstatectomyPath ON PrimaryKey = PathologyId
                  INNER JOIN Pathology ON ProstatectomyPath.PathologyId=Pathology.PathologyId
WHERE TableName = 'Pathology'
--CystectomyPath
UPDATE #ChronoTable
SET VarValue = LTRIM(ISNULL(RIGHT(PathStageSystem,2),'') + ' ' + ISNULL(PathStageT,'') + ' ' +  ISNULL(PathGrade,''))            
FROM #ChronoTable INNER JOIN CystectomyPath ON PrimaryKey = PathologyId
                  INNER JOIN Pathology ON CystectomyPath.PathologyId=Pathology.PathologyId
                  LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId=PathologyStageGrade.PathologyId
WHERE TableName = 'Pathology'
--PancreasPath
UPDATE #ChronoTable
SET VarValue = RTRIM(ISNULL(PathStageSystem,'') + ' ' + ISNULL(PathStageT,'')) + ' ' + RTRIM(ISNULL(PathHistology,'') + ' ' + RTRIM(ISNULL(PathGrade,'')) + ' ' + ISNULL(PathSite,''))
FROM #ChronoTable INNER JOIN PancreasPath ON PrimaryKey = PathologyId
                  INNER JOIN Pathology ON PancreasPath.PathologyId=Pathology.PathologyId
                  LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId=PathologyStageGrade.PathologyId
WHERE TableName = 'Pathology'
--RPLND
UPDATE #ChronoTable
SET VarValue = ISNULL(NULLIF(LTRIM(ISNULL(PathHistology,'') + ' ' + ISNULL(PathStageN,'') + ' ' +  ISNULL(PathStageM,'')),''), VarValue)
FROM #ChronoTable INNER JOIN Pathology ON PrimaryKey = Pathology.PathologyId
                  INNER JOIN RPLND_Proc ON RPLND_Proc.ProcedureId=Pathology.ProcedureId
                  LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId=PathologyStageGrade.PathologyId
WHERE TableName = 'Pathology'
--Endoscopy based on a lookup code
UPDATE #ChronoTable
SET VarName = ISNULL(PathSpecimenCollection,PathSpecimenType),
    VarValue = LTRIM(ISNULL(RIGHT(PathStageSystem,2),'') + ' '  + ISNULL(PathStageT,'') + ' ' + ISNULL(PathGrade,''))
FROM #ChronoTable INNER JOIN Pathology ON PrimaryKey = Pathology.PathologyId
                  LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId=PathologyStageGrade.PathologyId
WHERE TableName = 'Pathology' AND PathSpecimenType = 'Endoscopy'
--Prostate Biopsies
UPDATE #ChronoTable
SET VarValue = dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult)
FROM #ChronoTable INNER JOIN ProstateBiopsyPath ON PrimaryKey = PathologyId
                  INNER JOIN Pathology ON ProstateBiopsyPath.PathologyId=Pathology.PathologyId
WHERE TableName = 'Pathology'

/*
The GroupNumber Columns allows a secondary sort order after the date.
It also allows the date value to be removed for certain rows.
*/
UPDATE #ChronoTable
SET GroupNumber = LkpOrder
FROM #ChronoTable INNER JOIN LookupCodes ON TableName = LkpCode
WHERE LkpFieldName = 'ChronoList' AND GroupNumber IS NULL

/*
The CommonKey column allows grouping parent and child records together
*/
UPDATE #ChronoTable
SET CommonKey = PrimaryKey
WHERE TableName IN ('Encounters','OperatingRoomDetails') AND CommonKey IS NULL

UPDATE #ChronoTable
SET CommonKey = ParentKey
WHERE TableName Like 'Enc%' AND CommonKey IS NULL

UPDATE #ChronoTable
SET CommonKey = ISNULL(OpId,ProcId)
WHERE TableName IN ('Procedures','Pathology','NeuralStimulationProcFinding') AND CommonKey IS NULL

--force patient problems to sort under encounters when possible
UPDATE #ChronoTable
SET CommonKey = b.EncounterId,
    SortDate = c.EncDate
FROM #ChronoTable a INNER JOIN
     ProblemPlans b ON a.PrimaryKey = b.PatientProblemId AND
                       TableName ='PatientProblems' INNER JOIN
     Encounters c ON b.EncounterId = c.EncounterId
WHERE CommonKey IS NULL

/*
This will force a pathology to group with it's related procedure or Operating room detail
regardless of the date assigned in the path report however date does need to be filled in
because of null comparison. 
*/
UPDATE #ChronoTable
SET SortDate = b.SortDate
FROM #ChronoTable AS a INNER JOIN 
                  (SELECT CommonKey,SortDate
                   FROM  #ChronoTable 
                   WHERE TableName IN('Procedures','OperatingRoomDetails') AND CommonKey IS NOT NULL
                  ) AS b ON a.CommonKey = b.CommonKey AND a.SortDate <> b.SortDate
WHERE a.TableName = 'Pathology' AND a.CommonKey IS NOT NULL

--Update the PendingNote using the notification data
UPDATE #ChronoTable
SET PendingNote = 1
FROM #ChronoTable AS a INNER JOIN @NotificationTable b ON a.PrimaryKey=b.TablePrimaryKey AND
                                                          a.TableName=b.TableName
WHERE ISNULL(Response,'None') = 'None'

SELECT * FROM #ChronoTable
ORDER BY SortDate,CommonKey,ProcId,GroupNumber
--DROP TABLE #ChronoTable
GO

--23AddDataChronolistGrouping.sql
GO
--Add lkp for chrono list grouping
INSERT INTO LookupCodes
(LkpFieldName,LkpCode,LkpOrder,EnteredBy,EnteredTime)
SELECT a.LkpFieldName,a.LkpCode,a.LkpOrder,a.EnteredBy,a.EnteredTime
FROM 
   (
   SELECT 'ChronoList' LkpFieldName,'PatientProblems' LkpCode, 206 LkpOrder, 'Caisis_System' EnteredBy, GETDATE() EnteredTime
   ) a LEFT OUTER JOIN LookupCodes b ON a.LkpFieldName=b.LkpFieldName AND
                                        a.LkpCode=b.LkpCode
WHERE b.LkpFieldName IS NULL
GO

--24ModifyspGetPatientHPI.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spGetPatientHPI]
   @PatientId int = NULL,
   @NomogramResults bit = 0,  --retired
   @NomogramValues bit = 0,   --retired
   @EForm bit = 0,
   @Rowcount int = NULL OUTPUT
AS
--Procedure returns HPI as a select statement instead of output parameter for flexibility
SET NOCOUNT ON

--These variables are for debuging / testing speed
DECLARE @starttime datetime
DECLARE @stoptime datetime
Declare @strDebug varchar(8000)
--End of Debug variables

DECLARE @strPatientHPI     varchar(500)
DECLARE @strDate           varchar(50)
DECLARE @strStopDate       varchar(50)
DECLARE @dteDate           datetime
DECLARE @strVariable       varchar(50)
DECLARE @strValue          varchar(255)
DECLARE @strDataQuality    varchar(50)
DECLARE @intPrimaryKey     int
DECLARE @strTableName      varchar(50)
DECLARE @i                 int
DECLARE @blnPreTx          bit
DECLARE @blnValidPSA       bit
DECLARE @sngTime           float(24) --VBA single float(53) double
DECLARE @BiopsyDate        datetime
DECLARE @BiopsyDays        float(24) -- number of days after prostate biopsy that PSA is invalid
DECLARE @strOutPut         varchar(500)

--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'
SET @BiopsyDate = @MISSING_DATE
SET @BiopsyDays = 21

--Clinical states constants (must be ordered)
DECLARE @NO_PROSTATE_CANCER_DIAGNOSIS smallint
DECLARE @LOCALIZED                    smallint
DECLARE @RISING_PSA_NON_CASTRATE      smallint
DECLARE @RISING_PSA_CASTRATE          smallint
DECLARE @NON_CASTRATE_METS            smallint
DECLARE @CASTRATE_METS                smallint
DECLARE @DEAD                         smallint
SET @NO_PROSTATE_CANCER_DIAGNOSIS = 0
SET @LOCALIZED = 1
SET @RISING_PSA_NON_CASTRATE = 2
SET @RISING_PSA_CASTRATE = 3
SET @NON_CASTRATE_METS = 4   
SET @CASTRATE_METS = 5  
SET @DEAD = 6

--This is used to determine castrate clinical states
DECLARE @CASTRATE_TESTOSTERONE_LEVEL smallint
SET @CASTRATE_TESTOSTERONE_LEVEL = 50

DECLARE @ClinStateDate    datetime        --date of last clinical state transition
DECLARE @ClinStateDteText varchar(50)     --datetext of last clinical state transition
DECLARE @ClinState        int             --current clinical state (0 to 5)
DECLARE @Castrate         bit             --castrate levels of testosterone (<50)
DECLARE @DxBiopsyID       int             --primary key for diagnostic biopsy record
DECLARE @DxBxDate         datetime        --date of diagnostic (first positive) biopsy
DECLARE @DxBxDateText     varchar(50)     --datetext of diagnostic (first positive) biopsy
DECLARE @DxBxType         varchar(50)     --diagnostic biopsy type: TURP or needle
DECLARE @DxBxSummary      varchar(50)     --pathologic summary of diagnostic biopsy: eg. 3+4
DECLARE @DxBxQuality      varchar(50)     --data quality for diagnostic biopsy
DECLARE @PreTxPSA         float(24)       --valid PSA before any "curative" treatment (XRT or RP)
DECLARE @PreTxPSADate     datetime 
DECLARE @ClinStageDate	  datetime 
DECLARE @ClinStageSystem  varchar(50)     --UICC TNM staging system used
DECLARE @ClinStageT       varchar(50)     --pre-treatment UICC Tumor Stage
DECLARE @ClinStageN       varchar(50)     --pre-treatment UICC Nodes Stage
DECLARE @ClinStageM       varchar(50)     --pre-treatment UICC Metastatis Stage
DECLARE @ClinStageQuality varchar(50)     --data quality of clinical staging data
DECLARE @NeoAdjHormTx     varchar(50)     --patient has had neo-adjuvant hormone therapy
DECLARE @NeoAdjHormTxDate datetime        --date of first hormone therapy (all PSAs after this are invalid?)
DECLARE @NeoAdjRadTx      varchar(50)     --patient has had neo-adjuvant radiation therapy
DECLARE @NeoAdjRadTxDate  datetime        --date of last neo-adjuvant radiation therapy (all following pre-tx PSAs are invalid)
DECLARE @NeoAdjChemoTx    varchar(50)     --patient has had neo-adjuvant chemotherapy
DECLARE @NeoAdjChemoDate  datetime        --date of last neo-adjuvant chemotherapy
--DECLARE @Prostatectomy    bit           --patient had prostatectomy (means he will always use RP PSA recurrence methods)
DECLARE @ActiveSurId      int             --primary key of Active Surveillance status record

DECLARE @TxDate           datetime        --date of first "curative" treatment
DECLARE @TxType           varchar(50)     --curative treatment type
DECLARE @AdjHormTx        varchar(50)
DECLARE @AdjChemoTx       varchar(50)
--DECLARE @NumPSAs          int --number of PSAs after curative treatment
DECLARE @EOD              varchar(50)     --last extent of disease 
DECLARE @LastPSA_Value    varchar(50)
DECLARE @LastPSA_Date     datetime   

DECLARE @HormEvent        varchar(50)
DECLARE @HormTxDate       datetime
DECLARE @MetsEvent        varchar(50)
DECLARE @ChemoTxDate      datetime

--used for eform
DECLARE @strTableNames     varchar(200)
DECLARE @strPrimaryKeys    varchar(50)
DECLARE @strVarDelimited   varchar(500)
DECLARE @ClinStageID       int             --primary key for diagnostic clinical stage record
DECLARE @PreTxPSAID        int             --primary key for pre prostatectomy psa record
DECLARE @ClinStateID       int             --primary key for clin state record
DECLARE @ClinStateTable    varchar(50)     --table name where clin state obtained from
DECLARE @blnHadRP          bit             --patient had prostatectomy
DECLARE @ProstatePathId    int             --primary key for ProstatectomyPath record
DECLARE @PLNDProcId        int             --primary key for Procedure PLND record


--used for eform
SET @strTableNames    = ''
SET @strPrimaryKeys   = ''
SET @strVarDelimited  = ''

SET @ClinStateDate    = @MISSING_DATE
SET @ClinStateDteText = ''
SET @ClinState        = @NO_PROSTATE_CANCER_DIAGNOSIS
SET @Castrate         = 0
SET @DxBxDate         = @MISSING_DATE
SET @DxBxDateText     = ''
SET @DxBxType         = ''
SET @DxBxSummary      = ''
SET @DxBxQuality      = ''
SET @PreTxPSA         = @MISSING_NUMBER
SET @PreTxPSADate     = @MISSING_DATE
SET @ClinStageDate    = @MISSING_DATE
SET @ClinStageSystem  = ''
SET @ClinStageT       = ''
SET @ClinStageN       = ''
SET @ClinStageM       = ''
SET @ClinStageQuality = ''
SET @NeoAdjHormTx     = 0
SET @NeoAdjHormTxDate = @MISSING_DATE
SET @NeoAdjRadTx      = 0
SET @NeoAdjRadTxDate  = @MISSING_DATE
SET @NeoAdjChemoTx    = 0
SET @NeoAdjChemoDate  = @MISSING_DATE
SET @HormTxDate       = @MISSING_DATE
SET @ChemoTxDate      = @MISSING_DATE
SET @blnHadRP         = 0
SET @TxDate           = @MISSING_DATE
SET @TxType           = ''
--SET @NumPSAs          = 0
SET @EOD              = ''
SET @LastPSA_Value    = @MISSING_NUMBER
SET @LastPSA_Date     = @MISSING_DATE
SET @MetsEvent        = ''
SET @HormEvent        = ''
 
DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate              datetime NULL,
   VarString             varchar(500) NULL,
   VarDelimited          varchar(500) NULL,
   TableNames            varchar(200) NULL,
   PrimaryKeys           varchar(50) NULL
   )

DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarValue
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarValue     varchar(255) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   VarStopDate  varchar(50) NULL,
   TableName    varchar(50) NULL,
   PrimaryKey   int NOT NULL
   )

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, CAST(dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) as varchar(255)), ISNULL(PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN ProstateBiopsyPath ON Pathology.PathologyId=ProstateBiopsyPath.PathologyId
WHERE Procedures.PatientId = @PatientId AND 
      ProcSite='Prostate' AND ProcName IN('TURP','TRUS Biopsy','Biopsy','Needle Biopsy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ClinStageDateText, ClinStageSystem, ClinStageT, ClinStageQuality, ClinStageDate, 'ClinicalStages', ClinicalStageId
FROM ClinicalStages
WHERE (ClinicalStages.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT DxDateText, DxType, DxResult, DxQuality, DxDate,  'Diagnostics', DiagnosticId
FROM Diagnostics
WHERE (Diagnostics.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT LabDateText, LabTest, LabResult, LabQuality, LabDate, 'LabTests', LabTestId
FROM LabTests
WHERE (LabTests.PatientId = @PatientId AND LabTest IN ('PSA','PSAUS','TEST') AND LabResult IS NOT NULL)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT MedTxDateText, MedTxType, MedTxAgent, MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId
FROM MedicalTherapy
WHERE (MedicalTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy'), LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy'), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName = 'Orchiectomy'

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'Nephrectomy', ISNULL(ProcName,'Nephrectomy') + ISNULL(' '+ProcSide,''), ProcQuality, ProcDate, 'Procedures',Procedures.ProcedureId
FROM Procedures
WHERE PatientId = @PatientId AND ProcName IN('Nephrectomy','Partial Nephrectomy','Laparoscopic Nephroureterectomy','Partial for Horshoe Kidney','Laparoscopic Partial Nephrectomy','Nephroureterectomy','Laparoscopic Radical Nephrectomy','Radical Nephrectomy','Exploratory Laparotomy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'RPLND', RTRIM('RPLND ' + ISNULL(ProcApproach,'')), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName = 'RPLND'

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ISNULL(ProcName,'Prostatectomy'),dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId) + ' (' + ISNULL(PathQuality,ProcQuality) + ')', ISNULL(PathQuality,ProcQuality), ProcDate,  'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN ProstatectomyPath ON ProstatectomyPath.PathologyId = Pathology.PathologyId
WHERE Procedures.PatientId = @PatientId AND ProcName IN('CP','LP','LP_CONV','PP','RALP','RP','SalvCP','SalvLP','SalvRP')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,'Cystectomy', ISNULL(ProcName,'Cystectomy'),ProcQuality,ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName IN('Cystectomy','CP','Cysto-Prostatectomy','Partial Cystectomy','Radical Cystectomy','Salvage Radical Cystectomy')
      AND Procedures.ProcedureId NOT IN (SELECT PrimaryKey FROM @ChronoTable WHERE TableName='Procedures')

--procedures not in the current list
INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, NULL, ProcQuality, ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN 
                (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT RadTxDateText, RadTxType, RadTxTotalDose, RadTxQuality, RadTxDate,RadTxStopDateText, 'RadiationTherapy', RadiationTherapyId
FROM RadiationTherapy
WHERE (RadiationTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT BrachyDateText,'Brachytherapy',BrachyIsotope,BrachyQuality,BrachyDate,'BrachyTherapy',PatientId
FROM BrachyTherapy
WHERE (BrachyTherapy.PatientId = @PatientId AND ISNULL(BrachyPending,0)=0)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT StatusDateText, 'Status', status, statusQuality, statusDate, 'Status', statusId
FROM Status
WHERE (Status.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT PtDeathDateText, 'Status', PtDeathType, Null, PtDeathDate, 'Patients', PatientID
FROM Patients
WHERE (PtDeathDate IS NOT NULL) AND (PatientID=@PatientID)

--Clean up local variables for each record fetched
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarValue = ''
WHERE VarValue IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarValue = dbo.fnPacManStr(VarValue)
WHERE TableName = 'LabTests' AND ISNUMERIC(VarValue)=0
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL

--SELECT * FROM @ChronoTable ORDER BY SortDate
SET @strOutPut = ''
SET @strPatientHPI = ''
DECLARE tables_cursor CURSOR LOCAL FAST_FORWARD
   FOR
   SELECT VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,PrimaryKey,TableName
   FROM @ChronoTable
   ORDER BY SortDate ASC
OPEN tables_cursor
IF CURSOR_STATUS ('local','tables_cursor') = 1
BEGIN
   --SET @starttime= GETDATE()
   --SET @strDebug= 'START ' + CAST(@starttime as varchar)
   FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@intPrimaryKey,@strTableName
   WHILE (@@FETCH_STATUS <> -1)
   BEGIN  
      --DETERMINE if record is pre-treatment assume record is not pre-treatment
      SET @blnPreTx = 0
      IF @dteDate IS NULL 
         SET @blnPreTx = 1
      ELSE IF @TxDate = @MISSING_DATE
         SET @blnPreTx = 1
      ELSE IF @dteDate = @TxDate
         SET @blnPreTx = 1     

      -- PSA
      IF @strVariable IN('PSA','PSAUS')
      BEGIN
         --accomodate <,>, <=, >=
         --SET @strValue = dbo.fnPacManStr(@strValue) --not need cause of update statement        
         IF ISNUMERIC(@strValue) = 1
         BEGIN
            SET @blnValidPSA = 1
            -- PSA invalid if patient on hormone therapy
            IF (@blnPreTx = 1 AND @NeoAdjHormTx <> '') OR (@AdjHormTx <> '') OR (@HormEvent <> '')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@HormTxDate = @MISSING_DATE) OR (@dteDate > @HormTxDate)
                     SET @blnValidPSA = 0

            -- PSA invalid if patient on chemotherapy
            IF (@blnPreTx = 1 AND @NeoAdjChemoTx <> '') OR (@AdjChemoTx <> '') OR (@MetsEvent LIKE '%CHEMO%')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@ChemoTxDate = @MISSING_DATE) OR (@dteDate > @ChemoTxDate)
                     SET @blnValidPSA = 0

            -- PSAs invalid within specified days after prostate biopsy
            IF @BiopsyDate <> @MISSING_DATE AND @dteDate IS NOT NULL
               IF @dteDate > @BiopsyDate
                  IF (@dteDate - @BiopsyDate) < @BiopsyDays
                     SET @blnValidPSA = 0

            -- find valid pre-treatment PSA 
            IF @blnValidPSA = 1   
               IF @blnPreTx = 1
               BEGIN
                  IF NOT (@dteDate IS NULL AND @PreTxPSA <> @MISSING_NUMBER AND @PreTxPSA > CAST(@strValue AS float(24)))
                     BEGIN
                        SET @PreTxPSA = CAST(@strValue AS float(24))
                        IF @EForm=1
                           SET @PreTxPSAID = @intPrimaryKey --used for eform
                     END 
                  IF @dteDate IS NOT NULL
                     SET @PreTxPSADate = @dteDate
               END
               ELSE
                  SET @LastPSA_Value = @strValue
               IF @dteDate IS NOT NULL
                  SET @LastPSA_Date = @dteDate
         END 
      END
      ELSE
      -- Prostate Biopsy
      IF @strVariable IN('NEEDLE BIOPSY','BIOPSY','TURP','TRUS Biopsy') --dbo.fnIsBiopsyProstate (@strVariable)= 1
      BEGIN
         -- which biopsy is the diagnostic biopsy?
         -- save date to check for PSAs within 3 weeks of biopsy
         IF @blnPreTx = 1
            IF @dteDate IS NOT NULL
            BEGIN
               SET @BiopsyDate = @dteDate
               -- diagnostic biopsy is first positive biopsy
               -- but if ther are later pre-tx grades, use them
               IF @strValue <> '' AND @strValue NOT IN('NEG','PIN','ASAP','Negative') --dbo.fnIsAbnormalBiopsyProstate (@strValue) = 1
                  IF @DxBxDate = @MISSING_DATE OR 
                                 (@strDataQuality='RR' AND @DxBxQuality <> 'RR' AND @DxBxDate = @dteDate) OR 
                                 (@strDataQuality IN('STD','REV') AND @DxBxQuality = 'OUT' AND @DxBxDate = @dteDate)
                  BEGIN
                     SET @DxBxType = @strVariable
                     SET @DxBxDate = @dteDate
                     SET @DxBxDateText = @strDate
                     SET @DxBxSummary = @strValue + ' (' + @strDataQuality + ')'
                     SET @DxBxQuality = @strDataQuality
	                  SET @DxBiopsyID = @intPrimaryKey --for paper form
                     -- move the clinical state forward
                     IF @ClinState < @LOCALIZED
                     BEGIN
                        SET @ClinState = @LOCALIZED
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                        IF @EForm=1
                           BEGIN
                              SET @ClinStateID = @intPrimaryKey
                              SET @ClinStateTable = @strTableName
                           END                           
                     END
                  END
            END         
      END   -- does not deal with post-curative treatment (RP, XRT) biopsies
      ELSE
      -- UICC/AJCC Clinical Tumor Stage
      IF @strVariable IN('UICC_92','UICC_97','UICC_02')
      BEGIN
         IF @blnPreTx = 1 AND @strValue <> ''
            If @strDataQuality = 'RR' OR @ClinStageQuality <> 'RR'
            BEGIN
               IF @dteDate IS NOT NULL
               BEGIN
	               SET @ClinStageDate = @dteDate            
	               SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
	               SET @ClinStageQuality = @strDataQuality
                  SELECT @ClinStageN = ClinStageN, @ClinStageM = ClinStageM
                  FROM ClinicalStages WHERE ClinicalStageId = @intPrimaryKey
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey --used for eform
	            END
	            ELSE IF @strValue > @ClinStageT
	            BEGIN
		            -- don't need to copy date b/c all nulls sort to top
         		   SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
	               SET @ClinStageQuality = @strDataQuality
                  SELECT @ClinStageN = ClinStageN, @ClinStageM = ClinStageM
                  FROM ClinicalStages WHERE ClinicalStageId = @intPrimaryKey
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey --used for eform
               END
            END       
      END
      ELSE
      BEGIN   
         -- Chemotherapy (NOT AN ELSE b/c of combination therapies)
         IF (@strVariable LIKE '%CHEMO%') AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @ChemoTxDate = @MISSING_DATE
                  SET @ChemoTxDate = @dteDate
   
            IF @blnPreTx = 1
               SET @NeoAdjChemoTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjChemoTx = @strVariable
               -- assumes any chemo after treatment indicates metastasis
               SET @MetsEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' ' 
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               IF @EForm=1
                  INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
               ELSE
                  INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
               SET @strOutput = ''   
         END
         -- Hormone Therapy (NOT AN ELSE b/c of combination therapies)
         IF ((@strVariable LIKE '%HORM%')
            OR (@strVariable = 'ORCH')
            OR (@strVariable ='Bilateral Orchiectomy')
            OR (@strVariable LIKE 'ORCH_BIL%')
            OR (@strVariable LIKE '%LHRH%')
            OR (@strVariable LIKE '%AA%')
            OR (@strVariable LIKE '%ESTROGEN%')
            OR (@strVariable LIKE '%PROGEST%'))
            AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @HormTxDate = @MISSING_DATE
                  SET @HormTxDate = @dteDate
            IF @blnPreTx = 1
               SET @NeoAdjHormTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjHormTx = @strVariable
               SET @HormEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' '  
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               --prevent the same record from being inserted again need a better way
               IF NOT EXISTS(SELECT SortDate FROM @SortTable WHERE SortDate=@dteDate AND VarString=@strOutput)
                  BEGIN
                     IF @EForm=1                  
                        INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
                     ELSE
                        INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)                        
                  END
               SET @strOutput = ''   
         END 
      END    
      --Testosterone
      IF @strVariable LIKE 'TEST%' 
      --look for castrate levels of testosterone
      BEGIN 
        IF ISNUMERIC(@strValue) = 1
           IF CAST(@strValue As float(24)) < @CASTRATE_TESTOSTERONE_LEVEL
              SET @Castrate = 1     
      END
      --check if castrated
      IF @strVariable IN ('ORCH_BIL','Bilateral Orchiectomy')
         SET @Castrate = 1
      --Diagnostics Imaging
      --these should be positive diagnostics for metastasis
      --what exactly is positive?
      --should it require specifying extent of disease?
      --should CT and MRI be confirmed by LN_BX?
      --should BS or PET be confirmed by BONE_BX?
      --add target latter so can use other scan types?
      IF @strVariable IN('BS','Bone Scan','BONE_BX','LN_BX') --('PET','PET Scan','XRAY','X-RAY','RADIOGRPH',)  
            --OR @strVariable LIKE 'CT%' OR @strVariable LIKE '%MRI%'--dbo.fnIsDiagnostic(@strVariable) = 1
      BEGIN
         IF @strValue LIKE 'POS%' OR 
            @strValue LIKE 'ABN_P%' OR 
            @strValue LIKE 'ABN_MAL%' OR
            @strValue='Abnormal Malignant' OR
            @strValue='Abnormal'	OR
            @strValue='Abnormal Prostate'--dbo.fnIsAbnormalDiagnostic(@strValue) = 1
            IF @ClinState < @NON_CASTRATE_METS
            BEGIN
               IF @Castrate = 1
                  BEGIN
                     SET @ClinState = @CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                  END
               ELSE
                  BEGIN
                     SET @ClinState = @NON_CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                  END
               IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
            END
      END
      ELSE
      -- Radiation Therapy
      IF @strVariable IN('XRT','EBRT','RT','COMBO','BRACHY','COMBO','RADIOISOTOPE','SEED'
                        ,'IMPLANT','Brachytherapy',
                        'External Beam','Radiation Therapy, Unspecified','External Beam, IMRT',
                        'High-Dose Rate Brachytherapy','External Beam, 3D Conventional',
                        'External Beam, 3D Conformal') --dbo.fnIsRadiationtherapy(@strVariable) = 1 OR dbo.fnIsBrachytherapy(@strVariable)= 1
      BEGIN
         IF @ClinState < @LOCALIZED
         BEGIN
            SET @ClinState = @LOCALIZED
            IF @EForm=1
               BEGIN
                  SET @ClinStateID = @intPrimaryKey
                  SET @ClinStateTable = @strTableName
               END   
            IF @dteDate IS NOT NULL
               BEGIN
                  SET @ClinStateDate = @dteDate
                  SET @ClinStateDteText = @strDate
               END
         END
         IF @blnPreTx = 1
            BEGIN 
               SET @NeoAdjRadTx = @strVariable
               IF @dteDate IS NOT NULL
                  SET @TxDate = @dteDate
            END
         SET @strOutput = @strOutput + @strDate + ' '
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         SET @strOutput = @strOutput + @strVariable + ' ' + @strValue
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''     
      END
      ELSE
      -- Other Medical Therapy
      IF @strVariable IN('BIO_TX','IMMUNO','CLIN_TRIAL','STEROID','OTHER','GENE_TX')
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' 
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         IF @strValue <> ''
            SET @strOutput = @strOutput +  @strValue
         ELSE
            SET @strOutput = @strOutput + @strVariable
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)            
         SET @strOutput = ''   
      END
      ELSE
      -- Extent of Disease
      IF @strVariable = 'EOD'
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' + @strVariable + ' ' + @strValue -- + @CharLineFeed
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''   
      END
      ELSE
      -- Radical Prostatectomy
      IF @strVariable LIKE 'R[RCPL]P' OR @strVariable LIKE '[RCPL]P' OR @strVariable LIKE 'Salv[RCPL]P' OR @strVariable='RALP' OR @strVariable = 'LP_CONV' --dbo.fnIsRadicalProstatectomy(@strVariable) = 1
      BEGIN
         SET @blnHadRP = 1
         IF @ClinState < @LOCALIZED
         BEGIN
           SET @ClinState = @LOCALIZED
           IF @EForm=1
              BEGIN
                 SET @ClinStateID = @intPrimaryKey
                 SET @ClinStateTable = @strTableName
              END   
           IF @dteDate IS NOT NULL
              BEGIN
                 SET @ClinStateDate = @dteDate
                 SET @ClinStateDteText = @strDate
              END                                         
         END
         IF @blnPreTx = 1 
            IF @dteDate IS NOT NULL
               SET @TxDate = @dteDate
         SET @strOutput = @strOutput + @strDate + ' ' + @strVariable + ' ' + @strValue -- + @CharLineFeed
         IF @EForm=1
            BEGIN
            	SET @strTableNames = 'ProstatectomyProc'
               SET @strPrimaryKeys = CAST(@intPrimaryKey as varchar(50))
               SET @strVarDelimited = '__'+ @strDate + ' ' + @strVariable + '|'
               IF @strValue <> ''
                  BEGIN
                     SELECT TOP 1 @ProstatePathId=ProstatectomyPath.PathologyId 
                     FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId=Pathology.ProcedureId
                                     INNER JOIN ProstatectomyPath ON Pathology.PathologyId=ProstatectomyPath.PathologyId
                     WHERE Procedures.ProcedureId=@intPrimaryKey
                     IF @ProstatePathId IS NOT NULL
                        BEGIN
                           SET @strTableNames = @strTableNames + ',ProstatectomyPath'
                           SET @strPrimaryKeys =  @strPrimaryKeys + ',' + CAST(@ProstatePathId as varchar(50))
                           SET @strVarDelimited = @strVarDelimited + '__' + @strValue + '|'
                        END
                     ELSE
                        SET @strVarDelimited = @strVarDelimited + '__' + @strValue + '|'

                     SELECT TOP 1 @PLNDProcId=Procedures.ProcedureId 
                     FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId=Pathology.ProcedureId
                     WHERE Procedures.OperatingRoomDetailId IN
                           (SELECT OperatingRoomDetailId FROM Procedures WHERE ProcedureId=@intPrimaryKey) AND 
                           Procedures.PatientId=@PatientId AND ProcName='PLND' AND PathResult IS NOT NULL
                     IF @PLNDProcId IS NOT NULL
                        BEGIN
                           SET @strTableNames = @strTableNames + ',Procedures'
                           SELECT @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@PLNDProcId as varchar(50))
                           IF @ProstatePathId IS NOT NULL
                              SET @strVarDelimited = REPLACE(@strVarDelimited,'LNI','|__LNI')
                        END
                  END
               INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,@strVarDelimited,@strTableNames,@strPrimaryKeys)
               SET @strTableNames = ''
               SET @strPrimaryKeys = ''
               SET @strVarDelimited = ''
            END
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''   
      END      
      ELSE
      -- Display all these other surgeries
      IF (@strVariable LIKE '%Orchiectomy') OR @strVariable IN('Nephrectomy','RPLND','Cystectomy')
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' + @strValue
         IF @EForm=1     
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE 
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''
      END
      ELSE
      -- Status    
      IF @strVariable = 'Status'
      BEGIN

      -- Extent of Disease
         IF @strValue IN('Localized','LCR','Local Recurrence')
            BEGIN
               IF @ClinState < @LOCALIZED                   BEGIN
                        SET @ClinState = @LOCALIZED
                        IF @EForm=1
                           BEGIN
                              SET @ClinStateID = @intPrimaryKey
                              SET @ClinStateTable = @strTableName
                           END   
                        IF @dteDate IS NOT NULL
                           BEGIN
                              SET @ClinStateDate = @dteDate
                              SET @ClinStateDteText = @strDate
                           END
                  END
            END
         ELSE
            IF @strValue IN('BCR','Biochemical Recurrence')
            BEGIN
               IF @Castrate = 1 AND @ClinState < @RISING_PSA_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_CASTRATE
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
               ELSE IF @ClinState < @RISING_PSA_NON_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_NON_CASTRATE
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         ELSE
            IF @strValue IN('RisingPSA_Castrate','Rising PSA Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('RisingPSA_NonCastrate','Rising PSA Non-Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_NON_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_NON_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsNonCastrate','Non-Castrate Mets','Clinical Mets Non-Castrate')
            BEGIN
               IF @ClinState < @NON_CASTRATE_METS
               BEGIN
                  SET @ClinState = @NON_CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsCastrate','Castrate Mets','Clinical Mets Castrate')
            BEGIN
               IF @ClinState < @CASTRATE_METS
               BEGIN
                  SET @ClinState = @CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('METS','Distant Metastasis')
            BEGIN
               IF @ClinState < @CASTRATE_METS AND @Castrate = 1
                  BEGIN
                     SET @ClinState = @CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
               ELSE IF @ClinState < @NON_CASTRATE_METS
                  BEGIN
                     SET @ClinState = @NON_CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         ELSE
            IF @strValue IN('DOD','DOC','DUC','Dead','Death from Prostate Cancer','Death from Other Cause',
                            'Death from Unknown Causes')
            BEGIN
               If @ClinState < @DEAD 
                  BEGIN
                     SET @ClinState = @DEAD
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         ELSE
            IF @strValue = 'Active Surveillance'
               BEGIN
                  IF @ActiveSurId IS NULL
                     BEGIN 
                        SELECT @ActiveSurId=StatusId
                        FROM Status 
                        WHERE Status = 'Active Surveillance' AND
                              StatusDisease IN('Prostate','Prostate Cancer') AND
                              StatusDate IS NOT NULL AND
                              StatusId = @intPrimaryKey

                        IF @ActiveSurId IS NOT NULL
                           BEGIN 
                              SET @strOutput = @strDate + ' Started ' + @strValue
                              IF @EForm=1
                                 INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
                              ELSE
                                 INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
                              SET @strOutput = ''
                           END
                     END
               END
      END
      --PRINT @strDate + ' ' + @strVariable + ' ' + @strValue + ' ' + @strDataQuality
      --SET @stoptime= GETDATE()
      --SET @strdebug = @strdebug + char(10) + @strVariable + ' ' + @stoptime --Cast to text
      --SELECT @stoptime - @starttime
      FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@intPrimaryKey,@strTableName
      --SET @starttime= GETDATE()
   END
   DEALLOCATE tables_cursor
   --PRINT @strdebug
END      
   
   -- assembles diagnosis date, stage, grade, pre tx psa line
   IF @EForm=1
      BEGIN
         IF @DxBxDate <> @MISSING_DATE
            BEGIN
               SET @strPatientHPI = @DxBxDateText + ' '
            	SET @strTableNames = 'Procedures'
               SET @strPrimaryKeys = CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = '__' + @DxBxDateText + '|'
            END 
         IF @ClinStageT <> ''
            BEGIN
               SET @strPatientHPI = @strPatientHPI + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ') '
               SET @strTableNames = @strTableNames + ',ClinicalStages'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@ClinStageID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ')|'
            END
         IF @DxBxType <> ''
            BEGIN 
               SET @strPatientHPI =  @strPatientHPI + @DxBxType + ' ' + @DxBxSummary + ' '
               SET @strTableNames = @strTableNames + ',Procedures'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @DxBxType + ' ' + @DxBxSummary + '|'
            END
         IF @PreTxPSA <> @MISSING_NUMBER AND @blnHadRP =1
            BEGIN
               SET @strPatientHPI = @strPatientHPI + ' PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + ' '
               SET @strTableNames = @strTableNames + ',LabTests'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@PreTxPSAID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + '|'
            END
         --strip leading comma from TableNames and PrimaryKeys concatenation
         IF LEFT(@strTableNames,1) = ','
            SET @strTableNames = RIGHT(@strTableNames,LEN(@strTableNames)-1)
         IF LEFT(@strPrimaryKeys,1) = ','
            SET @strPrimaryKeys = RIGHT(@strPrimaryKeys,LEN(@strPrimaryKeys)-1)
         INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@strPrimaryKeys)
         SET @strTableNames = ''
         SET @strPrimaryKeys = ''
         SET @strVarDelimited = ''
      END 
   ELSE
      BEGIN
         IF @DxBxDate <> @MISSING_DATE
            SET @strPatientHPI = @DxBxDateText + ' '
         IF @ClinStageT <> ''
            SET @strPatientHPI = @strPatientHPI + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ') '
         IF @DxBxType <> ''
            SET @strPatientHPI =  @strPatientHPI + @DxBxType + ' ' + @DxBxSummary + ' ' 
         IF @PreTxPSA <> @MISSING_NUMBER AND @blnHadRP =1
            SET @strPatientHPI = @strPatientHPI + ' PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + ' '
         INSERT @SortTable (SortDate,VarString) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI)
      END
   SET @strPatientHPI = ''   -- make sure this is set to '' by default

   --adds pre diagnosis biopsy psa to HPI
   IF @EForm=1
      INSERT INTO @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys)
      SELECT TOP 1 SortDate, VarDate + ' PreDx Biopsy PSA: ' + VarValue,'__'+VarDate + ' PreDx Biopsy PSA: ' + VarValue+'|',TableName,PrimaryKey
      FROM @ChronoTable 
      WHERE TableName='LabTests' AND VarName IN('PSA','PSAUS') AND VarValue<>'' AND SortDate<=@DxBxDate
      ORDER BY SortDate DESC
   ELSE
      INSERT INTO  @SortTable (SortDate,VarString)
      SELECT TOP 1 SortDate, VarDate + ' PreDx Biopsy PSA: ' + VarValue
      FROM @ChronoTable 
      WHERE TableName='LabTests' AND VarName IN('PSA','PSAUS') AND VarValue<>'' AND SortDate<=@DxBxDate
      ORDER BY SortDate DESC

   -- assemble clinical state / status line
   IF @ClinStateDate <> @MISSING_DATE
      BEGIN
         SET @strPatientHPI = @strPatientHPI + @ClinStateDteText + ' '
         -- decode numeric clinical states back into text for display
         --IF @ClinState = @NO_PROSTATE_CANCER_DIAGNOSIS
         --   SET @strPatientHPI = @strPatientHPI + '' --Removed 'No Prostate Cancer Diagnosis '
         IF @ClinState = @LOCALIZED
            SET @strPatientHPI = @strPatientHPI + 'Localized'
         IF @ClinState = @RISING_PSA_NON_CASTRATE
            SET @strPatientHPI = @strPatientHPI + 'Rising PSA Non-Castrate'
         IF @ClinState = @RISING_PSA_CASTRATE
            SET @strPatientHPI = @strPatientHPI + 'Rising PSA Castrate'
         IF @ClinState = @NON_CASTRATE_METS
            SET @strPatientHPI = @strPatientHPI + 'Non-Castrate Mets'
         IF @ClinState = @CASTRATE_METS
            SET @strPatientHPI = @strPatientHPI + 'Castrate Mets'
         IF @ClinState = @DEAD
            SET @strPatientHPI = @strPatientHPI + 'Dead'
         IF @EForm=1
            BEGIN
               SET @strVarDelimited = '__' + @strPatientHPI + '|'
               SET @strTableNames = @ClinStateTable
               SET @strPrimaryKeys = CAST(@ClinstateID as varchar(50))
               INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@strPrimaryKeys)
               SET @strTableNames = ''
               SET @strPrimaryKeys = ''
               SET @strVarDelimited = ''
            END
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI)
      END     
   SET @strPatientHPI = ''   
  
   IF @EForm=1
      BEGIN
         SELECT VarString AS PatientHPI,VarDelimited AS PatientHPIDelimited,TableNames,PrimaryKeys
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   ELSE
      BEGIN
         SELECT VarString AS PatientHPI 
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   --SELECT * FROM @ChronoTable
  
   SELECT @DxBiopsyID AS DxBiopsyId, NULL AS PreRPNomo,NULL AS PreRPError, 
          NULL AS PreXRTNomo, NULL AS PreXRTError, NULL AS PreBrachyNomo,
          NULL AS PreBrachyError,NULL AS PostRP2yrNomo,NULL AS PostRP5yrNomo,
          NULL AS PostRP7yrNomo,NULL PostRPError

   --Retired, used to view the parameters used to calculate nomogram scores
   IF @NomogramValues = 1 
      SELECT NULL AS PreTxPSA ,NULL AS ClinStage, NULL AS ClinStageSystem, 
             NULL AS ClinStage92, NULL AS ClinStage97, NULL AS BxGG1, 
             NULL AS BxGG2,NULL AS NeoAdjHormTx,NULL AS NeoAdjRadTx,
             @DxBiopsyID AS DxBiopsyId,NULL AS BxGGS, NULL AS XRTDose,NULL AS RP_GGS,
             NULL as RP_ECE,NULL AS RP_MarginStatus,NULL AS RP_SVI,NULL AS RP_LNI
GO

--25ModifyTablePatientProtocols.sql
GO
--resize column
ALTER TABLE AuditLog_PatientProtocols ALTER COLUMN PtProtocolStudyId varchar(50)
ALTER TABLE PatientProtocols ALTER COLUMN PtProtocolStudyId varchar(50)
GO


--26ModifyspGetPatientHPIKidney.sql
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[spGetPatientHPIKidney]
   @PatientId int = NULL,
   @Rowcount int = NULL OUTPUT
AS
SET NOCOUNT ON
--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

/*
SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'

DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate     datetime NULL,
   VarString    varchar(255) NULL
   )
*/
DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarSummary
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarSummary   varchar(1000) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   TableName    varchar(50) NULL,
   PrimaryKey   int NOT NULL,
   ExtraInfo    varchar(500) NULL,
   VarStopDate  varchar(50) NULL
   )

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT MedTxDateText, 'Systemic Therapy: ' + MedTxType + ':', LTRIM(ISNULL(MedTxAgent,'')), MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId
FROM MedicalTherapy
WHERE MedicalTherapy.PatientId = @PatientId AND
      MedTxType IN('Chemo','Immuno','Bio_Tx')

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT MedTxDateText, MedTxType , LTRIM(ISNULL(': ' + MedTxAgent,'')), MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId
FROM MedicalTherapy
WHERE MedicalTherapy.PatientId = @PatientId AND
      MedTxType NOT IN('Chemo','Immuno','Bio_Tx')

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT RadTxDateText, 'Radiation Therapy: ' + ISNULL(RadTxType,'') + ':' , ISNULL(RadTxTarget,''), RadTxQuality, RadTxDate,RadTxStopDateText, 'RadiationTherapy', RadiationTherapyId
FROM RadiationTherapy
WHERE (RadiationTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT TOP 1 StatusDateText, '', Status  + ISNULL(': ' + StatusNotes,''), StatusQuality, StatusDate, 'Status', StatusId
FROM Status
WHERE Status.PatientId = @PatientId AND Status = 'Distant Metastasis'
ORDER BY StatusDate ASC 

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT TOP 1 StatusDateText, '', Status  + ISNULL(': ' + StatusNotes,''), StatusQuality, StatusDate, 'Status', StatusId
FROM Status
WHERE Status.PatientId = @PatientId AND Status = 'Local Recurrence'
ORDER BY StatusDate ASC 

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT TOP 1 StatusDateText, '', Status  + ISNULL(': ' + StatusNotes,''), StatusQuality, StatusDate, 'Status', StatusId
FROM Status
WHERE Status.PatientId = @PatientId AND 
      StatusDisease In('Renal Cell Carcinoma','Kidney','Kidney Cancer','Renal Cancer','Renal Pelvis Cancer')  AND
      StatusId NOT IN (SELECT PrimaryKey FROM @ChronoTable WHERE TableName='Status')
ORDER BY StatusDate DESC 

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,ExtraInfo)
SELECT OpDateText, '' VarName, ISNULL(OpCaseSurgeon + ' ','') + LTRIM(ISNULL(ProcSide + ' ','') 
       + ISNULL(ProcName,'Nephrectomy, unspecified')  + ISNULL(', Intra-Op Complications = ' + ProcComplication,'') 
       + ISNULL(', Histology = ' + PathHistology,'') + ISNULL(', Histology2 = ' + PathHistology2,'') 
       + ISNULL(', Tumor Size = ' + PathCancerMaxDim + ' cm','') + ISNULL(', TNM-Stage = ' + PathStageT,'') 
       + ISNULL(', ' + PathStageM,'') + + ISNULL(' (' + PathStageSystem + ')','')  
       ) VarSummary, OpQuality, OpDate, 'Procedures' TableName, Procedures.ProcedureId PrimaryKey,
       CASE WHEN (NephrectomyProc.ProcedureId IS NOT NULL OR Pathology.PathologyId IS NOT NULL )  
            THEN 'ProcNephrectomyDetails' 
            ELSE 'ProcNephrectomyNoDetails' 
       END ExtraInfo --The marks dupes
FROM OperatingRoomDetails INNER JOIN Procedures ON OperatingRoomDetails.OperatingRoomDetailId = Procedures.OperatingRoomDetailId
                          LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                          LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId AND
                                                                 PathologyStageGradeId = (SELECT TOP 1 PathologyStageGradeId 
                                                                                          FROM PathologyStageGrade
                                                                                          WHERE PathologyId = Pathology.PathologyId)
                          LEFT OUTER JOIN NephrectomyPath ON Pathology.PathologyId = NephrectomyPath.PathologyId
                          LEFT OUTER JOIN NephrectomyProc ON Procedures.ProcedureId = NephrectomyProc.ProcedureId
WHERE Procedures.PatientId = @PatientId AND 
      ProcName IN('Nephrectomy','Partial Nephrectomy','Laparoscopic Nephroureterectomy','Partial for Horshoe Kidney','Laparoscopic Partial Nephrectomy','Nephroureterectomy','Laparoscopic Radical Nephrectomy','Radical Nephrectomy','Exploratory Laparotomy', 'Robotic Partial Nephrectomy', 'Robotic Radical Nephrectomy') 

/*
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,ISNULL(ProcName + ',',''), ISNULL('Result = ' + PathResult,'') + ISNULL(', Histology = ' + PathHistology,'') + ISNULL(', Histology2 = ' + PathHistology2,''), PathQuality, ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
WHERE (Procedures.PatientId = @PatientId) AND 
      ProcName IN('RLND','Thoracotomy','Lobectomy','Craniotomy','Adrenalectomy','Vertebral Body Resection','Hepatic Resection','Distal Pancreatectomy','Lobectomy','Wedge Resection','Bronchoscopy','Bone Resection','Renal Bed Resection','RPLND')
*/

--procedures not in the current list
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, 
       CASE WHEN ProcName LIKE '%Biopsy%' THEN ISNULL(ProcSite + ' ','') ELSE '' END
       + ISNULL(ProcApproach + ' ','') +  LTRIM(ISNULL(RIGHT(PathStageSystem,2),'') + ' '  + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ISNULL(PathStageM,'') + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathResult,'')), ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN 
                (SELECT PrimaryKey,VarName FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT VarDate,VarName, ISNULL(VarExtraInfo,'') + ISNULL(' ' + VarValue,''),Quality,SortDate,
       (SELECT TOP 1 PtProtocolStatusDateText
        FROM PatientProtocolStatus 
        WHERE PatientProtocolId = PatProtId AND PtProtocolStatus = 'Off Study') VarStopDate,
       TableName,PrimaryKey
FROM 
   (
   SELECT dbo.fnGetPtProtocolStatusDate(PatientProtocolId,'DateText') VarDate,'Protocol' VarName,
          ISNULL(dbo.fnGetPtProtocolStatusLast(PatientProtocolId),PtProtocolStatus) VarValue,PtProtocolQuality Quality,
          CAST(dbo.fnGetPtProtocolStatusDate(PatientProtocolId,'Date') AS datetime) SortDate,
          'PatientProtocols' TableName,PatientProtocolId PrimaryKey,
          ProtocolNum VarExtraInfo,
          PatientProtocolId PatProtId
   FROM PatientProtocols INNER JOIN Protocols ON PatientProtocols.ProtocolId = Protocols.ProtocolId
   WHERE (PatientId = @PatientId) 
   ) a LEFT OUTER JOIN 
   (
   SELECT c.LkpCode 
   FROM LookupCodeAttributes a INNER JOIN
        LookupAttributes b ON a.AttributeId=b.AttributeId INNER JOIN
        LookupCodes c ON a.LookupCodeId=c.LookupCodeId
   WHERE AttributeName = 'ProtocolScreening' AND
         AttributeValue = 'HPI'
   ) b ON a.VarValue LIKE ('%' + b.LkpCode + '%')
WHERE b.LkpCode IS NULL

--Clean up variables
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarSummary = ''
WHERE VarSummary IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL
UPDATE @ChronoTable 
   SET ExtraInfo = ''
WHERE ExtraInfo IS NULL

--Remove Dupe nephrectomy records
DELETE @ChronoTable FROM @ChronoTable a INNER JOIN 
                           (
                           SELECT SortDate FROM @ChronoTable
                           WHERE TableName='Procedures' AND ExtraInfo = 'ProcNephrectomyDetails'
                           ) b ON a.SortDate = b.SortDate
WHERE TableName='Procedures' AND ExtraInfo='ProcNephrectomyNoDetails' 

--More dupe procedures removed
SELECT PatientHPI,TableName,PrimaryKey
FROM 
   (
   SELECT DISTINCT LTRIM(VarDate 
               + CASE WHEN VarStopDate IS NULL THEN ' ' ELSE ' - ' + VarStopDate + ' ' END 
               + CASE WHEN VarName<>'' THEN VarName + ' ' ELSE '' END 
               + VarSummary) AS PatientHPI,SortDate,TableName,PrimaryKey  --,VarName,VarDate
   FROM @ChronoTable
   ) a
ORDER BY SortDate
SET @Rowcount = @@ROWCOUNT
GO

--27ModifyTablePancreasProc.sql
GO
--resize columns
ALTER TABLE AuditLog_PancreasProc ALTER COLUMN ProcPancreaticAnast varchar(255)
ALTER TABLE AuditLog_PancreasProc ALTER COLUMN ProcBiliaryAnast varchar(255)
ALTER TABLE AuditLog_PancreasProc ALTER COLUMN ProcFascialClosure varchar(255)
ALTER TABLE PancreasProc ALTER COLUMN ProcPancreaticAnast varchar(255)
ALTER TABLE PancreasProc ALTER COLUMN ProcBiliaryAnast varchar(255)
ALTER TABLE PancreasProc ALTER COLUMN ProcFascialClosure varchar(255)
GO

--28CreateTableGynProc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.AuditLog_GynProc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
   ProcDrains varchar(50) NULL,
   ProcLymphNodeMapping varchar(1000) NULL,
   ProcDistensionMedia varchar(50) NULL,
   ProcDistensionMediaInput varchar(50) NULL,
   ProcDistensionMediaOutput varchar(50) NULL,
   ProcEntirePolypRemoved varchar(50) NULL,
   ProcIncisionType varchar(1000) NULL,
   ProcL_InguinalExtent varchar(50) NULL,
   ProcR_InguinalExtent varchar(50) NULL,
   ProcOtherFascialClosureSutureOptions varchar(255) NULL,
   ProcFascialClosureMethod varchar(50) NULL,
   ProcFascialClosureSutureOptions varchar(50) NULL,
   ProcUterusAdnexa varchar(50) NULL,
   ProcPeritonealSurface varchar(50) NULL,
   ProcUpperAbdominal varchar(50) NULL,
   ProcHemostasis varchar(255) NULL,
   ProcHerniaRepairMesh varchar(50) NULL,
   ProcHerniaType varchar(50) NULL,
   ProcHerniaIncisionEvent varchar(50) NULL,
   ProcHeparinSaline_IP_PortTest varchar(50) NULL,
   ProcLocFlosealPlacement varchar(255) NULL,
   ProcLocLymphazurinIntraOpInjection varchar(255) NULL,
   ProcLocOtherMaterialPlacement varchar(255) NULL,
   ProcLocSeprafilmPlacement varchar(255) NULL,
   ProcLeepLoopSize varchar(50) NULL,
   ProcMaterialUsed varchar(50) NULL,
   ProcMethodOfEntry varchar(50) NULL,
   ProcNumPorts varchar(50) NULL,
   ProcPreOpTechnetiumInjection varchar(50) NULL,
   ProcConversionReason varchar(255) NULL,
   ProcResectoscopeUsed varchar(50) NULL,
   ProcL_SaphonousVeinTransect varchar(50) NULL,
   ProcR_SaphonousVeinTransect varchar(50) NULL,
   ProcSharpCurettage varchar(50) NULL,
   ProcSkinClosure varchar(255) NULL,
   ProcSubcutaneousClosureMethod varchar(50) NULL,
   ProcSubcutaneousClosureSuture varchar(255) NULL,
   ProcSuctionCurettage varchar(50) NULL,
   ProcSutureType varchar(50) NULL,
   ProcUltraSoundGuidance varchar(50) NULL,
   ProcUterineManipulatorType varchar(50) NULL,
   ProcUterineManipulator varchar(50) NULL,
   ProcUterusSound varchar(50) NULL,
   ProcLysisOfAdhesionTime varchar(50) NULL,
   ProcVaginalCuffClosureMethod varchar(50) NULL,
   ProcVaginalCuffClosureSuture varchar(255) NULL,
   ProcDenseAdhesionReason varchar(255) NULL,
   ProcFindingNotes varchar(2000) NULL,
   ProcAdditionalProcedureNotes varchar(2000) NULL,
   EnteredBy varchar(50) NULL,
   EnteredTime datetime NULL,
   UpdatedBy varchar(50) NULL,
   UpdatedTime datetime NULL,
	)  ON [PRIMARY]
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.GynProc
	(
	ProcedureId int NOT NULL,
   ProcDrains varchar(50) NULL,
   ProcLymphNodeMapping varchar(1000) NULL,
   ProcDistensionMedia varchar(50) NULL,
   ProcDistensionMediaInput varchar(50) NULL,
   ProcDistensionMediaOutput varchar(50) NULL,
   ProcEntirePolypRemoved varchar(50) NULL,
   ProcIncisionType varchar(1000) NULL,
   ProcL_InguinalExtent varchar(50) NULL,
   ProcR_InguinalExtent varchar(50) NULL,
   ProcOtherFascialClosureSutureOptions varchar(255) NULL,
   ProcFascialClosureMethod varchar(50) NULL,
   ProcFascialClosureSutureOptions varchar(50) NULL,
   ProcUterusAdnexa varchar(50) NULL,
   ProcPeritonealSurface varchar(50) NULL,
   ProcUpperAbdominal varchar(50) NULL,
   ProcHemostasis varchar(255) NULL,
   ProcHerniaRepairMesh varchar(50) NULL,
   ProcHerniaType varchar(50) NULL,
   ProcHerniaIncisionEvent varchar(50) NULL,
   ProcHeparinSaline_IP_PortTest varchar(50) NULL,
   ProcLocFlosealPlacement varchar(255) NULL,
   ProcLocLymphazurinIntraOpInjection varchar(255) NULL,
   ProcLocOtherMaterialPlacement varchar(255) NULL,
   ProcLocSeprafilmPlacement varchar(255) NULL,
   ProcLeepLoopSize varchar(50) NULL,
   ProcMaterialUsed varchar(50) NULL,
   ProcMethodOfEntry varchar(50) NULL,
   ProcNumPorts varchar(50) NULL,
   ProcPreOpTechnetiumInjection varchar(50) NULL,
   ProcConversionReason varchar(255) NULL,
   ProcResectoscopeUsed varchar(50) NULL,
   ProcL_SaphonousVeinTransect varchar(50) NULL,
   ProcR_SaphonousVeinTransect varchar(50) NULL,
   ProcSharpCurettage varchar(50) NULL,
   ProcSkinClosure varchar(255) NULL,
   ProcSubcutaneousClosureMethod varchar(50) NULL,
   ProcSubcutaneousClosureSuture varchar(255) NULL,
   ProcSuctionCurettage varchar(50) NULL,
   ProcSutureType varchar(50) NULL,
   ProcUltraSoundGuidance varchar(50) NULL,
   ProcUterineManipulatorType varchar(50) NULL,
   ProcUterineManipulator varchar(50) NULL,
   ProcUterusSound varchar(50) NULL,
   ProcLysisOfAdhesionTime varchar(50) NULL,
   ProcVaginalCuffClosureMethod varchar(50) NULL,
   ProcVaginalCuffClosureSuture varchar(255) NULL,
   ProcDenseAdhesionReason varchar(255) NULL,
   ProcFindingNotes varchar(2000) NULL,
   ProcAdditionalProcedureNotes varchar(2000) NULL,
   EnteredBy varchar(50) NOT NULL,
   EnteredTime datetime NOT NULL,
   UpdatedBy varchar(50) NULL,
   UpdatedTime datetime NULL,
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.GynProc ADD CONSTRAINT
	PK_GynProc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.GynProc ADD CONSTRAINT
	FK_GynProc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
GO
COMMIT
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgAuditGynProc_UD]
ON [dbo].[GynProc] FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_GynProc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_GynProc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
EXEC sp_settriggerorder @triggername=N'[dbo].[trgAuditGynProc_UD]', @order=N'Last', @stmttype=N'UPDATE'
GO

--29CreateTableGynDebulkingProc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.AuditLog_GynDebulkingProc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
   ProcPercentTumorRemoved varchar(50) NULL,
   ProcAscitesAmount varchar(50) NULL,
   ProcDebulkingType varchar(50) NULL,
   ProcDebulkingStatus varchar(50) NULL,
   ProcDebulkingDetails varchar(2000) NULL,
   ProcIntraOpHIPEC varchar(50) NULL,
   ProcActualNumMassRemain varchar(50) NULL,
   ProcLocLargestMassRemain varchar(50) NULL,
   ProcLargestMassRemainMaxDiam varchar(50) NULL,
   ProcNumOfMassRemain varchar(50) NULL,
   ProcLocLargestMassFound varchar(50) NULL,
   ProcLargestMassFoundMaxDiam varchar(50) NULL,
   ProcSuboptimalReason varchar(255) NULL,
   EnteredBy varchar(50) NULL,
   EnteredTime datetime NULL,
   UpdatedBy varchar(50) NULL,
   UpdatedTime datetime NULL,
	)  ON [PRIMARY]
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.GynDebulkingProc
	(
	ProcedureId int NOT NULL,
   ProcPercentTumorRemoved varchar(50) NULL,
   ProcAscitesAmount varchar(50) NULL,
   ProcDebulkingType varchar(50) NULL,
   ProcDebulkingStatus varchar(50) NULL,
   ProcDebulkingDetails varchar(2000) NULL,
   ProcIntraOpHIPEC varchar(50) NULL,
   ProcActualNumMassRemain varchar(50) NULL,
   ProcLocLargestMassRemain varchar(50) NULL,
   ProcLargestMassRemainMaxDiam varchar(50) NULL,
   ProcNumOfMassRemain varchar(50) NULL,
   ProcLocLargestMassFound varchar(50) NULL,
   ProcLargestMassFoundMaxDiam varchar(50) NULL,
   ProcSuboptimalReason varchar(255) NULL,
   EnteredBy varchar(50) NOT NULL,
   EnteredTime datetime NOT NULL,
   UpdatedBy varchar(50) NULL,
   UpdatedTime datetime NULL,
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.GynDebulkingProc ADD CONSTRAINT
	PK_GynDebulkingProc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.GynDebulkingProc ADD CONSTRAINT
	FK_GynDebulkingProc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
GO
COMMIT
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgAuditGynDebulkingProc_UD]
ON [dbo].[GynDebulkingProc] FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_GynDebulkingProc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_GynDebulkingProc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
EXEC sp_settriggerorder @triggername=N'[dbo].[trgAuditGynDebulkingProc_UD]', @order=N'Last', @stmttype=N'UPDATE'
GO

--30CreateTableGynGI_UpperAbdominalProc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.AuditLog_GynGI_UpperAbdominalProc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
   ProcAirLeakTest varchar(50) NULL,
   ProcSmallBowelAnastChecked varchar(255) NULL,
   ProcHemicolectomyAnastMethod varchar(50) NULL,
   ProcHemicolectomyAnastType varchar(50) NULL,
   ProcMesentericDefect varchar(50) NULL,
   ProcLAR_Details varchar(1000) NULL,
   ProcLenSmallBowelRemaining varchar(50) NULL,
   ProcL_ColonManeuverAnast varchar(255) NULL,
   ProcMaxSizeDiaphragmRemoved varchar(50) NULL,
   ProcMethodOfAnast varchar(50) NULL,
   ProcL_PositivePressureBubbleResult varchar(50) NULL,
   ProcR_PositivePressureBubbleResult varchar(50) NULL,
   ProcProximalIntestinalTransection varchar(50) NULL,
   ProcReconType varchar(50) NULL,
   ProcAirLeakTestResult varchar(50) NULL,
   ProcStaplerSize varchar(50) NULL,
   ProcChestTubeSize varchar(50) NULL,
   ProcStaplerType varchar(50) NULL,
   ProcL_DiaphragmResectionExtent varchar(50) NULL,
   ProcR_DiaphragmResectionExtent varchar(50) NULL,
   ProcR_DiaphragmSutureType varchar(50) NULL,
   ProcL_DiaphragmSutureType varchar(50) NULL,
   ProcDiaphragmClosedMeshRight varchar(50) NULL,
   ProcDiaphragmClosedMeshLeft varchar(50) NULL,
   ProcProximalIntestinalTtransection varchar(50) NULL,
   ProcLocAnastAnalVerge varchar(50) NULL,
   ProcSatisfactoryAnast varchar(255) NULL,
   ProcLenFirstResectSmallBowel varchar(50) NULL,
   ProcLenSecondResectSmallBowel varchar(50) NULL,
   ProcStomachWallClosure varchar(50) NULL,
   ProcStomClosureMethod varchar(50) NULL,
   ProcStomaDiversionType varchar(50) NULL,
   ProcRemnantClosure varchar(50) NULL,
   EnteredBy varchar(50) NULL,
   EnteredTime datetime NULL,
   UpdatedBy varchar(50) NULL,
   UpdatedTime datetime NULL,
	)  ON [PRIMARY]
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.GynGI_UpperAbdominalProc
	(
	ProcedureId int NOT NULL,
   ProcAirLeakTest varchar(50) NULL,
   ProcSmallBowelAnastChecked varchar(255) NULL,
   ProcHemicolectomyAnastMethod varchar(50) NULL,
   ProcHemicolectomyAnastType varchar(50) NULL,
   ProcMesentericDefect varchar(50) NULL,
   ProcLAR_Details varchar(1000) NULL,
   ProcLenSmallBowelRemaining varchar(50) NULL,
   ProcL_ColonManeuverAnast varchar(255) NULL,
   ProcMaxSizeDiaphragmRemoved varchar(50) NULL,
   ProcMethodOfAnast varchar(50) NULL,
   ProcL_PositivePressureBubbleResult varchar(50) NULL,
   ProcR_PositivePressureBubbleResult varchar(50) NULL,
   ProcProximalIntestinalTransection varchar(50) NULL,
   ProcReconType varchar(50) NULL,
   ProcAirLeakTestResult varchar(50) NULL,
   ProcStaplerSize varchar(50) NULL,
   ProcChestTubeSize varchar(50) NULL,
   ProcStaplerType varchar(50) NULL,
   ProcL_DiaphragmResectionExtent varchar(50) NULL,
   ProcR_DiaphragmResectionExtent varchar(50) NULL,
   ProcR_DiaphragmSutureType varchar(50) NULL,
   ProcL_DiaphragmSutureType varchar(50) NULL,
   ProcDiaphragmClosedMeshRight varchar(50) NULL,
   ProcDiaphragmClosedMeshLeft varchar(50) NULL,
   ProcProximalIntestinalTtransection varchar(50) NULL,
   ProcLocAnastAnalVerge varchar(50) NULL,
   ProcSatisfactoryAnast varchar(255) NULL,
   ProcLenFirstResectSmallBowel varchar(50) NULL,
   ProcLenSecondResectSmallBowel varchar(50) NULL,
   ProcStomachWallClosure varchar(50) NULL,
   ProcStomClosureMethod varchar(50) NULL,
   ProcStomaDiversionType varchar(50) NULL,
   ProcRemnantClosure varchar(50) NULL,
   EnteredBy varchar(50) NOT NULL,
   EnteredTime datetime NOT NULL,
   UpdatedBy varchar(50) NULL,
   UpdatedTime datetime NULL,
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.GynGI_UpperAbdominalProc ADD CONSTRAINT
	PK_GynGI_UpperAbdominalProc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.GynGI_UpperAbdominalProc ADD CONSTRAINT
	FK_GynGI_UpperAbdominalProc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
GO
COMMIT
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgAuditGynGI_UpperAbdominalProc_UD]
ON [dbo].[GynGI_UpperAbdominalProc] FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_GynGI_UpperAbdominalProc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_GynGI_UpperAbdominalProc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
EXEC sp_settriggerorder @triggername=N'[dbo].[trgAuditGynGI_UpperAbdominalProc_UD]', @order=N'Last', @stmttype=N'UPDATE'
GO

--31ModifyfnGetLNI.sql
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER FUNCTION [dbo].[fnGetLNI]
(
@OperatingRoomDetailId int=NULL,
@DataQuality varchar(50)=NULL
)
RETURNS varchar (50)
AS 
BEGIN 
	DECLARE @strReturn varchar(50)
   DECLARE @QualityExists bit

   SET @QualityExists = 0

   --Test if the row and path quality combo exists
   SELECT TOP 1 @QualityExists = 1
	FROM Pathology
	WHERE OperatingRoomDetailId = @OperatingRoomDetailId AND 
         PathSpecimenType='PLND' AND
         ISNULL(PathQuality,'') = ISNULL(@DataQuality,'')

   IF @QualityExists = 1
	   SELECT TOP 1 @strReturn = PathResult 
	   FROM Pathology
	   WHERE OperatingRoomDetailId = @OperatingRoomDetailId AND 
            PathSpecimenType='PLND' AND
            ISNULL(PathQuality,'') = ISNULL(@DataQuality,'')
      ORDER BY PathologyId DESC

   IF @QualityExists = 0
	   SELECT TOP 1 @strReturn = PathResult 
	   FROM Pathology
	   WHERE OperatingRoomDetailId = @OperatingRoomDetailId AND 
            PathSpecimenType='PLND'
      ORDER BY PathologyId DESC
	RETURN (@strReturn)
END
GO

--32ModifyfnGetNodeRatio.sql
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER FUNCTION [dbo].[fnGetNodeRatio]
(
@OperatingRoomDetailId int=NULL,
@DataQuality varchar(50)=NULL
)
RETURNS varchar (50)
AS 
BEGIN 
   DECLARE @strReturn varchar(50)
   DECLARE @strPosNodes varchar(10)
   DECLARE @strNumNodes varchar(10)
   DECLARE @QualityExists bit

   SET @QualityExists = 0

   --Test if the row and path quality combo exists
   SELECT TOP 1 @QualityExists = 1
   FROM NodePathFinding INNER JOIN Pathology ON NodePathFinding.PathologyId = Pathology.PathologyId
   WHERE OperatingRoomDetailId = @OperatingRoomDetailId AND 
         ISNULL(PathQuality,'') = ISNULL(@DataQuality,'')

   IF @QualityExists = 1 
      BEGIN

      SELECT @strPosNodes=SUM(CAST(PathFindPosNodes AS INT))
      FROM NodePathFinding INNER JOIN Pathology ON NodePathFinding.PathologyId = Pathology.PathologyId
      WHERE OperatingRoomDetailId = @OperatingRoomDetailId AND 
            ISNULL(PathQuality,'') = ISNULL(@DataQuality,'') AND
            (PathFindPosNodes NOT LIKE '%.%' AND PathFindPosNodes NOT LIKE '%,%' AND ISNUMERIC(PathFindPosNodes)=1)
      GROUP BY OperatingRoomDetailId

      SELECT @strNumNodes=SUM(CAST(PathFindNumNodes AS INT))
      FROM NodePathFinding INNER JOIN Pathology ON NodePathFinding.PathologyId = Pathology.PathologyId
      WHERE OperatingRoomDetailId = @OperatingRoomDetailId AND 
            ISNULL(PathQuality,'') = ISNULL(@DataQuality,'') AND
            (PathFindNumNodes NOT LIKE '%.%' AND PathFindNumNodes NOT LIKE '%,%' AND ISNUMERIC(PathFindNumNodes)=1)
      GROUP BY OperatingRoomDetailId

      END

   IF @QualityExists = 0
      BEGIN

      SELECT @strPosNodes=SUM(CAST(PathFindPosNodes AS INT))
      FROM NodePathFinding INNER JOIN Pathology ON NodePathFinding.PathologyId = Pathology.PathologyId
      WHERE OperatingRoomDetailId = @OperatingRoomDetailId AND 
            (PathFindPosNodes NOT LIKE '%.%' AND PathFindPosNodes NOT LIKE '%,%' AND ISNUMERIC(PathFindPosNodes)=1)
      GROUP BY OperatingRoomDetailId   

      SELECT @strNumNodes=SUM(CAST(PathFindNumNodes AS INT))
      FROM NodePathFinding INNER JOIN Pathology ON NodePathFinding.PathologyId = Pathology.PathologyId
      WHERE OperatingRoomDetailId = @OperatingRoomDetailId AND 
            (PathFindNumNodes NOT LIKE '%.%' AND PathFindNumNodes NOT LIKE '%,%' AND ISNUMERIC(PathFindNumNodes)=1)
      GROUP BY OperatingRoomDetailId

      END

   SET @strReturn = ISNULL(@strPosNodes,'') + '/' + ISNULL(@strNumNodes,'')
   RETURN (@strReturn)
END
GO

--33ModifyfnSummaryRP.sql
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER FUNCTION [dbo].[fnSummaryRP]
(
@varRP_GG1 varchar(50)=NULL, 
@varRP_GG2 varchar(50)=NULL,
@varRP_GGS varchar(50)=NULL,
@varRP_MarginStatus varchar(50)=NULL,
@varRP_ECE varchar(50)=NULL,
@varRP_SVI varchar(50)=NULL,
@OperatingRoomDetailId int=NULL,
@DataQuality varchar(50)=NULL
)
RETURNS varchar (50)
AS 
BEGIN 
	DECLARE @varRP_Summary varchar(50)
	DECLARE @varRP_LNI varchar(50)
	SET @varRP_LNI=dbo.fnGetLNI(@OperatingRoomDetailId,@DataQuality)
	IF ISNUMERIC(@varRP_GG1) = 1  AND ISNUMERIC(@varRP_GG2) = 1
		SET @varRP_Summary = @varRP_GG1 + '+' + @varRP_GG2 + ' '
	ELSE IF @varRP_GGS IS NOT NULL
		SET @varRP_Summary = @varRP_GGS + ' '
	ELSE
		SET @varRP_Summary = ''
	IF @varRP_MarginStatus IS NOT NULL
		BEGIN
		--Keep codes "Neg" And "POS"
		IF @varRP_MarginStatus LIKE 'POS%'
			SET @varRP_Summary = @varRP_Summary + 'SMS+ '
		ELSE IF @varRP_MarginStatus LIKE 'NEG%'
			SET @varRP_Summary = @varRP_Summary + 'SMS- '
		ELSE IF @varRP_MarginStatus IS NOT NULL
			SET @varRP_Summary = @varRP_Summary + 'SMS=' + @varRP_MarginStatus + ' '
		END		
	IF @varRP_ECE IS NOT NULL
		SET @varRP_Summary = @varRP_Summary + 'ECE=' + LOWER(@varRP_ECE) + ' '
	IF @varRP_SVI IS NOT NULL
		BEGIN
		--Keep codes "Neg" And "POS"
		IF @varRP_SVI LIKE 'POS%'
			SET @varRP_Summary = @varRP_Summary + 'SVI+ '
		ELSE IF @varRP_SVI LIKE 'NEG%'
			SET @varRP_Summary = @varRP_Summary + 'SVI- '
		ELSE IF @varRP_SVI IS NOT NULL
			SET @varRP_Summary = @varRP_Summary + 'SVI=' + @varRP_SVI + ' '
		END
	IF @varRP_LNI IS NOT NULL
		BEGIN
		--Keep codes "Abnormal" And "Normal"
		IF @varRP_LNI = 'Abnormal'
			SET @varRP_Summary = @varRP_Summary + 'LNI+ '
		ELSE IF @varRP_LNI = 'Normal'
			SET @varRP_Summary = @varRP_Summary + 'LNI- '
		ELSE IF @varRP_LNI IS NOT NULL
			SET @varRP_Summary = @varRP_Summary + 'LNI=' + @varRP_LNI + ' '
		END
	SET @varRP_Summary = NULLIF(RTRIM(@varRP_Summary),'')
	RETURN (@varRP_Summary)
END
GO

--34ModifyspChronologicalList.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spChronologicalList]
	@PatientId int = NULL,
	@UserName varchar(50) = NULL,
   @AbsentEvents bit = 0,
	@Actions bit = 0,
	@Allergies bit = 0,
	@BrachyTherapy bit = 0,
	@Categories bit = 0,
	@ClinicalStages bit = 0,
	@Comorbidities bit = 0,
	@Cytologies bit = 0,
	@Diagnostics bit = 0,
	@DietaryIntake bit = 0,
	@Encounters bit = 0,
	@FamilyMembers bit = 0,
	@Hospitalizations bit = 0,
	@Identifiers bit = 0,
	@ItemsPending bit = 0, --special case
	@ItemsMissing bit = 0, --special case
	@LabTests bit = 0,
	@ListAll bit = 0, --special case
	@ListCommon bit = 0, --special case
	@ListTreatments bit = 0, --special case
	@Medications bit = 0,
	@MedicalTherapy bit = 0,
	@OperatingRoomDetails bit = 0, --special case
	@Pathology bit = 0,
	@PatientConsent bit = 0,
	@PatientPhysicians bit = 0,
	@Procedures bit = 0,
	@ProcNeuralStimulations bit = 0,
	@Protocols bit = 0,
	@QOL_Therapy bit = 0,
	@RadiationTherapy bit = 0,
	@SocialHistories bit = 0,
	@SpecimenAccessions bit = 0,
	@Surveys bit = 0,
	@Status bit = 0,
	@Toxicities bit = 0,
   @ExcludeLabs bit = 0, --special case
   @PatientProblems bit = 0
AS
SET NOCOUNT ON
--Each above variable represents a table name except for the special cases.

--DECLARE @ChronoTable TABLE 
/*
table variable might be more efficient than temp table however cannot
use syntax 'INSERT INTO @ChronoTable EXEC spChronoListAll @PatientId' with
a table variable. Cannot use a procedure as the from clause when inserting to a 
table variable would need to rewrite each spChrono child procedure as a table-valued 
function then can use that function in the FROM clause of Insert statement.
'INSERT INTO @ChronoTable SELECT * FROM dbo.fn_ChronoListAll(@PatientId)'
However sp is much more flexible than table-valued function.
*/

CREATE TABLE #ChronoTable
   (
   ChronoId         int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate          varchar(50) NULL,
   VarName          varchar(100) NULL,
   VarValue         varchar(500) NULL,
   Quality          varchar(50) NULL,
   SortDate         datetime NULL,
   GroupNumber      int NULL,
   TableName        varchar(50) COLLATE database_default NULL,
   PrimaryKey       int NOT NULL,
   ParentKey        int NULL,
   ProcId           int NULL,
   OpId             int NULL,
   CommonKey        int NULL,
   PendingNote      bit NULL DEFAULT (0)
   )

--Add single compound index
CREATE INDEX I_ChronoTable ON #ChronoTable (SortDate,CommonKey,ProcId,GroupNumber)

--holds patient Notifications records
DECLARE @NotificationTable TABLE
	(
	NotificationId int NOT NULL,
	TableName varchar(50) NULL,
	TablePrimaryKey int NULL,
	Response varchar(255) NULL
	)

--most special cases are mutually exclusive
IF @ListAll = 1
   BEGIN
      SET @AbsentEvents = 1
      SET @Actions = 1
      SET @Allergies = 1
      SET @BrachyTherapy = 1
      SET @Categories = 1
      SET @ClinicalStages = 1
      SET @Comorbidities = 1
      SET @Diagnostics = 1
      SET @DietaryIntake = 1
      SET @Encounters = 1
      SET @FamilyMembers = 1
      SET @Hospitalizations = 1
      SET @Identifiers = 1
      SET @LabTests = 1
      SET @Medications = 1
      SET @MedicalTherapy = 1
      SET @Pathology = 1
      SET @PatientConsent = 1
      SET @PatientPhysicians = 1
      SET @Procedures = 1
      SET @ProcNeuralStimulations = 1
      SET @Protocols = 1
      SET @QOL_Therapy = 1
      SET @RadiationTherapy = 1
      SET @SocialHistories = 1
      SET @OperatingRoomDetails = 1
      SET @SpecimenAccessions = 1
      SET @Status = 1
      SET @Surveys = 1
      SET @Toxicities = 1
      SET @PatientProblems = 1
   END
ELSE IF @ListCommon = 1
   BEGIN
      SET @BrachyTherapy = 1
      SET @ClinicalStages = 1
      SET @Diagnostics = 1
      SET @LabTests = 1
      SET @MedicalTherapy = 1
      SET @Pathology = 1
      SET @Procedures = 1
      SET @Protocols = 1
      SET @QOL_Therapy = 1
      SET @RadiationTherapy = 1
      SET @OperatingRoomDetails = 1
      SET @SpecimenAccessions =1
      SET @Status = 1
      SET @Toxicities = 1
   END
ELSE IF @ListTreatments = 1
   BEGIN
      SET @BrachyTherapy = 1
      SET @MedicalTherapy = 1
      SET @Procedures = 1
      SET @Protocols = 1
      SET @RadiationTherapy = 1
      SET @OperatingRoomDetails = 1
   END
ELSE IF @OperatingRoomDetails = 1
   BEGIN
      SET @Pathology = 1
      SET @Procedures = 1
      SET @ProcNeuralStimulations = 1
      SET @SpecimenAccessions = 1
   END

--Special handling for excluding labs from any list
IF @ExcludeLabs = 1
   SET @LabTests = 0

IF @AbsentEvents = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListAbsentEvents @PatientId
IF @Actions = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListActions @PatientId
IF @Allergies = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListAllergies @PatientId
IF @BrachyTherapy = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListBrachyTherapy @PatientId
IF @Categories = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListCategories @PatientId, @UserName
IF @ClinicalStages = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListClinicalStages @PatientId
IF @Comorbidities = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListComorbidities @PatientId
IF @Cytologies = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListCytologies @PatientId
IF @Diagnostics = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListDiagnostics @PatientId
IF @DietaryIntake = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListDietaryIntake @PatientId
IF @Encounters = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListEncounters @PatientId
IF @FamilyMembers = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListFamilyMembers @PatientId
IF @Hospitalizations = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListHospitalizations @PatientId
IF @Identifiers = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListIdentifiers @PatientId
IF @ItemsMissing = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListItemsMissing @PatientId
IF @ItemsPending = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListItemsPending @PatientId
IF @LabTests = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListLabTests @PatientId
IF @Medications = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListMedications @PatientId
IF @MedicalTherapy = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListMedicalTherapy @PatientId
IF @OperatingRoomDetails = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListOperatingRoomDetails @PatientId
IF @Pathology = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey,ProcId,OpId) EXEC spChronoListPathology @PatientId
IF @PatientConsent = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListPatientConsent @PatientId
IF @PatientPhysicians = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListPatientPhysicians @PatientId
IF @Procedures = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey,ProcId,OpId) EXEC spChronoListProcedures @PatientId
IF @ProcNeuralStimulations =1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey,ProcId,OpId) EXEC spChronoListProcNeuralStimulations @PatientIdIF @Protocols = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListProtocols @PatientId
IF @QOL_Therapy = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListQOL_Therapy @PatientId
IF @RadiationTherapy = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListRadiationTherapy @PatientId
IF @SocialHistories = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListSocialHistories @PatientId
IF @SpecimenAccessions = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListSpecimenAccessions @PatientId
IF @Status = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListStatus @PatientId
IF @Surveys = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListSurveys @PatientId
IF @Toxicities = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListToxicities @PatientId
IF @PatientProblems = 1
   INSERT INTO #ChronoTable(VarDate,VarName,VarValue,Quality,SortDate,GroupNumber,TableName,PrimaryKey,ParentKey) EXEC spChronoListPatientProblems @PatientId

--load the notifications records for the patient. PatientId is indexed
INSERT INTO @NotificationTable (NotificationId,TableName,TablePrimaryKey,Response)
SELECT NotificationId,TableName,TablePrimaryKey,Response
FROM Notifications
WHERE PatientId=@PatientId

--Would work instead of using column list but makes chrono list slower
--ALTER TABLE #ChronoTable ADD OpId int

--This section is post processing to display complex data
--ProstatectomyPath
UPDATE #ChronoTable
SET VarValue = dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,OperatingRoomDetailId,PathQuality)
FROM #ChronoTable INNER JOIN ProstatectomyPath ON PrimaryKey = PathologyId
                  INNER JOIN Pathology ON ProstatectomyPath.PathologyId=Pathology.PathologyId
WHERE TableName = 'Pathology'
--CystectomyPath
UPDATE #ChronoTable
SET VarValue = LTRIM(ISNULL(RIGHT(PathStageSystem,2),'') + ' ' + ISNULL(PathStageT,'') + ' ' +  ISNULL(PathGrade,''))            
FROM #ChronoTable INNER JOIN CystectomyPath ON PrimaryKey = PathologyId
                  INNER JOIN Pathology ON CystectomyPath.PathologyId=Pathology.PathologyId
                  LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId=PathologyStageGrade.PathologyId
WHERE TableName = 'Pathology'
--PancreasPath
UPDATE #ChronoTable
SET VarValue = RTRIM(ISNULL(PathStageSystem,'') + ' ' + ISNULL(PathStageT,'')) + ' ' + RTRIM(ISNULL(PathHistology,'') + ' ' + RTRIM(ISNULL(PathGrade,'')) + ' ' + ISNULL(PathSite,''))
FROM #ChronoTable INNER JOIN PancreasPath ON PrimaryKey = PathologyId
                  INNER JOIN Pathology ON PancreasPath.PathologyId=Pathology.PathologyId
                  LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId=PathologyStageGrade.PathologyId
WHERE TableName = 'Pathology'
--RPLND
UPDATE #ChronoTable
SET VarValue = ISNULL(NULLIF(LTRIM(ISNULL(PathHistology,'') + ' ' + ISNULL(PathStageN,'') + ' ' +  ISNULL(PathStageM,'')),''), VarValue)
FROM #ChronoTable INNER JOIN Pathology ON PrimaryKey = Pathology.PathologyId
                  INNER JOIN RPLND_Proc ON RPLND_Proc.ProcedureId=Pathology.ProcedureId
                  LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId=PathologyStageGrade.PathologyId
WHERE TableName = 'Pathology'
--Endoscopy based on a lookup code
UPDATE #ChronoTable
SET VarName = ISNULL(PathSpecimenCollection,PathSpecimenType),
    VarValue = LTRIM(ISNULL(RIGHT(PathStageSystem,2),'') + ' '  + ISNULL(PathStageT,'') + ' ' + ISNULL(PathGrade,''))
FROM #ChronoTable INNER JOIN Pathology ON PrimaryKey = Pathology.PathologyId
                  LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId=PathologyStageGrade.PathologyId
WHERE TableName = 'Pathology' AND PathSpecimenType = 'Endoscopy'
--Prostate Biopsies
UPDATE #ChronoTable
SET VarValue = dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult)
FROM #ChronoTable INNER JOIN ProstateBiopsyPath ON PrimaryKey = PathologyId
                  INNER JOIN Pathology ON ProstateBiopsyPath.PathologyId=Pathology.PathologyId
WHERE TableName = 'Pathology'

/*
The GroupNumber Columns allows a secondary sort order after the date.
It also allows the date value to be removed for certain rows.
*/
UPDATE #ChronoTable
SET GroupNumber = LkpOrder
FROM #ChronoTable INNER JOIN LookupCodes ON TableName = LkpCode
WHERE LkpFieldName = 'ChronoList' AND GroupNumber IS NULL

/*
The CommonKey column allows grouping parent and child records together
*/
UPDATE #ChronoTable
SET CommonKey = PrimaryKey
WHERE TableName IN ('Encounters','OperatingRoomDetails') AND CommonKey IS NULL

UPDATE #ChronoTable
SET CommonKey = ParentKey
WHERE TableName Like 'Enc%' AND CommonKey IS NULL

UPDATE #ChronoTable
SET CommonKey = ISNULL(OpId,ProcId)
WHERE TableName IN ('Procedures','Pathology','NeuralStimulationProcFinding') AND CommonKey IS NULL

--force patient problems to sort under encounters when possible
UPDATE #ChronoTable
SET CommonKey = b.EncounterId,
    SortDate = c.EncDate
FROM #ChronoTable a INNER JOIN
     ProblemPlans b ON a.PrimaryKey = b.PatientProblemId AND
                       TableName ='PatientProblems' INNER JOIN
     Encounters c ON b.EncounterId = c.EncounterId
WHERE CommonKey IS NULL

/*
This will force a pathology to group with it's related procedure or Operating room detail
regardless of the date assigned in the path report however date does need to be filled in
because of null comparison. 
*/
UPDATE #ChronoTable
SET SortDate = b.SortDate
FROM #ChronoTable AS a INNER JOIN 
                  (SELECT CommonKey,SortDate
                   FROM  #ChronoTable 
                   WHERE TableName IN('Procedures','OperatingRoomDetails') AND CommonKey IS NOT NULL
                  ) AS b ON a.CommonKey = b.CommonKey AND a.SortDate <> b.SortDate
WHERE a.TableName = 'Pathology' AND a.CommonKey IS NOT NULL

--Update the PendingNote using the notification data
UPDATE #ChronoTable
SET PendingNote = 1
FROM #ChronoTable AS a INNER JOIN @NotificationTable b ON a.PrimaryKey=b.TablePrimaryKey AND
                                                          a.TableName=b.TableName
WHERE ISNULL(Response,'None') = 'None'

SELECT * FROM #ChronoTable
ORDER BY SortDate,CommonKey,ProcId,GroupNumber
--DROP TABLE #ChronoTable
GO

--35ModifyspGetPatientHPI.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spGetPatientHPI]
   @PatientId int = NULL,
   @NomogramResults bit = 0,  --retired
   @NomogramValues bit = 0,   --retired
   @EForm bit = 0,
   @Rowcount int = NULL OUTPUT
AS
--Procedure returns HPI as a select statement instead of output parameter for flexibility
SET NOCOUNT ON

--These variables are for debuging / testing speed
DECLARE @starttime datetime
DECLARE @stoptime datetime
Declare @strDebug varchar(8000)
--End of Debug variables

DECLARE @strPatientHPI     varchar(500)
DECLARE @strDate           varchar(50)
DECLARE @strStopDate       varchar(50)
DECLARE @dteDate           datetime
DECLARE @strVariable       varchar(50)
DECLARE @strValue          varchar(255)
DECLARE @strDataQuality    varchar(50)
DECLARE @intPrimaryKey     int
DECLARE @strTableName      varchar(50)
DECLARE @i                 int
DECLARE @blnPreTx          bit
DECLARE @blnValidPSA       bit
DECLARE @sngTime           float(24) --VBA single float(53) double
DECLARE @BiopsyDate        datetime
DECLARE @BiopsyDays        float(24) -- number of days after prostate biopsy that PSA is invalid
DECLARE @strOutPut         varchar(500)

--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'
SET @BiopsyDate = @MISSING_DATE
SET @BiopsyDays = 21

--Clinical states constants (must be ordered)
DECLARE @NO_PROSTATE_CANCER_DIAGNOSIS smallint
DECLARE @LOCALIZED                    smallint
DECLARE @RISING_PSA_NON_CASTRATE      smallint
DECLARE @RISING_PSA_CASTRATE          smallint
DECLARE @NON_CASTRATE_METS            smallint
DECLARE @CASTRATE_METS                smallint
DECLARE @DEAD                         smallint
SET @NO_PROSTATE_CANCER_DIAGNOSIS = 0
SET @LOCALIZED = 1
SET @RISING_PSA_NON_CASTRATE = 2
SET @RISING_PSA_CASTRATE = 3
SET @NON_CASTRATE_METS = 4   
SET @CASTRATE_METS = 5  
SET @DEAD = 6

--This is used to determine castrate clinical states
DECLARE @CASTRATE_TESTOSTERONE_LEVEL smallint
SET @CASTRATE_TESTOSTERONE_LEVEL = 50

DECLARE @ClinStateDate    datetime        --date of last clinical state transition
DECLARE @ClinStateDteText varchar(50)     --datetext of last clinical state transition
DECLARE @ClinState        int             --current clinical state (0 to 5)
DECLARE @Castrate         bit             --castrate levels of testosterone (<50)
DECLARE @DxBiopsyID       int             --primary key for diagnostic biopsy record
DECLARE @DxBxDate         datetime        --date of diagnostic (first positive) biopsy
DECLARE @DxBxDateText     varchar(50)     --datetext of diagnostic (first positive) biopsy
DECLARE @DxBxType         varchar(50)     --diagnostic biopsy type: TURP or needle
DECLARE @DxBxSummary      varchar(50)     --pathologic summary of diagnostic biopsy: eg. 3+4
DECLARE @DxBxQuality      varchar(50)     --data quality for diagnostic biopsy
DECLARE @PreTxPSA         float(24)       --valid PSA before any "curative" treatment (XRT or RP)
DECLARE @PreTxPSADate     datetime 
DECLARE @ClinStageDate	  datetime 
DECLARE @ClinStageSystem  varchar(50)     --UICC TNM staging system used
DECLARE @ClinStageT       varchar(50)     --pre-treatment UICC Tumor Stage
DECLARE @ClinStageN       varchar(50)     --pre-treatment UICC Nodes Stage
DECLARE @ClinStageM       varchar(50)     --pre-treatment UICC Metastatis Stage
DECLARE @ClinStageQuality varchar(50)     --data quality of clinical staging data
DECLARE @NeoAdjHormTx     varchar(50)     --patient has had neo-adjuvant hormone therapy
DECLARE @NeoAdjHormTxDate datetime        --date of first hormone therapy (all PSAs after this are invalid?)
DECLARE @NeoAdjRadTx      varchar(50)     --patient has had neo-adjuvant radiation therapy
DECLARE @NeoAdjRadTxDate  datetime        --date of last neo-adjuvant radiation therapy (all following pre-tx PSAs are invalid)
DECLARE @NeoAdjChemoTx    varchar(50)     --patient has had neo-adjuvant chemotherapy
DECLARE @NeoAdjChemoDate  datetime        --date of last neo-adjuvant chemotherapy
--DECLARE @Prostatectomy    bit           --patient had prostatectomy (means he will always use RP PSA recurrence methods)
DECLARE @ActiveSurId      int             --primary key of Active Surveillance status record

DECLARE @TxDate           datetime        --date of first "curative" treatment
DECLARE @TxType           varchar(50)     --curative treatment type
DECLARE @AdjHormTx        varchar(50)
DECLARE @AdjChemoTx       varchar(50)
--DECLARE @NumPSAs          int --number of PSAs after curative treatment
DECLARE @EOD              varchar(50)     --last extent of disease 
DECLARE @LastPSA_Value    varchar(50)
DECLARE @LastPSA_Date     datetime   

DECLARE @HormEvent        varchar(50)
DECLARE @HormTxDate       datetime
DECLARE @MetsEvent        varchar(50)
DECLARE @ChemoTxDate      datetime

--used for eform
DECLARE @strTableNames     varchar(200)
DECLARE @strPrimaryKeys    varchar(50)
DECLARE @strVarDelimited   varchar(500)
DECLARE @ClinStageID       int             --primary key for diagnostic clinical stage record
DECLARE @PreTxPSAID        int             --primary key for pre prostatectomy psa record
DECLARE @ClinStateID       int             --primary key for clin state record
DECLARE @ClinStateTable    varchar(50)     --table name where clin state obtained from
DECLARE @blnHadRP          bit             --patient had prostatectomy
DECLARE @ProstatePathId    int             --primary key for ProstatectomyPath record
DECLARE @PLNDProcId        int             --primary key for Procedure PLND record


--used for eform
SET @strTableNames    = ''
SET @strPrimaryKeys   = ''
SET @strVarDelimited  = ''

SET @ClinStateDate    = @MISSING_DATE
SET @ClinStateDteText = ''
SET @ClinState        = @NO_PROSTATE_CANCER_DIAGNOSIS
SET @Castrate         = 0
SET @DxBxDate         = @MISSING_DATE
SET @DxBxDateText     = ''
SET @DxBxType         = ''
SET @DxBxSummary      = ''
SET @DxBxQuality      = ''
SET @PreTxPSA         = @MISSING_NUMBER
SET @PreTxPSADate     = @MISSING_DATE
SET @ClinStageDate    = @MISSING_DATE
SET @ClinStageSystem  = ''
SET @ClinStageT       = ''
SET @ClinStageN       = ''
SET @ClinStageM       = ''
SET @ClinStageQuality = ''
SET @NeoAdjHormTx     = 0
SET @NeoAdjHormTxDate = @MISSING_DATE
SET @NeoAdjRadTx      = 0
SET @NeoAdjRadTxDate  = @MISSING_DATE
SET @NeoAdjChemoTx    = 0
SET @NeoAdjChemoDate  = @MISSING_DATE
SET @HormTxDate       = @MISSING_DATE
SET @ChemoTxDate      = @MISSING_DATE
SET @blnHadRP         = 0
SET @TxDate           = @MISSING_DATE
SET @TxType           = ''
--SET @NumPSAs          = 0
SET @EOD              = ''
SET @LastPSA_Value    = @MISSING_NUMBER
SET @LastPSA_Date     = @MISSING_DATE
SET @MetsEvent        = ''
SET @HormEvent        = ''
 
DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate              datetime NULL,
   VarString             varchar(500) NULL,
   VarDelimited          varchar(500) NULL,
   TableNames            varchar(200) NULL,
   PrimaryKeys           varchar(50) NULL
   )

DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarValue
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarValue     varchar(255) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   VarStopDate  varchar(50) NULL,
   TableName    varchar(50) NULL,
   PrimaryKey   int NOT NULL
   )

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, CAST(dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) as varchar(255)), ISNULL(PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN ProstateBiopsyPath ON Pathology.PathologyId=ProstateBiopsyPath.PathologyId
WHERE Procedures.PatientId = @PatientId AND 
      ProcSite='Prostate' AND ProcName IN('TURP','TRUS Biopsy','Biopsy','Needle Biopsy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ClinStageDateText, ClinStageSystem, ClinStageT, ClinStageQuality, ClinStageDate, 'ClinicalStages', ClinicalStageId
FROM ClinicalStages
WHERE (ClinicalStages.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT DxDateText, DxType, DxResult, DxQuality, DxDate,  'Diagnostics', DiagnosticId
FROM Diagnostics
WHERE (Diagnostics.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT LabDateText, LabTest, LabResult, LabQuality, LabDate, 'LabTests', LabTestId
FROM LabTests
WHERE (LabTests.PatientId = @PatientId AND LabTest IN ('PSA','PSAUS','TEST') AND LabResult IS NOT NULL)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT MedTxDateText, MedTxType, MedTxAgent, MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId
FROM MedicalTherapy
WHERE (MedicalTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy'), LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy'), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName = 'Orchiectomy'

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'Nephrectomy', ISNULL(ProcName,'Nephrectomy') + ISNULL(' '+ProcSide,''), ProcQuality, ProcDate, 'Procedures',Procedures.ProcedureId
FROM Procedures
WHERE PatientId = @PatientId AND ProcName IN('Nephrectomy','Partial Nephrectomy','Laparoscopic Nephroureterectomy','Partial for Horshoe Kidney','Laparoscopic Partial Nephrectomy','Nephroureterectomy','Laparoscopic Radical Nephrectomy','Radical Nephrectomy','Exploratory Laparotomy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'RPLND', RTRIM('RPLND ' + ISNULL(ProcApproach,'')), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName = 'RPLND'

--Added Rank in case need to use top 1 clause to return only the best row version
INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, RPSummary, DataQuality, ProcDate, TableName, ProcedureId
FROM 
(
SELECT ProcDateText, ISNULL(ProcName,'Prostatectomy') ProcName,
       dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(PathQuality,ProcQuality)) + ' (' + 
       dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(PathQuality,ProcQuality))+ ')' + ' (' + ISNULL(PathQuality,ProcQuality) + ')' RPSummary, 
       ISNULL(PathQuality,ProcQuality) DataQuality, ProcDate,  'Procedures' TableName, Procedures.ProcedureId,
       CASE PathQuality WHEN 'OUT' THEN 1 
                        WHEN 'REV' THEN 2
                        WHEN 'STD' THEN 3
                        WHEN 'RR' THEN 4
                        ELSE 0
       END RP_RANK
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN ProstatectomyPath ON ProstatectomyPath.PathologyId = Pathology.PathologyId
WHERE Procedures.PatientId = @PatientId AND ProcName IN('CP','LP','LP_CONV','PP','RALP','RP','SalvCP','SalvLP','SalvRP')
) a 
ORDER BY ProcDate DESC, RP_RANK DESC

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,'Cystectomy', ISNULL(ProcName,'Cystectomy'),ProcQuality,ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName IN('Cystectomy','CP','Cysto-Prostatectomy','Partial Cystectomy','Radical Cystectomy','Salvage Radical Cystectomy')
      AND Procedures.ProcedureId NOT IN (SELECT PrimaryKey FROM @ChronoTable WHERE TableName='Procedures')

--procedures not in the current list
INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, NULL, ProcQuality, ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN 
                (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT RadTxDateText, RadTxType, RadTxTotalDose, RadTxQuality, RadTxDate,RadTxStopDateText, 'RadiationTherapy', RadiationTherapyId
FROM RadiationTherapy
WHERE (RadiationTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT BrachyDateText,'Brachytherapy',BrachyIsotope,BrachyQuality,BrachyDate,'BrachyTherapy',PatientId
FROM BrachyTherapy
WHERE (BrachyTherapy.PatientId = @PatientId AND ISNULL(BrachyPending,0)=0)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT StatusDateText, 'Status', status, statusQuality, statusDate, 'Status', statusId
FROM Status
WHERE (Status.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT PtDeathDateText, 'Status', PtDeathType, Null, PtDeathDate, 'Patients', PatientID
FROM Patients
WHERE (PtDeathDate IS NOT NULL) AND (PatientID=@PatientID)

--Clean up local variables for each record fetched
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarValue = ''
WHERE VarValue IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarValue = dbo.fnPacManStr(VarValue)
WHERE TableName = 'LabTests' AND ISNUMERIC(VarValue)=0
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL

--SELECT * FROM @ChronoTable ORDER BY SortDate
SET @strOutPut = ''
SET @strPatientHPI = ''
DECLARE tables_cursor CURSOR LOCAL FAST_FORWARD
   FOR
   SELECT VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,PrimaryKey,TableName
   FROM @ChronoTable
   ORDER BY SortDate ASC
OPEN tables_cursor
IF CURSOR_STATUS ('local','tables_cursor') = 1
BEGIN
   --SET @starttime= GETDATE()
   --SET @strDebug= 'START ' + CAST(@starttime as varchar)
   FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@intPrimaryKey,@strTableName
   WHILE (@@FETCH_STATUS <> -1)
   BEGIN  
      --DETERMINE if record is pre-treatment assume record is not pre-treatment
      SET @blnPreTx = 0
      IF @dteDate IS NULL 
         SET @blnPreTx = 1
      ELSE IF @TxDate = @MISSING_DATE
         SET @blnPreTx = 1
      ELSE IF @dteDate = @TxDate
         SET @blnPreTx = 1     

      -- PSA
      IF @strVariable IN('PSA','PSAUS')
      BEGIN
         --accomodate <,>, <=, >=
         --SET @strValue = dbo.fnPacManStr(@strValue) --not need cause of update statement        
         IF ISNUMERIC(@strValue) = 1
         BEGIN
            SET @blnValidPSA = 1
            -- PSA invalid if patient on hormone therapy
            IF (@blnPreTx = 1 AND @NeoAdjHormTx <> '') OR (@AdjHormTx <> '') OR (@HormEvent <> '')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@HormTxDate = @MISSING_DATE) OR (@dteDate > @HormTxDate)
                     SET @blnValidPSA = 0

            -- PSA invalid if patient on chemotherapy
            IF (@blnPreTx = 1 AND @NeoAdjChemoTx <> '') OR (@AdjChemoTx <> '') OR (@MetsEvent LIKE '%CHEMO%')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@ChemoTxDate = @MISSING_DATE) OR (@dteDate > @ChemoTxDate)
                     SET @blnValidPSA = 0

            -- PSAs invalid within specified days after prostate biopsy
            IF @BiopsyDate <> @MISSING_DATE AND @dteDate IS NOT NULL
               IF @dteDate > @BiopsyDate
                  IF (@dteDate - @BiopsyDate) < @BiopsyDays
                     SET @blnValidPSA = 0

            -- find valid pre-treatment PSA 
            IF @blnValidPSA = 1   
               IF @blnPreTx = 1
               BEGIN
                  IF NOT (@dteDate IS NULL AND @PreTxPSA <> @MISSING_NUMBER AND @PreTxPSA > CAST(@strValue AS float(24)))
                     BEGIN
                        SET @PreTxPSA = CAST(@strValue AS float(24))
                        IF @EForm=1
                           SET @PreTxPSAID = @intPrimaryKey --used for eform
                     END 
                  IF @dteDate IS NOT NULL
                     SET @PreTxPSADate = @dteDate
               END
               ELSE
                  SET @LastPSA_Value = @strValue
               IF @dteDate IS NOT NULL
                  SET @LastPSA_Date = @dteDate
         END 
      END
      ELSE
      -- Prostate Biopsy
      IF @strVariable IN('NEEDLE BIOPSY','BIOPSY','TURP','TRUS Biopsy') --dbo.fnIsBiopsyProstate (@strVariable)= 1
      BEGIN
         -- which biopsy is the diagnostic biopsy?
         -- save date to check for PSAs within 3 weeks of biopsy
         IF @blnPreTx = 1
            IF @dteDate IS NOT NULL
            BEGIN
               SET @BiopsyDate = @dteDate
               -- diagnostic biopsy is first positive biopsy
               -- but if ther are later pre-tx grades, use them
               IF @strValue <> '' AND @strValue NOT IN('NEG','PIN','ASAP','Negative') --dbo.fnIsAbnormalBiopsyProstate (@strValue) = 1
                  IF @DxBxDate = @MISSING_DATE OR 
                                 (@strDataQuality='RR' AND @DxBxQuality <> 'RR' AND @DxBxDate = @dteDate) OR 
                                 (@strDataQuality IN('STD','REV') AND @DxBxQuality = 'OUT' AND @DxBxDate = @dteDate)
                  BEGIN
                     SET @DxBxType = @strVariable
                     SET @DxBxDate = @dteDate
                     SET @DxBxDateText = @strDate
                     SET @DxBxSummary = @strValue + ' (' + @strDataQuality + ')'
                     SET @DxBxQuality = @strDataQuality
	                  SET @DxBiopsyID = @intPrimaryKey --for paper form
                     -- move the clinical state forward
                     IF @ClinState < @LOCALIZED
                     BEGIN
                        SET @ClinState = @LOCALIZED
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                        IF @EForm=1
                           BEGIN
                              SET @ClinStateID = @intPrimaryKey
                              SET @ClinStateTable = @strTableName
                           END                           
                     END
                  END
            END         
      END   -- does not deal with post-curative treatment (RP, XRT) biopsies
      ELSE
      -- UICC/AJCC Clinical Tumor Stage
      IF @strVariable IN('UICC_92','UICC_97','UICC_02')
      BEGIN
         IF @blnPreTx = 1 AND @strValue <> ''
            If @strDataQuality = 'RR' OR @ClinStageQuality <> 'RR'
            BEGIN
               IF @dteDate IS NOT NULL
               BEGIN
	               SET @ClinStageDate = @dteDate            
	               SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
	               SET @ClinStageQuality = @strDataQuality
                  SELECT @ClinStageN = ClinStageN, @ClinStageM = ClinStageM
                  FROM ClinicalStages WHERE ClinicalStageId = @intPrimaryKey
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey --used for eform
	            END
	            ELSE IF @strValue > @ClinStageT
	            BEGIN
		            -- don't need to copy date b/c all nulls sort to top
         		   SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
	               SET @ClinStageQuality = @strDataQuality
                  SELECT @ClinStageN = ClinStageN, @ClinStageM = ClinStageM
                  FROM ClinicalStages WHERE ClinicalStageId = @intPrimaryKey
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey --used for eform
               END
            END       
      END
      ELSE
      BEGIN   
         -- Chemotherapy (NOT AN ELSE b/c of combination therapies)
         IF (@strVariable LIKE '%CHEMO%') AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @ChemoTxDate = @MISSING_DATE
                  SET @ChemoTxDate = @dteDate
   
            IF @blnPreTx = 1
               SET @NeoAdjChemoTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjChemoTx = @strVariable
               -- assumes any chemo after treatment indicates metastasis
               SET @MetsEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' ' 
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               IF @EForm=1
                  INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
               ELSE
                  INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
               SET @strOutput = ''   
         END
         -- Hormone Therapy (NOT AN ELSE b/c of combination therapies)
         IF ((@strVariable LIKE '%HORM%')
            OR (@strVariable = 'ORCH')
            OR (@strVariable ='Bilateral Orchiectomy')
            OR (@strVariable LIKE 'ORCH_BIL%')
            OR (@strVariable LIKE '%LHRH%')
            OR (@strVariable LIKE '%AA%')
            OR (@strVariable LIKE '%ESTROGEN%')
            OR (@strVariable LIKE '%PROGEST%'))
            AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @HormTxDate = @MISSING_DATE
                  SET @HormTxDate = @dteDate
            IF @blnPreTx = 1
               SET @NeoAdjHormTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjHormTx = @strVariable
               SET @HormEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' '  
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               --prevent the same record from being inserted again need a better way
               IF NOT EXISTS(SELECT SortDate FROM @SortTable WHERE SortDate=@dteDate AND VarString=@strOutput)
                  BEGIN
                     IF @EForm=1                  
                        INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
                     ELSE
                        INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)                        
                  END
               SET @strOutput = ''   
         END 
      END    
      --Testosterone
      IF @strVariable LIKE 'TEST%' 
      --look for castrate levels of testosterone
      BEGIN 
        IF ISNUMERIC(@strValue) = 1
           IF CAST(@strValue As float(24)) < @CASTRATE_TESTOSTERONE_LEVEL
              SET @Castrate = 1     
      END
      --check if castrated
      IF @strVariable IN ('ORCH_BIL','Bilateral Orchiectomy')
         SET @Castrate = 1
      --Diagnostics Imaging
      --these should be positive diagnostics for metastasis
      --what exactly is positive?
      --should it require specifying extent of disease?
      --should CT and MRI be confirmed by LN_BX?
      --should BS or PET be confirmed by BONE_BX?
      --add target latter so can use other scan types?
      IF @strVariable IN('BS','Bone Scan','BONE_BX','LN_BX') --('PET','PET Scan','XRAY','X-RAY','RADIOGRPH',)  
            --OR @strVariable LIKE 'CT%' OR @strVariable LIKE '%MRI%'--dbo.fnIsDiagnostic(@strVariable) = 1
      BEGIN
         IF @strValue LIKE 'POS%' OR 
            @strValue LIKE 'ABN_P%' OR 
            @strValue LIKE 'ABN_MAL%' OR
            @strValue='Abnormal Malignant' OR
            @strValue='Abnormal'	OR
            @strValue='Abnormal Prostate'--dbo.fnIsAbnormalDiagnostic(@strValue) = 1
            IF @ClinState < @NON_CASTRATE_METS
            BEGIN
               IF @Castrate = 1
                  BEGIN
                     SET @ClinState = @CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                  END
               ELSE
                  BEGIN
                     SET @ClinState = @NON_CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                  END
               IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
            END
      END
      ELSE
      -- Radiation Therapy
      IF @strVariable IN('XRT','EBRT','RT','COMBO','BRACHY','COMBO','RADIOISOTOPE','SEED'
                        ,'IMPLANT','Brachytherapy',
                        'External Beam','Radiation Therapy, Unspecified','External Beam, IMRT',
                        'High-Dose Rate Brachytherapy','External Beam, 3D Conventional',
                        'External Beam, 3D Conformal') --dbo.fnIsRadiationtherapy(@strVariable) = 1 OR dbo.fnIsBrachytherapy(@strVariable)= 1
      BEGIN
         IF @ClinState < @LOCALIZED
         BEGIN
            SET @ClinState = @LOCALIZED
            IF @EForm=1
               BEGIN
                  SET @ClinStateID = @intPrimaryKey
                  SET @ClinStateTable = @strTableName
               END   
            IF @dteDate IS NOT NULL
               BEGIN
                  SET @ClinStateDate = @dteDate
                  SET @ClinStateDteText = @strDate
               END
         END
         IF @blnPreTx = 1
            BEGIN 
               SET @NeoAdjRadTx = @strVariable
               IF @dteDate IS NOT NULL
                  SET @TxDate = @dteDate
            END
         SET @strOutput = @strOutput + @strDate + ' '
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         SET @strOutput = @strOutput + @strVariable + ' ' + @strValue
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''     
      END
      ELSE
      -- Other Medical Therapy
      IF @strVariable IN('BIO_TX','IMMUNO','CLIN_TRIAL','STEROID','OTHER','GENE_TX')
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' 
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         IF @strValue <> ''
            SET @strOutput = @strOutput +  @strValue
         ELSE
            SET @strOutput = @strOutput + @strVariable
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)            
         SET @strOutput = ''   
      END
      ELSE
      -- Extent of Disease
      IF @strVariable = 'EOD'
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' + @strVariable + ' ' + @strValue -- + @CharLineFeed
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''   
      END
      ELSE
      -- Radical Prostatectomy
      IF @strVariable LIKE 'R[RCPL]P' OR @strVariable LIKE '[RCPL]P' OR @strVariable LIKE 'Salv[RCPL]P' OR @strVariable='RALP' OR @strVariable = 'LP_CONV' --dbo.fnIsRadicalProstatectomy(@strVariable) = 1
      BEGIN
         SET @blnHadRP = 1
         IF @ClinState < @LOCALIZED
         BEGIN
           SET @ClinState = @LOCALIZED
           IF @EForm=1
              BEGIN
                 SET @ClinStateID = @intPrimaryKey
                 SET @ClinStateTable = @strTableName
              END   
           IF @dteDate IS NOT NULL
              BEGIN
                 SET @ClinStateDate = @dteDate
                 SET @ClinStateDteText = @strDate
              END                                         
         END
         IF @blnPreTx = 1 
            IF @dteDate IS NOT NULL
               SET @TxDate = @dteDate
         SET @strOutput = @strOutput + @strDate + ' ' + @strVariable + ' ' + @strValue -- + @CharLineFeed
         IF @EForm=1
            BEGIN
            	SET @strTableNames = 'ProstatectomyProc'
               SET @strPrimaryKeys = CAST(@intPrimaryKey as varchar(50))
               SET @strVarDelimited = '__'+ @strDate + ' ' + @strVariable + '|'
               IF @strValue <> ''
                  BEGIN
                     SELECT TOP 1 @ProstatePathId=ProstatectomyPath.PathologyId 
                     FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId=Pathology.ProcedureId
                                     INNER JOIN ProstatectomyPath ON Pathology.PathologyId=ProstatectomyPath.PathologyId
                     WHERE Procedures.ProcedureId=@intPrimaryKey
                     IF @ProstatePathId IS NOT NULL
                        BEGIN
                           SET @strTableNames = @strTableNames + ',ProstatectomyPath'
                           SET @strPrimaryKeys =  @strPrimaryKeys + ',' + CAST(@ProstatePathId as varchar(50))
                           SET @strVarDelimited = @strVarDelimited + '__' + @strValue + '|'
                        END
                     ELSE
                        SET @strVarDelimited = @strVarDelimited + '__' + @strValue + '|'

                     SELECT TOP 1 @PLNDProcId=Procedures.ProcedureId 
                     FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId=Pathology.ProcedureId
                     WHERE Procedures.OperatingRoomDetailId IN
                           (SELECT OperatingRoomDetailId FROM Procedures WHERE ProcedureId=@intPrimaryKey) AND 
                           Procedures.PatientId=@PatientId AND ProcName='PLND' AND PathResult IS NOT NULL
                     IF @PLNDProcId IS NOT NULL
                        BEGIN
                           SET @strTableNames = @strTableNames + ',Procedures'
                           SELECT @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@PLNDProcId as varchar(50))
                           IF @ProstatePathId IS NOT NULL
                              SET @strVarDelimited = REPLACE(@strVarDelimited,'LNI','|__LNI')
                        END
                  END
               INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,@strVarDelimited,@strTableNames,@strPrimaryKeys)
               SET @strTableNames = ''
               SET @strPrimaryKeys = ''
               SET @strVarDelimited = ''
            END
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''   
      END      
      ELSE
      -- Display all these other surgeries
      IF (@strVariable LIKE '%Orchiectomy') OR @strVariable IN('Nephrectomy','RPLND','Cystectomy')
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' + @strValue
         IF @EForm=1     
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE 
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''
      END
      ELSE
      -- Status    
      IF @strVariable = 'Status'
      BEGIN

      -- Extent of Disease
         IF @strValue IN('Localized','LCR','Local Recurrence')
            BEGIN
               IF @ClinState < @LOCALIZED                   BEGIN
                        SET @ClinState = @LOCALIZED
                        IF @EForm=1
                           BEGIN
                              SET @ClinStateID = @intPrimaryKey
                              SET @ClinStateTable = @strTableName
                           END   
                        IF @dteDate IS NOT NULL
                           BEGIN
                              SET @ClinStateDate = @dteDate
                              SET @ClinStateDteText = @strDate
                           END
                  END
            END
         ELSE
            IF @strValue IN('BCR','Biochemical Recurrence')
            BEGIN
               IF @Castrate = 1 AND @ClinState < @RISING_PSA_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_CASTRATE
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
               ELSE IF @ClinState < @RISING_PSA_NON_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_NON_CASTRATE
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         ELSE
            IF @strValue IN('RisingPSA_Castrate','Rising PSA Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('RisingPSA_NonCastrate','Rising PSA Non-Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_NON_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_NON_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsNonCastrate','Non-Castrate Mets','Clinical Mets Non-Castrate')
            BEGIN
               IF @ClinState < @NON_CASTRATE_METS
               BEGIN
                  SET @ClinState = @NON_CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsCastrate','Castrate Mets','Clinical Mets Castrate')
            BEGIN
               IF @ClinState < @CASTRATE_METS
               BEGIN
                  SET @ClinState = @CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('METS','Distant Metastasis')
            BEGIN
               IF @ClinState < @CASTRATE_METS AND @Castrate = 1
                  BEGIN
                     SET @ClinState = @CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
               ELSE IF @ClinState < @NON_CASTRATE_METS
                  BEGIN
                     SET @ClinState = @NON_CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         ELSE
            IF @strValue IN('DOD','DOC','DUC','Dead','Death from Prostate Cancer','Death from Other Cause',
                            'Death from Unknown Causes')
            BEGIN
               If @ClinState < @DEAD 
                  BEGIN
                     SET @ClinState = @DEAD
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         ELSE
            IF @strValue = 'Active Surveillance'
               BEGIN
                  IF @ActiveSurId IS NULL
                     BEGIN 
                        SELECT @ActiveSurId=StatusId
                        FROM Status 
                        WHERE Status = 'Active Surveillance' AND
                              StatusDisease IN('Prostate','Prostate Cancer') AND
                              StatusDate IS NOT NULL AND
                              StatusId = @intPrimaryKey

                        IF @ActiveSurId IS NOT NULL
                           BEGIN 
                              SET @strOutput = @strDate + ' Started ' + @strValue
                              IF @EForm=1
                                 INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
                              ELSE
                                 INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
                              SET @strOutput = ''
                           END
                     END
               END
      END
      --PRINT @strDate + ' ' + @strVariable + ' ' + @strValue + ' ' + @strDataQuality
      --SET @stoptime= GETDATE()
      --SET @strdebug = @strdebug + char(10) + @strVariable + ' ' + @stoptime --Cast to text
      --SELECT @stoptime - @starttime
      FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@intPrimaryKey,@strTableName
      --SET @starttime= GETDATE()
   END
   DEALLOCATE tables_cursor
   --PRINT @strdebug
END      
   
   -- assembles diagnosis date, stage, grade, pre tx psa line
   IF @EForm=1
      BEGIN
         IF @DxBxDate <> @MISSING_DATE
            BEGIN
               SET @strPatientHPI = @DxBxDateText + ' '
            	SET @strTableNames = 'Procedures'
               SET @strPrimaryKeys = CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = '__' + @DxBxDateText + '|'
            END 
         IF @ClinStageT <> ''
            BEGIN
               SET @strPatientHPI = @strPatientHPI + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ') '
               SET @strTableNames = @strTableNames + ',ClinicalStages'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@ClinStageID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ')|'
            END
         IF @DxBxType <> ''
            BEGIN 
               SET @strPatientHPI =  @strPatientHPI + @DxBxType + ' ' + @DxBxSummary + ' '
               SET @strTableNames = @strTableNames + ',Procedures'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @DxBxType + ' ' + @DxBxSummary + '|'
            END
         IF @PreTxPSA <> @MISSING_NUMBER AND @blnHadRP =1
            BEGIN
               SET @strPatientHPI = @strPatientHPI + ' PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + ' '
               SET @strTableNames = @strTableNames + ',LabTests'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@PreTxPSAID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + '|'
            END
         --strip leading comma from TableNames and PrimaryKeys concatenation
         IF LEFT(@strTableNames,1) = ','
            SET @strTableNames = RIGHT(@strTableNames,LEN(@strTableNames)-1)
         IF LEFT(@strPrimaryKeys,1) = ','
            SET @strPrimaryKeys = RIGHT(@strPrimaryKeys,LEN(@strPrimaryKeys)-1)
         INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@strPrimaryKeys)
         SET @strTableNames = ''
         SET @strPrimaryKeys = ''
         SET @strVarDelimited = ''
      END 
   ELSE
      BEGIN
         IF @DxBxDate <> @MISSING_DATE
            SET @strPatientHPI = @DxBxDateText + ' '
         IF @ClinStageT <> ''
            SET @strPatientHPI = @strPatientHPI + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ') '
         IF @DxBxType <> ''
            SET @strPatientHPI =  @strPatientHPI + @DxBxType + ' ' + @DxBxSummary + ' ' 
         IF @PreTxPSA <> @MISSING_NUMBER AND @blnHadRP =1
            SET @strPatientHPI = @strPatientHPI + ' PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + ' '
         INSERT @SortTable (SortDate,VarString) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI)
      END
   SET @strPatientHPI = ''   -- make sure this is set to '' by default

   --adds pre diagnosis biopsy psa to HPI
   IF @EForm=1
      INSERT INTO @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys)
      SELECT TOP 1 SortDate, VarDate + ' PreDx Biopsy PSA: ' + VarValue,'__'+VarDate + ' PreDx Biopsy PSA: ' + VarValue+'|',TableName,PrimaryKey
      FROM @ChronoTable 
      WHERE TableName='LabTests' AND VarName IN('PSA','PSAUS') AND VarValue<>'' AND SortDate<=@DxBxDate
      ORDER BY SortDate DESC
   ELSE
      INSERT INTO  @SortTable (SortDate,VarString)
      SELECT TOP 1 SortDate, VarDate + ' PreDx Biopsy PSA: ' + VarValue
      FROM @ChronoTable 
      WHERE TableName='LabTests' AND VarName IN('PSA','PSAUS') AND VarValue<>'' AND SortDate<=@DxBxDate
      ORDER BY SortDate DESC

   -- assemble clinical state / status line
   IF @ClinStateDate <> @MISSING_DATE
      BEGIN
         SET @strPatientHPI = @strPatientHPI + @ClinStateDteText + ' '
         -- decode numeric clinical states back into text for display
         --IF @ClinState = @NO_PROSTATE_CANCER_DIAGNOSIS
         --   SET @strPatientHPI = @strPatientHPI + '' --Removed 'No Prostate Cancer Diagnosis '
         IF @ClinState = @LOCALIZED
            SET @strPatientHPI = @strPatientHPI + 'Localized'
         IF @ClinState = @RISING_PSA_NON_CASTRATE
            SET @strPatientHPI = @strPatientHPI + 'Rising PSA Non-Castrate'
         IF @ClinState = @RISING_PSA_CASTRATE
            SET @strPatientHPI = @strPatientHPI + 'Rising PSA Castrate'
         IF @ClinState = @NON_CASTRATE_METS
            SET @strPatientHPI = @strPatientHPI + 'Non-Castrate Mets'
         IF @ClinState = @CASTRATE_METS
            SET @strPatientHPI = @strPatientHPI + 'Castrate Mets'
         IF @ClinState = @DEAD
            SET @strPatientHPI = @strPatientHPI + 'Dead'
         IF @EForm=1
            BEGIN
               SET @strVarDelimited = '__' + @strPatientHPI + '|'
               SET @strTableNames = @ClinStateTable
               SET @strPrimaryKeys = CAST(@ClinstateID as varchar(50))
               INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@strPrimaryKeys)
               SET @strTableNames = ''
               SET @strPrimaryKeys = ''
               SET @strVarDelimited = ''
            END
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI)
      END     
   SET @strPatientHPI = ''   
  
   IF @EForm=1
      BEGIN
         SELECT VarString AS PatientHPI,VarDelimited AS PatientHPIDelimited,TableNames,PrimaryKeys
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   ELSE
      BEGIN
         SELECT VarString AS PatientHPI 
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   --SELECT * FROM @ChronoTable
  
   SELECT @DxBiopsyID AS DxBiopsyId, NULL AS PreRPNomo,NULL AS PreRPError, 
          NULL AS PreXRTNomo, NULL AS PreXRTError, NULL AS PreBrachyNomo,
          NULL AS PreBrachyError,NULL AS PostRP2yrNomo,NULL AS PostRP5yrNomo,
          NULL AS PostRP7yrNomo,NULL PostRPError

   --Retired, used to view the parameters used to calculate nomogram scores
   IF @NomogramValues = 1 
      SELECT NULL AS PreTxPSA ,NULL AS ClinStage, NULL AS ClinStageSystem, 
             NULL AS ClinStage92, NULL AS ClinStage97, NULL AS BxGG1, 
             NULL AS BxGG2,NULL AS NeoAdjHormTx,NULL AS NeoAdjRadTx,
             @DxBiopsyID AS DxBiopsyId,NULL AS BxGGS, NULL AS XRTDose,NULL AS RP_GGS,
             NULL as RP_ECE,NULL AS RP_MarginStatus,NULL AS RP_SVI,NULL AS RP_LNI
GO

--36ModifyspGetPatientHPIBladder.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spGetPatientHPIBladder]
   @PatientId int = NULL,
   @Rowcount int = NULL OUTPUT
AS
SET NOCOUNT ON
--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

/*
SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'

DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate     datetime NULL,
   VarString    varchar(255) NULL
   )
*/
DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarSummary
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarSummary   varchar(1000) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   TableName    varchar(50) NULL,
   PrimaryKey   int NOT NULL,
   VarStopDate  varchar(50) NULL,
   ExtraInfo    varchar(500) NULL,
   RelatedProcId int NULL
   )

--LookupCodes cached and reused throughtout algorithm.
DECLARE @Codes TABLE
	(
	LkpCode varchar(255) NOT NULL,
   AttributeValue varchar(50) NOT NULL,
   PRIMARY KEY CLUSTERED (LkpCode, AttributeValue)
	)

INSERT INTO @Codes (LkpCode,AttributeValue)
SELECT DISTINCT LkpCode,AttributeValue
FROM LookupCodes a INNER JOIN 
     LookupCodeAttributes b ON a.LookupCodeId=b.LookupCodeId INNER JOIN
     LookupAttributes c ON b.AttributeId=c.AttributeId
WHERE LkpFieldName = 'HPI_Algorithm' AND
      AttributeName = 'HPI_Bladder'
ORDER BY AttributeValue, LkpCode

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey,ExtraInfo)
SELECT MedTxDateText, MedTxType, MedTxAgent + ISNULL(' (' +  MedTxCycle + ' Cycles) ','') , MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId,
       CASE WHEN LkpCode IS NOT NULL THEN 'Intravesical'
            ELSE 'Systemic'
       END
FROM MedicalTherapy LEFT OUTER JOIN 
     @Codes Codes ON MedTxAgent = LkpCode AND AttributeValue = 'IntravesicalMedTx' 
WHERE PatientId = @PatientId

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,RelatedProcId,ExtraInfo)
SELECT ProcDateText,ProcName, ISNULL(UD_ProcName+' ',''),
       ProcQuality, ProcDate, 'Procedures', Procedures.ProcedureId, UD_ProcedureId, 'ProcCystectomy'
FROM Procedures LEFT OUTER JOIN (
                                SELECT OperatingRoomDetailId, MAX(ProcedureId) AS UD_MAX_ProcedureId
                                FROM Procedures INNER JOIN 
                                     @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'UrinaryDiversion'     
                                WHERE PatientId=@PatientId
                                GROUP BY OperatingRoomDetailId 
                                ) AS MaxUD ON Procedures.OperatingRoomDetailId = MaxUD.OperatingRoomDetailId 
                LEFT OUTER JOIN (
                                SELECT ProcName AS UD_ProcName,ProcedureId AS UD_ProcedureId
                                FROM Procedures 
                                WHERE PatientId=@PatientId
                                ) AS UrinaryDiversions ON UrinaryDiversions.UD_ProcedureId = MaxUD.UD_MAX_ProcedureId
                INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'Cystectomy'    
WHERE Procedures.PatientId = @PatientId

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,RelatedProcId,ExtraInfo)
SELECT ProcDateText,'Bladder Path: ',
       LTRIM(
       + ISNULL(PathStageT+' ','') + ISNULL(PathStageM+' ','') + ISNULL(PathGrade+' ','') 
       + ISNULL(PathHistology+' ','') + ISNULL('Margin:'+PathBladderMargin+' ','')
       + ISNULL('Prostate Inv:'+PathProstateInv+' ',''))
       + ISNULL('Nodes:' + dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)),'')
       , ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Pathology', Pathology.PathologyId, Procedures.ProcedureId, 'PathCystectomy'
FROM Procedures INNER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN ProstatectomyPath ON Pathology.PathologyId = ProstatectomyPath.PathologyId
                LEFT OUTER JOIN CystectomyPath ON Pathology.PathologyId = CystectomyPath.PathologyId
                INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'Cystectomy'
WHERE Procedures.PatientId = @PatientId AND 
      ProstatectomyPath.PathologyId IS NULL

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,ExtraInfo)
SELECT ProcDateText, 'Prostate Path: ', 
       LTRIM(ISNULL(PathHistology+' ','') + ISNULL(PathStageT+' ',''))
       + dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)), 
       ISNULL(Pathology.PathQuality,ProcQuality), ProcDate,  
       CASE WHEN Pathology.PathologyId IS NOT NULL THEN 'Pathology' ELSE 'Procedures' END, ISNULL(Pathology.PathologyId,Procedures.ProcedureId), 'PathProstatectomy'
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN ProstatectomyPath ON ProstatectomyPath.PathologyId = Pathology.PathologyId
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'Prostatectomy'
WHERE Procedures.PatientId = @PatientId AND
      (ProstatectomyPath.PathologyId IS NOT NULL OR 
       PathSite IN(SELECT LkpCode FROM @Codes WHERE AttributeValue = 'SiteProstate'))

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,'Orchiectomy', LTRIM(ISNULL(ProcSide,'') + ' ' + ISNULL(ProcApproach,'')), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'Orchiectomy'
WHERE Procedures.PatientId = @PatientId

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, '', LTRIM(ISNULL(ProcSide + ' ','')  + ISNULL(ProcName,'')), ProcQuality, ProcDate, 'Procedures',Procedures.ProcedureId
FROM Procedures INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'Nephrectomy'
WHERE Procedures.PatientId = @PatientId

--Show all TUR% with the Path results or any other endoscopies that have a result of Fulguration
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,ExtraInfo)
SELECT ProcDateText, ISNULL(ProcName,'Endoscopy'), LTRIM(ISNULL(PathStageT + ' ','') + ISNULL(PathGrade + ' ' ,'') + ISNULL(PathResult,'')), ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
       , CASE WHEN PathResult LIKE '%Positive%' OR PathHistology IS NOT NULL THEN 'PathPositive' END
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'TUR'
WHERE (Procedures.PatientId = @PatientId) AND 
      (LkpCode IS NOT NULL OR 
       PathResult IN(SELECT LkpCode FROM @Codes WHERE AttributeValue = 'TURFulguration'))

--put in the last 3 endoscopies that are not already in
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT TOP 3 ProcDateText, ISNULL(ProcName,'Endoscopy'), LTRIM(ISNULL(PathGrade + ' ' ,'') + ISNULL(PathResult,'')), ISNULL(b.PathQuality,ProcQuality), ProcDate, 'Procedures', a.ProcedureId
FROM Procedures a LEFT OUTER JOIN Pathology b ON a.ProcedureId = b.ProcedureId AND
                    ISNULL(b.PathSpecimenType,'') NOT IN(SELECT LkpCode FROM @Codes 
                                                         WHERE AttributeValue = 'CytologySpecimen')
                  LEFT OUTER JOIN PathologyStageGrade c ON b.PathologyId = c.PathologyId
                  LEFT OUTER JOIN 
                  (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'Procedures') AS d
                   ON a.ProcedureId = d.PrimaryKey
                  INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'Endoscopy'
WHERE a.PatientId = @PatientId AND d.PrimaryKey IS NULL 
ORDER BY ProcDate DESC

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'RPLND', LTRIM(ISNULL(ProcApproach,'') + ' ' + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathStageN,'') + ' ' +  ISNULL(PathStageM,'')),
       ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'RPLND'
WHERE Procedures.PatientId = @PatientId

--non prostate biopsies
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'Biopsy', LTRIM(ISNULL(ProcSide,'') + ' ' + ISNULL(ProcName,'') + ' ' + ISNULL(PathResult,'')), ISNULL(PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'BiopsyNonProstate'
WHERE Procedures.PatientId = @PatientId 
AND (Procedures.ProcedureId NOT IN
     (
      SELECT ProcedureId
      FROM Procedures INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'BiopsyProstate'
      WHERE PatientId = @PatientId AND 
            ProcSite IN(SELECT LkpCode FROM @Codes WHERE AttributeValue = 'SiteProstate')
     ))

--procedures not in the current list exclude prostate biopsies, endoscopies and already included urinary diverion record
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, LTRIM(ISNULL(RIGHT(PathStageSystem,2),'') + ' '  + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ISNULL(PathStageM,'') + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathResult,'')), ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN 
                (SELECT PrimaryKey,VarName,ExtraInfo FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
                LEFT OUTER JOIN @Codes BiopsyProstate ON ProcName = BiopsyProstate.LkpCode AND BiopsyProstate.AttributeValue = 'BiopsyProstate'
                LEFT OUTER JOIN @Codes Endoscopy ON ProcName = Endoscopy.LkpCode AND Endoscopy.AttributeValue = 'Endoscopy'
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL AND
      BiopsyProstate.LkpCode IS NULL AND Endoscopy.LkpCode IS NULL AND
      Procedures.ProcedureId NOT IN (SELECT RelatedProcId FROM @ChronoTable WHERE TableName='Procedures' AND ExtraInfo = 'ProcCystectomy')

--Add in cytology side by side comparison first by PK then by date
UPDATE @ChronoTable 
   SET VarSummary = VarSummary +  ' / ' + PathSpecimenType + ' ' + PathResult
FROM @ChronoTable a INNER JOIN 
     Pathology b ON a.PrimaryKey = b.ProcedureId AND
                    b.PathSpecimenType IN(SELECT LkpCode FROM @Codes 
                                          WHERE AttributeValue = 'CytologySpecimen')
WHERE b.PatientId = @PatientId AND
      VarName IN('Cystoscopy','Endoscopy') AND
      b.PathResult IS NOT NULL

UPDATE @ChronoTable 
   SET VarSummary = VarSummary +  ' / ' + PathSpecimenType + ' ' + PathResult
FROM @ChronoTable a INNER JOIN Pathology b ON b.PatientId = @PatientId AND
                                              a.SortDate = b.PathDate AND
                                              b.PathSpecimenType = 'Cytology' AND
                                              a.PrimaryKey <> b.ProcedureId
WHERE b.PatientId = @PatientId AND
      VarName IN('Cystoscopy','Endoscopy') AND
      b.PathResult IS NOT NULL

--Clean up columns
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarSummary = ''
WHERE VarSummary IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL

--Remove PLND records that are on the same date as cystectomy because the nodes are already displayed
DELETE @ChronoTable FROM @ChronoTable a INNER JOIN 
                           (
                           SELECT SortDate FROM @ChronoTable
                           WHERE TableName='Procedures' AND ExtraInfo = 'ProcCystectomy'
                           ) b ON a.SortDate = b.SortDate
WHERE TableName='Procedures' AND VarName='PLND'  

SELECT LTRIM(VarDate 
            + CASE WHEN VarStopDate IS NULL THEN ' ' ELSE ' - ' + VarStopDate + ' ' END 
            --Remove duplicate Labeling
            + CASE WHEN CHARINDEX (VarName,VarSummary) <> 0 THEN '' ELSE VarName + ' ' END 
            + VarSummary) AS PatientHPI,VarName,VarDate,ExtraInfo--, TableName,PrimaryKey,SortDate
FROM @ChronoTable 
ORDER BY SortDate, ChronoId
SET @Rowcount = @@ROWCOUNT
GO

--37ModifyspGetPatientHPITestis.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER  PROCEDURE [dbo].[spGetPatientHPITestis]
   @PatientId int = NULL,
   @Rowcount int = NULL OUTPUT
AS
SET NOCOUNT ON
--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

/*
SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'

DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate     datetime NULL,
   VarString    varchar(255) NULL
   )
*/
DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarSummary
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(100) NULL,
   VarSummary   varchar(1000) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   TableName    varchar(50) NULL,
   PrimaryKey   int NOT NULL,
   VarStopDate  varchar(50) NULL
   --ExtraInfo    varchar(500) NULL
   )

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT MedTxDateText, MedTxType, LTRIM(ISNULL(MedTxIndication,'') + ' ' + ISNULL(MedTxIntent,'') + ' ' + ISNULL(MedTxAgent,'') + ' ' + ISNULL('x '+MedTxCycle,'')), MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId
FROM MedicalTherapy
WHERE (MedicalTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT RadTxDateText, RadTxType, RadTxTotalDose, RadTxQuality, RadTxDate,RadTxStopDateText, 'RadiationTherapy', RadiationTherapyId
FROM RadiationTherapy
WHERE (RadiationTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,'Orchiectomy', LTRIM(ISNULL(ProcSide,'') + ' ' + ISNULL(ProcApproach,'') + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageSystem,'')), Pathology.PathQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
WHERE Procedures.PatientId = @PatientId AND ProcName = 'Orchiectomy'

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'RPLND', LTRIM(ISNULL(ProcApproach,'') + ' ' + CASE WHEN ProcDesperation='Yes' THEN 'Desp:Yes' ELSE '' END  + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathStageSystem,'') + ' ' + ISNULL(PathStageGroup,'') + ' ' + ISNULL(PathStageN,'') + ' ' +  ISNULL(PathStageM,'')
       + ' ' + ISNULL((SELECT TOP 1 Status + ' ' + CAST(ISNULL(StatusNotes,'') as varchar(50))FROM Status WHERE (Status.PatientId = @PatientId AND Status = 'Last AFP' AND StatusDate=ProcDate)),'')
       + ' ' + ISNULL((SELECT TOP 1 Status + ' ' + CAST(ISNULL(StatusNotes,'') as varchar(50))FROM Status WHERE (Status.PatientId = @PatientId AND Status = 'Last bHCG' AND StatusDate=ProcDate)),'')), 
       ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN RPLND_Proc ON Procedures.ProcedureId = RPLND_Proc.ProcedureId
WHERE Procedures.PatientId = @PatientId AND ProcName = 'RPLND'

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,'', LTRIM(ISNULL(ProcName,'') + ' ' + ISNULL(RIGHT(PathStageSystem,2),'') + ' ' 
       + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageM,'') +  ISNULL(PathGrade,'') + ' ' +  ISNULL(PathHistology,''))
       , ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN CystectomyPath ON CystectomyPath.PathologyId = Pathology.PathologyId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
WHERE Procedures.PatientId = @PatientId AND ProcName IN('Cystectomy','CP','Cysto-Prostatectomy','Partial Cystectomy','Radical Cystectomy','Salvage Radical Cystectomy')

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ISNULL(ProcName,'Prostatectomy'),dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(PathQuality,ProcQuality)) + ' (' + ISNULL(PathQuality,ProcQuality) + ')', ISNULL(PathQuality,ProcQuality), ProcDate,  'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN ProstatectomyPath ON ProstatectomyPath.PathologyId = Pathology.PathologyId
WHERE Procedures.PatientId = @PatientId AND ProcName IN('CP','LP','LP_CONV','PP','RALP','RP','SalvCP','SalvLP','SalvRP')
      AND Procedures.ProcedureId NOT IN (SELECT PrimaryKey FROM @ChronoTable WHERE TableName='Procedures')

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, '', LTRIM(ISNULL(ProcSide,'') + ' '  + ISNULL(ProcName,'')), ProcQuality, ProcDate, 'Procedures',Procedures.ProcedureId
FROM Procedures
WHERE Procedures.PatientId = @PatientId AND ProcName IN('Nephrectomy','Partial Nephrectomy','Laparoscopic Nephroureterectomy','Partial for Horshoe Kidney','Laparoscopic Partial Nephrectomy','Nephroureterectomy','Laparoscopic Radical Nephrectomy','Radical Nephrectomy','Exploratory Laparotomy')

--non prostate biopsies
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, '', LTRIM(ISNULL(ProcSide,'') + ' ' + ISNULL(ProcName,'') + ' ' + ISNULL(PathResult,'')), ISNULL(PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
WHERE Procedures.PatientId = @PatientId AND ProcName IN('Open Excisional Biopsy','Bone Marrow Biopsy','Biopsy','Needle Biopsy','Brushings','Needle Aspiration')
AND (Procedures.ProcedureId NOT IN
     (
      SELECT ProcedureId
      FROM Procedures 
      WHERE PatientId = @PatientId AND ProcSite='Prostate' AND ProcName IN('TURP','TRUS Biopsy','Biopsy','Needle Biopsy')
     ))

--prostate biopsy
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, CAST(dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) as varchar(255)), ISNULL(PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN ProstateBiopsyPath ON Pathology.PathologyId=ProstateBiopsyPath.PathologyId
WHERE Procedures.PatientId = @PatientId AND 
      ProcSite='Prostate' AND ProcName IN('TURP','TRUS Biopsy','Biopsy','Needle Biopsy')

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ISNULL(ProcName,'Endoscopy'), LTRIM(ISNULL(RIGHT(PathStageSystem,2),'') + ' '  + ISNULL(PathStageT,'') + ' ' + ISNULL(PathGrade,'') + ' ' + ISNULL(PathResult,'')), ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
WHERE Procedures.PatientId = @PatientId AND ProcName IN('TURBT','TURBN','TURB','TUR','Cystoscopy','Endoscopy')

--procedures not in the current list
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, LTRIM(ISNULL(PathStageSystem,'') + ' '  + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ISNULL(PathStageM,'') + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathResult,'')) , ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN 
                (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)SELECT ClinStageDateText, ClinStageSystem, LTRIM(ISNULL(ClinStageGroup,'') + ' ' + ISNULL(CAST(ClinStageNotes as varchar(50)),'') + ' ' + ISNULL(ClinStageT,'')), ClinStageQuality, ClinStageDate, 'ClinicalStages', ClinicalStageId
FROM ClinicalStages
WHERE (ClinicalStages.PatientId = @PatientId AND ClinStageDisease='Testis')

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ToxDateText, ToxName, '', ToxQuality, ToxDate, 'Toxicities', ToxicityId
FROM Toxicities
WHERE (Toxicities.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT '', Category, '', '', '', 'Categories', CategoryId
FROM Categories
WHERE (Categories.PatientId = @PatientId AND Category IN ('TestisLateRelapse','TestisFailedSurveillance','TestisSurveillance'))

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT SurveyDateText,SurveyType,LTRIM(ISNULL(SurveyItem,'') + ' ' + ISNULL(SurveyItemResult,'')),SurveyQuality,SurveyDate,'SurveyItems',SurveyItems.SurveyItemId
FROM Surveys INNER JOIN SurveyItems ON Surveys.SurveyId = SurveyItems.SurveyId
WHERE (Surveys.PatientId=@PatientId AND SurveyType='Testis Relapse')

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT EncDateText,ROS_Symptom,LTRIM(ISNULL(ROS_Result,'') + ' ' + ISNULL(ROS_Notes,'')),EncQuality,EncDate,'EncReviewOfSystems',EncReviewOfSystemId
FROM Encounters INNER JOIN EncReviewOfSystems ON Encounters.EncounterId = EncReviewOfSystems.EncounterId
                INNER JOIN Procedures ON Encounters.PatientId = Procedures.PatientId
WHERE (Encounters.PatientId=@PatientId AND ROS_Symptom = 'Ejaculation' AND ProcName='RPLND') AND 
      (EncDate IS NULL OR EncDate>ProcDate)

--Clean up variables
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarSummary = ''
WHERE VarSummary IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL

SELECT LTRIM(VarDate + ' ' + CASE WHEN VarName<>'' THEN VarName + ' ' ELSE '' END 
            + VarSummary) AS PatientHPI--,VarName,VarDate
FROM @ChronoTable 
ORDER BY SortDate
SET @Rowcount = @@ROWCOUNT
GO

--38ModifyspGetPatientHPIProstateGU.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spGetPatientHPIProstateGU]
   @PatientId int = NULL,
   @EForm bit = 0,
   @Rowcount int = NULL OUTPUT
AS
SET NOCOUNT ON
--These variables are for debuging / testing speed
DECLARE @starttime datetime
DECLARE @stoptime datetime
Declare @strDebug varchar(8000)
--End of Debug variables

DECLARE @strPatientHPI     varchar(500)
DECLARE @strDate           varchar(50)
DECLARE @strStopDate       varchar(50)
DECLARE @dteDate           datetime
DECLARE @strVariable       varchar(50)
DECLARE @strValue          varchar(255)
DECLARE @strDataQuality    varchar(50)
DECLARE @strTableName      varchar(50)
DECLARE @strExtraInfo      varchar(50) 
DECLARE @intPrimaryKey     int
DECLARE @i                 int
DECLARE @blnPreTx          bit
DECLARE @blnValidPSA       bit
DECLARE @sngTime           float(24) --VBA single float(53) double
DECLARE @BiopsyDate        datetime
DECLARE @BiopsyDays        float(24) -- number of days after prostate biopsy that PSA is invalid
DECLARE @strOutPut         varchar(500)

--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'
SET @BiopsyDate = @MISSING_DATE
SET @BiopsyDays = 21

--Clinical states constants (must be ordered)
DECLARE @NO_PROSTATE_CANCER_DIAGNOSIS smallint
DECLARE @LOCALIZED                    smallint
DECLARE @RISING_PSA_NON_CASTRATE      smallint
DECLARE @RISING_PSA_CASTRATE          smallint
DECLARE @NON_CASTRATE_METS            smallint
DECLARE @CASTRATE_METS                smallint
DECLARE @DEAD                         smallint
SET @NO_PROSTATE_CANCER_DIAGNOSIS = 0
SET @LOCALIZED = 1
SET @RISING_PSA_NON_CASTRATE = 2
SET @RISING_PSA_CASTRATE = 3
SET @NON_CASTRATE_METS = 4   
SET @CASTRATE_METS = 5  
SET @DEAD = 6

--This is used to determine castrate clinical states
DECLARE @CASTRATE_TESTOSTERONE_LEVEL smallint
SET @CASTRATE_TESTOSTERONE_LEVEL = 50

DECLARE @ClinStateDate    datetime        --date of last clinical state transition
DECLARE @ClinStateDteText varchar(50)     --datetext of last clinical state transition
DECLARE @ClinState        int             --current clinical state (0 to 5)
DECLARE @Castrate         bit             --castrate levels of testosterone (<50)
DECLARE @DxBiopsyID       int             --primary key for diagnostic biopsy record
DECLARE @DxBxDate         datetime        --date of diagnostic (first positive) biopsy
DECLARE @DxBxDateText     varchar(50)     --datetext of diagnostic (first positive) biopsy
DECLARE @DxBxType         varchar(50)     --diagnostic biopsy type: TURP or needle
DECLARE @DxBxSummary      varchar(50)     --pathologic summary of diagnostic biopsy: eg. 3+4
DECLARE @DxBxQuality      varchar(50)     --data quality for diagnostic biopsy
DECLARE @PreTxPSA         float(24)       --valid PSA before any "curative" treatment (XRT or RP)
DECLARE @PreTxPSADate     datetime 
DECLARE @PreDxBxPSA       varchar(50)     --PSA right before diagnostic biopsy
DECLARE @ClinStageDate	  datetime 
DECLARE @ClinStageSystem  varchar(50)     --UICC TNM staging system used
DECLARE @ClinStageT       varchar(50)     --pre-treatment UICC Tumor Stage
DECLARE @ClinStageN       varchar(50)     --pre-treatment UICC Nodes Stage
DECLARE @ClinStageM       varchar(50)     --pre-treatment UICC Metastatis Stage
DECLARE @ClinStageQuality varchar(50)     --data quality of clinical staging data
DECLARE @NeoAdjHormTx     varchar(50)     --patient has had neo-adjuvant hormone therapy
DECLARE @NeoAdjHormTxDate datetime        --date of first hormone therapy (all PSAs after this are invalid?)
DECLARE @NeoAdjRadTx      varchar(50)     --patient has had neo-adjuvant radiation therapy
DECLARE @NeoAdjRadTxDate  datetime        --date of last neo-adjuvant radiation therapy (all following pre-tx PSAs are invalid)
DECLARE @NeoAdjChemoTx    varchar(50)     --patient has had neo-adjuvant chemotherapy
DECLARE @NeoAdjChemoDate  datetime        --date of last neo-adjuvant chemotherapy
--DECLARE @Prostatectomy    bit           --patient had prostatectomy (means he will always use RP PSA recurrence methods)
DECLARE @TxDate           datetime        --date of first "curative" treatment
DECLARE @TxType           varchar(50)     --curative treatment type
DECLARE @AdjHormTx        varchar(50)
DECLARE @AdjChemoTx       varchar(50)
--DECLARE @NumPSAs          int --number of PSAs after curative treatment
DECLARE @EOD              varchar(50)     --last extent of disease 
DECLARE @LastPSA_Value    varchar(50)
DECLARE @LastPSA_Date     datetime   

DECLARE @HormEvent        varchar(50)
DECLARE @HormTxDate       datetime
DECLARE @MetsEvent        varchar(50)
DECLARE @ChemoTxDate      datetime

--used for eform
DECLARE @strTableNames     varchar(200)
DECLARE @strPrimaryKeys    varchar(50)
DECLARE @strVarDelimited   varchar(500)
DECLARE @strFilters        varchar(200)
DECLARE @strQualities      varchar(200)
DECLARE @ClinStageID       int             --primary key for diagnostic clinical stage record
DECLARE @PreTxPSAID        int             --primary key for pre prostatectomy psa record
DECLARE @PreDxBxPSAID      int             --primary key for pre diagnosis biopsy psa record
DECLARE @PreDxBxPSAQuality varchar(50)     --data quality for pre diagnosis biopsy psa record
DECLARE @ClinStateID       int             --primary key for clin state record
DECLARE @ClinStateTable    varchar(50)     --table name where clin state obtained from
DECLARE @ClinStateQuality  varchar(50)     --data quality of clin state
DECLARE @blnHadRP          bit             --patient had prostatectomy
DECLARE @ProstatePathId    int             --primary key for ProstatectomyPath record
DECLARE @PLNDPathId        int             --primary key for Pathology of the PLND record
DECLARE @NO_PK             varchar(50)     --used to indicate that a table has no data for delimited format
DECLARE @NO_DQ             varchar(50)     --used to indicate that a table has no data quality for delimited format

--used for eform
SET @strTableNames    = ''
SET @strPrimaryKeys   = ''
SET @strVarDelimited  = ''
SET @strQualities = ''
SET @NO_PK = ',NO_PK'
SET @NO_DQ = 'NO_DQ'

SET @ClinStateDate     = @MISSING_DATE
SET @ClinStateDteText  = ''
SET @ClinState         = @NO_PROSTATE_CANCER_DIAGNOSIS
SET @Castrate          = 0
SET @DxBxDate          = @MISSING_DATE
SET @DxBxDateText      = ''
SET @DxBxType          = ''
SET @DxBxSummary       = ''
SET @DxBxQuality       = ''
SET @PreTxPSA          = @MISSING_NUMBER
SET @PreTxPSADate      = @MISSING_DATE
SET @ClinStageDate     = @MISSING_DATE
SET @ClinStageSystem   = ''
SET @ClinStageT        = ''
SET @ClinStageN        = ''
SET @ClinStageM        = ''
SET @ClinStageQuality  = ''
SET @NeoAdjHormTx      = 0
SET @NeoAdjHormTxDate  = @MISSING_DATE
SET @NeoAdjRadTx       = 0
SET @NeoAdjRadTxDate   = @MISSING_DATE
SET @NeoAdjChemoTx     = 0
SET @NeoAdjChemoDate   = @MISSING_DATE
SET @HormTxDate        = @MISSING_DATE
SET @ChemoTxDate       = @MISSING_DATE
--SET @Prostatectomy    = 0
SET @TxDate            = @MISSING_DATE
SET @TxType            = ''
--SET @NumPSAs          = 0
SET @EOD               = ''
SET @LastPSA_Value     = @MISSING_NUMBER
SET @LastPSA_Date      = @MISSING_DATE
SET @MetsEvent         = ''
SET @HormEvent         = ''
SET @PreDxBxPSA        = ''
SET @PreDxBxPSAQuality = ''

DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate              datetime NULL,
   VarString             varchar(500) NULL,
   VarDelimited          varchar(500) NULL,
   TableNames            varchar(200) NULL,
   Qualities             varchar(50) NULL,
   PrimaryKeys           varchar(50) NULL,
   StopDateText          varchar(50) NULL,
   Filters               varchar(200) NULL
   )

DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarValue
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarValue     varchar(255) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   VarStopDate  varchar(50) NULL,
   TableName    varchar(50) NULL,
   PrimaryKey   int NULL,
   VarExtraInfo varchar(110) NULL,
   Filters      varchar(200) NULL,
   VarDelimited varchar(500) NULL,
   TableNames   varchar(200) NULL,
   Qualities    varchar(50) NULL,
   PrimaryKeys  varchar(50) NULL
   )

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ProcName, CAST(dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) as varchar(255)), ISNULL(PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId,ProcSite,
       'ProstateProc',
       '__' + ISNULL(ProcDateText,'') + ISNULL(' ' + ProcName,'') + '|' + '__' + ISNULL(CAST(dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) as varchar(255)),'')  + '|',
       'Procedures,ProstateBiopsyPath', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ), CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(ProstateBiopsyPath.PathologyId as varchar(50)),@NO_PK)
FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN ProstateBiopsyPath ON Pathology.PathologyId=ProstateBiopsyPath.PathologyId
WHERE Procedures.PatientId = @PatientId AND 
      ProcSite='Prostate' AND ProcName IN('TURP','TRUS Biopsy','Biopsy','Needle Biopsy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo)
SELECT ClinStageDateText, ClinStageSystem, ClinStageT, ClinStageQuality, ClinStageDate, 'ClinicalStages', ClinicalStageId,
       ISNULL(ClinStageN,'') + ISNULL(',' + ClinStageM,'')
FROM ClinicalStages
WHERE (ClinicalStages.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT DxDateText, DxType, DxResult, DxQuality, DxDate,  'Diagnostics', DiagnosticId
FROM Diagnostics
WHERE (Diagnostics.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT LabDateText, LabTest, LabResult, LabQuality, LabDate, 'LabTests', LabTestId
FROM LabTests
WHERE (LabTests.PatientId = @PatientId AND LabTest IN ('PSA','TEST') AND LabResult IS NOT NULL)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey,VarExtraInfo,Filters)
SELECT MedTxDateText, MedTxType, MedTxAgent, MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId,ProtocolNum, 'MedTxType_' + MedTxType
FROM MedicalTherapy LEFT OUTER JOIN Protocols ON MedicalTherapy.ProtocolId=Protocols.ProtocolId
WHERE (MedicalTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText,LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy'), ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,''), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId,'TestisProc',
       '__' + ISNULL(ProcDateText,'') +  ' ' + LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy') + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK)       
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId
WHERE Procedures.PatientId = @PatientId AND ProcName = 'Orchiectomy'

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText,'Cystectomy', LTRIM(ISNULL(ProcName,'') + ' ' + ISNULL(RIGHT(PathStageSystem,2),'') + ' ' 
       + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' + ISNULL(PathStageM,'') + ' ' + ISNULL(PathGrade,'') + ' ' + ISNULL(PathResult,'') + ' ' +  ISNULL(PathHistology,'') + ' '
       + CASE WHEN UD_OperatingRoomDetailId IS NULL THEN '' ELSE 'Urinary Diversion:' + UD_ProcName + ' ' END)
       + CASE WHEN Pathology.OperatingRoomDetailId IS NULL THEN '' 
              ELSE ISNULL('Nodes:' + dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)),'')
         END
       , ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId,'BladderProc',
       '__' + ISNULL(ProcDateText,'') + ' ' + LTRIM(ISNULL(ProcName,'')) + '|' + 
       '__' + ISNULL(RIGHT(PathStageSystem,2),'') + ' ' + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' + ISNULL(PathStageM,'') + ' ' + ISNULL(PathGrade,'') + '|' +
       '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,PathologyStageGrade,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathologyStageGrade.PathQuality,','+@NO_DQ) + ISNULL(',' + Pathology.PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + (ISNULL(',' + CAST(PathologyStageGrade.PathologyStageGradeId as varchar(50)),@NO_PK)) + (ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK))
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN (
                                SELECT OperatingRoomDetailId, MAX(ProcedureId) AS UD_MAX_ProcedureId
                                FROM Procedures 
                                WHERE PatientId=@PatientId AND ProcName IN('IlealConduit','NeoBladder','ContCutaneous','ileal conduit','indiana pouch','IndianaPouch','Ileal Loop','Studer Pouch','Sigmoid Conduit','IlealConduit/SigmoidNeobladder')
                                GROUP BY OperatingRoomDetailId 
                                ) AS MaxUD ON Procedures.OperatingRoomDetailId = MaxUD.OperatingRoomDetailId 
                LEFT OUTER JOIN (
                                SELECT OperatingRoomDetailId AS UD_OperatingRoomDetailId, ProcName AS UD_ProcName,ProcedureId AS UD_ProcedureId
                                FROM Procedures 
                                WHERE PatientId=@PatientId
                                ) AS UrinaryDiversions ON UrinaryDiversions.UD_ProcedureId = MaxUD.UD_MAX_ProcedureId  
WHERE Procedures.PatientId = @PatientId AND ProcName IN('Cystectomy','CP','Cysto-Prostatectomy','Partial Cystectomy','Radical Cystectomy','Salvage Radical Cystectomy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ISNULL(ProcName,'Prostatectomy'),
       dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)) +
       ' (' + dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality))+ ')' + 
       ' (' + ISNULL(Pathology.PathQuality,ProcQuality) + ')', 
       ProcQuality, ProcDate,  'Procedures', Procedures.ProcedureId, 'ProstateProc',
       '__' + ISNULL(ProcDateText + ' ' ,'') + '|' + '__' + RTRIM(ISNULL(LkpProcName,'Prostatectomy')) + '|' + '__' + ISNULL(dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)),'') +
       ' (' + dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality))+ ')' + '|',
       'Procedures,ProstatectomyProc,ProstatectomyPath'+ CASE WHEN PLND.PathologyId IS NOT NULL THEN ',Pathology' ELSE '' END, 
       ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + ProcQuality,','+@NO_DQ) + ISNULL(',' + Pathology.PathQuality,','+@NO_DQ) + ISNULL(',' + COALESCE(Pathology.PathQuality,ProcQuality),@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + (ISNULL(',' + CAST(ProstatectomyProc.ProcedureId as varchar(50)),@NO_PK)) + (ISNULL(',' + CAST(ProstatectomyPath.PathologyId as varchar(50)),@NO_PK)) + (ISNULL(',' + CAST(PLND.PathologyId as varchar(50)),'')) 
FROM Procedures LEFT OUTER JOIN ProstatectomyProc ON ProstatectomyProc.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN ProstatectomyPath ON ProstatectomyPath.PathologyId = Pathology.PathologyId 
                LEFT OUTER JOIN (
                                SELECT PathologyId,OperatingRoomDetailId,PathQuality,
                                       ROW_NUMBER() OVER(ORDER BY PathologyId DESC) AS RowNum
                                FROM Pathology
                                WHERE Pathology.PatientId=@PatientId AND PathSpecimenType='PLND'
                                ) PLND ON Procedures.OperatingRoomDetailId = PLND.OperatingRoomDetailId AND
                                          COALESCE(Pathology.PathQuality,ProcQuality,'') = ISNULL(PLND.PathQuality,'') AND
                                          RowNum = 1
               LEFT OUTER JOIN (
                               SELECT LkpCode,LkpDescription LkpProcName
                               FROM LookupCodes 
                               WHERE LkpFieldName = 'ProcName' 
                               ) LKP ON ProcName=LkpCode
WHERE Procedures.PatientId = @PatientId AND ProcName IN('CP','LP','LP_CONV','PP','RALP','RP','SalvCP','SalvLP','SalvRP')
      AND Procedures.ProcedureId NOT IN (SELECT PrimaryKey FROM @ChronoTable WHERE TableName='Procedures')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, 'RPLND', LTRIM(ISNULL(ProcApproach,'') + ' ' + ISNULL(PathResult,'') + ' ' + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' +  ISNULL(PathStageM,'')),
       ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId,'TestisProc',
       '__' + ISNULL(ProcDateText,'') + ' ' + RTRIM(ProcName +  ' ' + ISNULL(ProcApproach,'')) + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|' + '__' + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' +  ISNULL(PathStageM,'') + '|',
       'Procedures,Pathology,PathologyStageGrade', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + Pathology.PathQuality,','+@NO_DQ) + ISNULL(',' + PathologyStageGrade.PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + (ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK)) + (ISNULL(',' + CAST(PathologyStageGrade.PathologyStageGradeId as varchar(50)),@NO_PK))
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
WHERE Procedures.PatientId = @PatientId AND ProcName = 'RPLND'

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ProcName, ISNULL(ProcSide,'') + ' ' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,''), ProcQuality, ProcDate, 'Procedures',Procedures.ProcedureId, 'KidneyProc',
       '__' + ISNULL(ProcDateText,'') +  ' ' + ISNULL(ProcName,'') + ' ' + ISNULL(ProcSide,'') + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK) 
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId
WHERE Procedures.PatientId  = @PatientId AND ProcName IN('Nephrectomy','Partial Nephrectomy','Laparoscopic Nephroureterectomy','Partial for Horshoe Kidney','Laparoscopic Partial Nephrectomy','Nephroureterectomy','Laparoscopic Radical Nephrectomy','Radical Nephrectomy')

--procedures not in the current list
INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ISNULL(ProcName,''), ISNULL(ProcSite,'') + ' ' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,''), ProcQuality, ProcDate, 'Procedures', Procedures.ProcedureId, 
       CASE WHEN ProcName='PLND' THEN 'ProstateProc' 
            WHEN ProcName LIKE 'Cysto%' THEN 'CystoProc' 
            ELSE 'OtherProc' 
       END,
       '__' + ISNULL(ProcDateText,'') +  ' ' + ISNULL(ProcName,'') + ' ' + ISNULL(ProcSite,'') + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK)       
FROM Procedures LEFT OUTER JOIN 
                (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
                LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey,VarExtraInfo)
SELECT RadTxDateText, RadTxType, RadTxTotalDose, RadTxQuality, RadTxDate,RadTxStopDateText, 'RadiationTherapy', RadiationTherapyId, ISNULL(RadTxTarget+' ','') + ISNULL(RadTxIntent,'')
FROM RadiationTherapy
WHERE (RadiationTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT BrachyDateText,'Brachytherapy',BrachyIsotope,BrachyQuality,BrachyDate,'BrachyTherapy',PatientId
FROM BrachyTherapy
WHERE (BrachyTherapy.PatientId = @PatientId AND ISNULL(BrachyPending,0)=0)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT statusDateText, 'Status', status, statusQuality, statusDate, 'Status', statusId
FROM Status
WHERE (Status.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT PtDeathDateText, 'Status', PtDeathType, Null, PtDeathDate, 'Patients', PatientID
FROM Patients
WHERE (PtDeathDate Is Not Null) AND (PatientID=@PatientID)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo,VarStopDate)
SELECT VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo,
       (SELECT TOP 1 PtProtocolStatusDateText
        FROM PatientProtocolStatus 
        WHERE PatientProtocolId = PatProtId AND PtProtocolStatus = 'Off Study') VarStopDate
FROM 
   (
   SELECT dbo.fnGetPtProtocolStatusDate(PatientProtocolId,'DateText') VarDate,'Protocol' VarName,
          ISNULL(dbo.fnGetPtProtocolStatusLast(PatientProtocolId),PtProtocolStatus) VarValue,PtProtocolQuality Quality,
          CAST(dbo.fnGetPtProtocolStatusDate(PatientProtocolId,'Date') AS datetime) SortDate,
          'PatientProtocols' TableName,PatientProtocolId PrimaryKey,
          ISNULL(ProtocolNum,'') + ISNULL(' ('+ProtocolAlias+')','') VarExtraInfo,
          PatientProtocolId PatProtId
   FROM PatientProtocols INNER JOIN Protocols ON PatientProtocols.ProtocolId = Protocols.ProtocolId
   WHERE (PatientId = @PatientId) 
   ) a LEFT OUTER JOIN 
   (
   SELECT c.LkpCode 
   FROM LookupCodeAttributes a INNER JOIN
        LookupAttributes b ON a.AttributeId=b.AttributeId INNER JOIN
        LookupCodes c ON a.LookupCodeId=c.LookupCodeId
   WHERE AttributeName = 'ProtocolScreening' AND
         AttributeValue = 'HPI'
   ) b ON a.VarValue LIKE ('%' + b.LkpCode + '%')
WHERE b.LkpCode IS NULL

--Clean up local variables for each record fetched
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarValue = ''
WHERE VarValue IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarValue = dbo.fnPacManStr(VarValue)
WHERE TableName = 'LabTests' AND ISNUMERIC(VarValue)=0
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL
UPDATE @ChronoTable 
   SET VarExtraInfo = ''
WHERE VarExtraInfo IS NULL

--Figure out Aborted Prostatectomies
UPDATE @ChronoTable
   SET VarName = 'PLND Aborted Prostatectomy',
       Filters = 'ProstateProc'
FROM @ChronoTable INNER JOIN Procedures ON Procedures.ProcedureId=PrimaryKey
                  LEFT OUTER JOIN Pathology ON Procedures.ProcedureId=Pathology.ProcedureId
WHERE TableName='Procedures' AND VarName='PLND' AND 
      Pathology.ProcedureId IS NULL

SET @strOutPut = ''
SET @strPatientHPI = ''
DECLARE tables_cursor CURSOR LOCAL FAST_FORWARD
   FOR
   SELECT VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey,VarExtraInfo,
          Filters,Qualities,VarDelimited,TableNames,PrimaryKeys
   FROM @ChronoTable
   ORDER BY SortDate ASC   
OPEN tables_cursor
IF CURSOR_STATUS ('local','tables_cursor') = 1
BEGIN
   --SET @starttime= GETDATE()
   --SET @strDebug= 'START ' + CAST(@starttime as varchar)
   FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@strTableName,@intPrimaryKey,@strExtraInfo,@strFilters,@strQualities,@strVarDelimited,@strTableNames,@strPrimaryKeys
   WHILE (@@FETCH_STATUS <> -1)
   BEGIN  
      --DETERMINE if record is pre-treatment assume record is not pre-treatment
      SET @blnPreTx = 0
      IF @dteDate IS NULL 
         SET @blnPreTx = 1
      ELSE IF @TxDate = @MISSING_DATE
         SET @blnPreTx = 1
      ELSE IF @dteDate = @TxDate
         SET @blnPreTx = 1     

      -- PSA
      IF @strVariable = 'PSA'
      BEGIN
         --accomodate <,>, <=, >=
         --SET @strValue = dbo.fnPacManStr(@strValue) --not need cause of update statement        
         IF ISNUMERIC(@strValue) = 1
         BEGIN
            SET @blnValidPSA = 1
            -- PSA invalid if patient on hormone therapy
            IF (@blnPreTx = 1 AND @NeoAdjHormTx <> '') OR (@AdjHormTx <> '') OR (@HormEvent <> '')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@HormTxDate = @MISSING_DATE) OR (@dteDate > @HormTxDate)
                     SET @blnValidPSA = 0

            -- PSA invalid if patient on chemotherapy
            IF (@blnPreTx = 1 AND @NeoAdjChemoTx <> '') OR (@AdjChemoTx <> '') OR (@MetsEvent LIKE '%CHEMO%')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@ChemoTxDate = @MISSING_DATE) OR (@dteDate > @ChemoTxDate)
                     SET @blnValidPSA = 0

            -- PSAs invalid within specified days after prostate biopsy
            IF @BiopsyDate <> @MISSING_DATE AND @dteDate IS NOT NULL
               IF @dteDate > @BiopsyDate
                  IF (@dteDate - @BiopsyDate) < @BiopsyDays
                     SET @blnValidPSA = 0

            -- find valid pre-treatment PSA 
            IF @blnValidPSA = 1   
               IF @blnPreTx = 1
               BEGIN
                  IF NOT (@dteDate IS NULL AND @PreTxPSA <> @MISSING_NUMBER AND @PreTxPSA > CAST(@strValue AS float(24)))
                     SET @PreTxPSA = CAST(@strValue AS float(24))
                     IF @EForm=1
                        SET @PreTxPSAID = @intPrimaryKey  
                  IF @dteDate IS NOT NULL
                     SET @PreTxPSADate = @dteDate
               END
               ELSE
                  SET @LastPSA_Value = @strValue
               IF @dteDate IS NOT NULL
                  SET @LastPSA_Date = @dteDate
         END 
      END
      ELSE
      -- Prostate Biopsy
      IF @strVariable IN('NEEDLE BIOPSY','BIOPSY','TURP','TRUS Biopsy') AND @strExtraInfo='Prostate'--dbo.fnIsBiopsyProstate (@strVariable)= 1
      BEGIN
         -- which biopsy is the diagnostic biopsy?
         -- save date to check for PSAs within 3 weeks of biopsy
         IF @blnPreTx = 1
            IF @dteDate IS NOT NULL
            BEGIN
               SET @BiopsyDate = @dteDate
               -- diagnostic biopsy is first positive biopsy
               -- but if ther are later pre-tx grades, use them
               IF @strValue <> '' AND @strValue NOT IN('NEG','PIN','ASAP','Negative') --dbo.fnIsAbnormalBiopsyProstate (@strValue) = 1
                  IF @DxBxDate = @MISSING_DATE OR 
                                 (@strDataQuality='RR' AND @DxBxQuality <> 'RR' AND @DxBxDate = @dteDate) OR 
                                 (@strDataQuality IN('STD','REV') AND @DxBxQuality = 'OUT' AND @DxBxDate = @dteDate)
                  BEGIN
                     SET @DxBxType = @strVariable
                     SET @DxBxDate = @dteDate
                     SET @DxBxDateText = @strDate
                     SET @DxBxSummary = @strValue
                     SET @DxBxQuality = @strDataQuality
	                  SET @DxBiopsyID = @intPrimaryKey --for paper form
                     -- move the clinical state forward
                     IF @ClinState < @LOCALIZED
                     BEGIN
                        SET @ClinState = @LOCALIZED
                        SET @ClinStateDate = @dteDate 
                        SET @ClinStateDteText = @strDate
                        IF @EForm=1
                           BEGIN
                              SET @ClinStateID = @intPrimaryKey
                              SET @ClinStateTable = @strTableName
                              SET @ClinStateQuality = @strDataQuality
                           END                                             
                     END
                  END
            END         
      END   -- does not deal with post-curative treatment (RP, XRT) biopsies
      ELSE
      -- UICC/AJCC Clinical Tumor Stage
      IF @strVariable IN('UICC_92','UICC_97','UICC_02')
      BEGIN
         IF @blnPreTx = 1 AND @strValue <> ''
            If @strDataQuality = 'RR' OR @ClinStageQuality <> 'RR'
            BEGIN
               IF @dteDate IS NOT NULL
               BEGIN
	               SET @ClinStageDate = @dteDate            
	               SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
                  IF CHARINDEX(',',@strExtraInfo) > 0
                     BEGIN
                        SET @ClinStageN = SUBSTRING(@strExtraInfo,1,CHARINDEX(',',@strExtraInfo)-1)
                        SET @ClinStageM = SUBSTRING(@strExtraInfo,CHARINDEX(',',@strExtraInfo)+1,LEN(@strExtraInfo))
                     END
                  ELSE IF @strExtraInfo <> ''
                     SET @ClinStageN = @strExtraInfo
	               SET @ClinStageQuality = @strDataQuality
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey
	            END
	            ELSE IF @strValue > @ClinStageT
	            BEGIN
		            -- don't need to copy date b/c all nulls sort to top
         		   SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
                  IF CHARINDEX(',',@strExtraInfo) > 0
                     BEGIN
                        SET @ClinStageN = SUBSTRING(@strExtraInfo,1,CHARINDEX(',',@strExtraInfo)-1)
                        SET @ClinStageM = SUBSTRING(@strExtraInfo,CHARINDEX(',',@strExtraInfo)+1,LEN(@strExtraInfo))
                     END
                  ELSE IF @strExtraInfo <> ''
                     SET @ClinStageN = @strExtraInfo
	               SET @ClinStageQuality = @strDataQuality
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey
               END
            END       
      END
      ELSE
      BEGIN   
         -- Chemotherapy (NOT AN ELSE b/c of combination therapies)
         IF (@strVariable LIKE '%CHEMO%') AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @ChemoTxDate = @MISSING_DATE
                  SET @ChemoTxDate = @dteDate
   
            IF @blnPreTx = 1
               SET @NeoAdjChemoTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjChemoTx = @strVariable
               -- assumes any chemo after treatment indicates metastasis
               SET @MetsEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' ' 
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               IF @strExtraInfo <> ''
                  SET @strOutput = @strOutput +  ' IRB#' + @strExtraInfo
               IF @EForm=1
                  INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Filters,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strFilters,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
               ELSE
                  INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''))
               SET @strOutput = ''
         END
         -- Hormone Therapy (NOT AN ELSE b/c of combination therapies)
         IF ((@strVariable LIKE '%HORM%')
            OR (@strVariable = 'ORCH')
            OR (@strVariable ='Bilateral Orchiectomy')
            OR (@strVariable LIKE 'ORCH_BIL%')
            OR (@strVariable LIKE '%LHRH%')
            OR (@strVariable LIKE '%AA%')
            OR (@strVariable LIKE '%ESTROGEN%')
            OR (@strVariable LIKE '%PROGEST%'))
            AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @HormTxDate = @MISSING_DATE
                  SET @HormTxDate = @dteDate
            IF @blnPreTx = 1
               SET @NeoAdjHormTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjHormTx = @strVariable
               SET @HormEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' '  
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               IF @strExtraInfo <> ''
                  SET @strOutput = @strOutput +  ' IRB#' + @strExtraInfo
               --prevent the same record from being inserted again need a better way
               IF NOT EXISTS(SELECT SortDate FROM @SortTable WHERE SortDate=@dteDate AND VarString=@strOutput)
                  BEGIN
                     IF @EForm=1                  
                        INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Filters,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strFilters,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
                     ELSE
                        INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''))                        
                  END
               SET @strOutput = ''   
         END 
      END    
      --Testosterone
      /*
      IF @strVariable LIKE 'TEST%' 
      --look for castrate levels of testosterone
      BEGIN 
        IF ISNUMERIC(@strValue) = 1
           IF CAST(@strValue As float(24)) < @CASTRATE_TESTOSTERONE_LEVEL
              SET @Castrate = 1     
      END
      */
      --check if castrated
      --IF @strVariable IN ('ORCH_BIL','Bilateral Orchiectomy')
      --   SET @Castrate = 1
      --Diagnostics Imaging
      /*
      these should be positive diagnostics for metastasis
      what exactly is positive?
      should it require specifying extent of disease?
      should CT and MRI be confirmed by LN_BX?
      should BS or PET be confirmed by BONE_BX?
      add target latter so can use other scan types?
      */
      /*
      IF @strVariable IN('BS','Bone Scan','BONE_BX','LN_BX') --('PET','PET Scan','XRAY','X-RAY','RADIOGRPH',)  
            --OR @strVariable LIKE 'CT%' OR @strVariable LIKE '%MRI%'--dbo.fnIsDiagnostic(@strVariable) = 1
      BEGIN
         IF @strValue LIKE 'POS%' OR 
            @strValue LIKE 'ABN_P%' OR 
            @strValue LIKE 'ABN_MAL%' OR
            @strValue='Abnormal Malignant' OR
            @strValue='Abnormal'	OR
            @strValue='Abnormal Prostate'--dbo.fnIsAbnormalDiagnostic(@strValue) = 1
            IF @ClinState < @NON_CASTRATE_METS
            BEGIN
               IF @Castrate = 1
                  SET @ClinState = @CASTRATE_METS
               ELSE
                  SET @ClinState = @NON_CASTRATE_METS
               IF @EForm=1
                  BEGIN
                     SET @ClinStateID = @intPrimaryKey
                     SET @ClinStateTable = @strTableName
                  END   
               IF @dteDate IS NOT NULL
               BEGIN
                  SET @ClinStateDate = @dteDate
                  SET @ClinStateDteText = @strDate
               END
            END
      END
      ELSE
      */
      -- Radiation Therapy
      IF @strVariable IN('XRT','EBRT','RT','COMBO','BRACHY','COMBO','RADIOISOTOPE','SEED'
                        ,'IMPLANT','Brachytherapy',
                        'External Beam','Radiation Therapy, Unspecified','External Beam, IMRT',
                        'High-Dose Rate Brachytherapy','External Beam, 3D Conventional',
                        'External Beam, 3D Conformal') --dbo.fnIsRadiationtherapy(@strVariable) = 1 OR dbo.fnIsBrachytherapy(@strVariable)= 1
      BEGIN
         IF @ClinState < @LOCALIZED
         BEGIN
            SET @ClinState = @LOCALIZED
            IF @EForm=1
               BEGIN
                  SET @ClinStateID = @intPrimaryKey
                  SET @ClinStateTable = @strTableName
                  SET @ClinStateQuality = @strDataQuality
               END   
            IF @dteDate IS NOT NULL
            BEGIN
               SET @ClinStateDate = @dteDate
               SET @ClinStateDteText = @strDate
            END                                          
         END
         IF @blnPreTx = 1
            BEGIN 
               SET @NeoAdjRadTx = @strVariable
               --SET @RadTxDate = @dteDate
               IF @dteDate IS NOT NULL
                  SET @TxDate = @dteDate
            END
         SET @strOutput = @strOutput + @strDate + ' '
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         SET @strOutput = @strOutput + @strVariable + ' ' + @strExtraInfo + ' ' + @strValue
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''))
         SET @strOutput = ''     
      END
      ELSE
      -- Extent of Disease
      IF @strVariable = 'EOD'
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' + @strVariable + ' ' + @strValue
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey)
         SET @strOutput = ''   
      END
      ELSE
      -- Radical Prostatectomy
      IF @strVariable LIKE 'R[RCPL]P' OR @strVariable LIKE '[RCPL]P' OR @strVariable LIKE 'Salv[RCPL]P' OR @strVariable='RALP' OR @strVariable = 'LP_CONV' --dbo.fnIsRadicalProstatectomy(@strVariable) = 1
      BEGIN
         IF @ClinState < @LOCALIZED
         BEGIN
           SET @ClinState = @LOCALIZED
           IF @EForm=1
              BEGIN
                 SET @ClinStateID = @intPrimaryKey
                 SET @ClinStateTable = @strTableName
                 SET @ClinStateQuality = @strDataQuality
              END
           IF @dteDate IS NOT NULL
           BEGIN
              SET @ClinStateDate = @dteDate
              SET @ClinStateDteText = @strDate
           END                                          
         END
         IF @blnPreTx = 1 
            IF @dteDate IS NOT NULL
               SET @TxDate = @dteDate
         --recoding some variables here
         SELECT @strVariable=LkpDescription FROM LookupCodes WHERE LkpCode=@strVariable AND LkpFieldName = 'ProcName' 
         SET @strOutput = @strOutput + @strDate + ' ' + ISNULL(@strVariable,'') + ' ' + @strValue
         SET @strOutput = REPLACE(REPLACE(REPLACE(REPLACE(@strOutput,'SMS','Margin'),'ECE','Extension'),'SVI','Seminal Vesicles'),'LNI','Nodes')
         IF @EForm=1
            BEGIN
               SET @strVarDelimited = REPLACE(REPLACE(REPLACE(REPLACE(@strVarDelimited,'SMS','Margin'),'ECE','Extension'),'SVI','Seminal Vesicles'),'LNI','|__Nodes')
               INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strVarDelimited,@strTableNames,@strPrimaryKeys,@strFilters,@strQualities)
               SET @strTableNames = ''
               SET @strPrimaryKeys = ''
               SET @strVarDelimited = ''
            END
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,@strFilters,@strQualities)
         SET @strOutput = ''   
      END
      ELSE
      -- Status    
      IF @strVariable = 'Status'
      BEGIN
         IF @strValue IN('Localized','LCR','Local Recurrence')
            BEGIN
               IF @ClinState < @LOCALIZED 
               BEGIN
                  SET @ClinState = @LOCALIZED
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('BCR','Biochemical Recurrence')
            BEGIN
               IF @Castrate = 1 AND @ClinState < @RISING_PSA_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_CASTRATE
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
               ELSE IF @ClinState < @RISING_PSA_NON_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_NON_CASTRATE
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
            END
         ELSE
            IF @strValue IN('RisingPSA_Castrate','Rising PSA Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('RisingPSA_NonCastrate','Rising PSA Non-Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_NON_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_NON_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END 
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsNonCastrate','Non-Castrate Mets','Clinical Mets Non-Castrate')
            BEGIN
               IF @ClinState < @NON_CASTRATE_METS
               BEGIN
                  SET @ClinState = @NON_CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END 
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsCastrate','Castrate Mets','Clinical Mets Castrate')
            BEGIN
               IF @ClinState < @CASTRATE_METS
               BEGIN
                  SET @ClinState = @CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('METS','Distant Metastasis')
            BEGIN
               IF @ClinState < @CASTRATE_METS AND @Castrate = 1
                  BEGIN
                     SET @ClinState = @CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
               ELSE IF @ClinState < @NON_CASTRATE_METS
                  BEGIN
                     SET @ClinState = @NON_CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
            END
         ELSE
            IF @strValue IN('DOD','DOC','DUC','Dead','Death from Prostate Cancer','Death from Other Cause',
                            'Death from Unknown Causes')
            BEGIN
               If @ClinState < @DEAD 
                  BEGIN
                     SET @ClinState = @DEAD
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
            END
      END
      --Protocols
      IF @strVariable = 'Protocol'
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' '  
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         IF @strVariable <> ''
            SET @strOutput = @strOutput +  @strVariable
         IF @strExtraInfo <> ''
            SET @strOutput = @strOutput +  ' ' + @strExtraInfo
         IF @strValue <> ''
            SET @strOutput = @strOutput + ' ' + @strValue

         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey)
         SET @strOutput = ''
      END
      ELSE
      --PRINT @strDate + ' ' + @strVariable + ' ' + @strValue + ' ' + @strDataQuality
      --SET @stoptime= GETDATE()
      --SET @strdebug = @strdebug + char(10) + @strVariable + ' ' + @stoptime --Cast to text
      --SELECT @stoptime - @starttime
      
      --Here we catch a bunch of values that are normally ignored and instead put them back into the output table
      IF @strTableName IN('MedicalTherapy','RadiationTherapy','BrachyTherapy','Procedures')
         BEGIN
            IF NOT EXISTS(SELECT PrimaryKeys FROM @SortTable WHERE TableNames LIKE '%' + @strTableName + '%' AND PrimaryKeys LIKE '%' + CAST(@intPrimaryKey as varchar(50)) + '%')
               BEGIN
                  IF @strTableName IN('MedicalTherapy','RadiationTherapy')
                     BEGIN
                        SET @strOutput = ISNULL(@strDate,'') + ' ' 
                        IF @strStopDate <> ''
                           SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
                        IF @strTableName='MedicalTherapy'
                           BEGIN
                              IF @strValue <> ''
                                 SET @strOutput = @strOutput +  @strValue
                              ELSE
                                 SET @strOutput = @strOutput + @strVariable
                              IF @strExtraInfo <> ''
                                 SET @strOutput = @strOutput +  ' IRB#' + @strExtraInfo
                           END
                        ELSE
                           SET @strOutput = @strOutput+@strVariable+' '+' '+@strExtraInfo+' '+@strValue
                     END  
                  ELSE IF (@strTableName = 'Procedures' AND @intPrimaryKey<>@DxBiopsyID) OR @strTableName = 'BrachyTherapy'
                     SET @strOutput = RTRIM(LTRIM(ISNULL(@strDate,'') + ' ' + ISNULL(@strVariable,'') + ' ' + ISNULL(@strValue,'')))
                  IF @EForm=1
                     BEGIN
                        IF @strVarDelimited IS NOT NULL AND @strTableNames IS NOT NULL AND @strPrimaryKeys IS NOT NULL
                           INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,StopDateText,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strVarDelimited,@strTableNames,@strPrimaryKeys,NULLIF(@strStopDate,''),@strFilters,@strQualities)
                        ELSE
                           INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,StopDateText,Filters,Qualities) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''),@strFilters,@strDataQuality)
                     END
                  ELSE
                     INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''),@strFilters,@strQualities)
                  SET @strOutput = '' 
               END
         END
      FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@strTableName,@intPrimaryKey,@strExtraInfo,@strFilters,@strQualities,@strVarDelimited,@strTableNames,@strPrimaryKeys
      --SET @starttime= GETDATE()
   END
   DEALLOCATE tables_cursor
   --PRINT @strdebug
END      
   --Capture PreDx Biopsy PSA
   SELECT TOP 1 @PreDxBxPSA=VarValue, @PreDxBxPSAID=PrimaryKey, @PreDxBxPSAQuality=Quality
   FROM @ChronoTable 
   WHERE TableName='LabTests' AND VarName='PSA' AND VarValue<>'' AND SortDate<=@DxBxDate 
   ORDER BY SortDate DESC
   --reformat BxSummary
   IF LEFT(@DxBxSummary,3) LIKE '[1-5]+[1-5]'
      SET @DxBxSummary = 'Gleason ' + CAST(CAST(LEFT(@DxBxSummary,1) AS int) + CAST(SUBSTRING(@DxBxSummary,3,1) AS int) AS varchar(50)) + ' (' + LEFT(@DxBxSummary,3) + ')' --+ RIGHT(@DxBxSummary,LEN(@DxBxSummary)-3)
   ELSE IF @DxBxSummary<>''
      SET @DxBxSummary = 'Gleason ' + @DxBxSummary
   IF @EForm <> 1
      SET @DxBxSummary = @DxBxSummary + ISNULL(' (' + @DxBxQuality + ')','')

   -- assembles diagnosis date, stage, grade, pre tx psa line
   IF @EForm=1
      BEGIN
         IF @DxBxDate <> @MISSING_DATE
            BEGIN
               SET @strPatientHPI = @DxBxDateText + ' '
            	SET @strTableNames = 'Procedures'
               SET @strQualities = ISNULL(@DxBxQuality,@NO_DQ)
               SET @strPrimaryKeys = CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = '__' + @DxBxDateText + ' ' +  '|'
            END 
         IF @ClinStageT <> ''
            BEGIN
               --SET @strPatientHPI = @strPatientHPI + @ClinStageT + ' (' + RIGHT(@ClinStageSystem,2) + ') '
               SET @strPatientHPI = @strPatientHPI + @ClinStageT + @ClinStageN + @ClinStageM + ' (' + RIGHT(@ClinStageSystem,2) + ') '
               SET @strTableNames = @strTableNames + ',ClinicalStages'
               SET @strQualities = @strQualities +  ISNULL(',' + @ClinStageQuality,','+@NO_DQ)
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@ClinStageID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @ClinStageT + @ClinStageN + @ClinStageM + ' (' + RIGHT(@ClinStageSystem,2) + ')|'
            END
         IF @DxBxType <> ''
            BEGIN 
               SET @strPatientHPI =  @strPatientHPI + @DxBxType + ' ' + @DxBxSummary + ' '
               SET @strTableNames = @strTableNames + ',Procedures'
               SET @strQualities = @strQualities +  ISNULL(',' + @DxBxQuality,','+@NO_DQ)
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @DxBxType + ' ' + @DxBxSummary + '|'
            END
         IF @PreDxBxPSA <> ''
            BEGIN
               SET @strPatientHPI = @strPatientHPI + ' PSA ' + @PreDxBxPSA + ' '
               SET @strTableNames = @strTableNames + ',LabTests'
               SET @strQualities = @strQualities +  ISNULL(',' + @PreDxBxPSAQuality,','+@NO_DQ)
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@PreDxBxPSAID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__ PSA ' + CAST(@PreDxBxPSA AS varchar(50)) + '|'
            END
         --strip leading comma from TableNames and PrimaryKeys concatenation
         IF LEFT(@strTableNames,1) = ','
            SET @strTableNames = RIGHT(@strTableNames,LEN(@strTableNames)-1)
         IF LEFT(@strPrimaryKeys,1) = ','
            SET @strPrimaryKeys = RIGHT(@strPrimaryKeys,LEN(@strPrimaryKeys)-1)
         INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,Filters) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@strQualities,@strPrimaryKeys,'ProstateProc')
         SET @strTableNames = ''
         SET @strPrimaryKeys = ''
         SET @strVarDelimited = ''
      END 
   ELSE
      BEGIN
         IF @DxBxType <> ''
            SET @DxBxSummary = @DxBxType + ' ' + @DxBxSummary
         IF @DxBxDate <> @MISSING_DATE
            SET @strPatientHPI = @DxBxDateText
         IF @ClinStageT <> ''
            SET @strPatientHPI = @strPatientHPI + ' ' + @ClinStageT + @ClinStageN + @ClinStageM + ' (' + RIGHT(@ClinStageSystem,2) + ')'
         IF @DxBxSummary <> ''
            SET @strPatientHPI = @strPatientHPI + ' ' + @DxBxSummary  
         IF @PreDxBxPSA <> ''
            SET @strPatientHPI = @strPatientHPI + ' PSA ' + @PreDxBxPSA + ' '
         IF @strPatientHPI <> ''
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,Filters) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI,NULL,NULL,NULL,'ProstateProc')
      END
   SET @strPatientHPI = ''   -- make sure this is set to '' by default

   -- assemble clinical state / status line
   IF @ClinStateDate <> @MISSING_DATE 
   BEGIN
      SET @strPatientHPI = @strPatientHPI + @ClinStateDteText + ' '
      -- decode numeric clinical states back into text for display
      --Removed by request orignially coded as 'No Prostate Cancer Diagnosis '
      IF @ClinState = @NO_PROSTATE_CANCER_DIAGNOSIS
         SET @strPatientHPI = '' --@strPatientHPI + ''
      IF @ClinState = @LOCALIZED
         SET @strPatientHPI = @strPatientHPI + 'Localized'
      IF @ClinState = @RISING_PSA_NON_CASTRATE
         SET @strPatientHPI = @strPatientHPI + 'Rising PSA Non-Castrate'
      IF @ClinState = @RISING_PSA_CASTRATE
         SET @strPatientHPI = @strPatientHPI + 'Rising PSA Castrate'
      --Removed by request, orignially coded as 'Non-Castrate Mets'
      IF @ClinState = @NON_CASTRATE_METS
         SET @strPatientHPI = '' --@strPatientHPI + 'Metastasis' 
      IF @ClinState = @CASTRATE_METS
         SET @strPatientHPI = @strPatientHPI + 'Castrate Mets'
      IF @ClinState = @DEAD
         SET @strPatientHPI = @strPatientHPI + 'Dead'

      IF @EForm=1 AND @strPatientHPI <> ''
         BEGIN
            SET @strVarDelimited = '__' + @strPatientHPI + '|'
            SET @strTableNames = @ClinStateTable
            SET @strPrimaryKeys = CAST(@ClinstateID as varchar(50))
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,Filters) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@ClinStateQuality,@strPrimaryKeys,CASE WHEN @ClinStateTable = 'Procedures' THEN 'ProstateProc' END)
            SET @strTableNames = ''
            SET @strPrimaryKeys = ''
            SET @strVarDelimited = ''
         END
      ELSE
         INSERT @SortTable (SortDate,VarString) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI)
   END      
   SET @strPatientHPI = '' 

   IF @EForm=1
      BEGIN
         SELECT VarString AS PatientHPI,VarDelimited AS PatientHPIDelimited,TableNames,
                PrimaryKeys, SortDate, StopDateText, Filters, Qualities
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   ELSE
      BEGIN
         SELECT VarString AS PatientHPI--,TableNames,PrimaryKeys
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   --SELECT * FROM @ChronoTable

   SELECT @DxBiopsyID AS DxBiopsyId

--39ModifyspPluginPSAGraphGetPathSummaryFlash.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spPluginPSAGraphGetPathSummaryFlash]
   @PatientId int = NULL
AS
/*original
SELECT p.*,dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMarginStatus,PathExtension,PathSVI,p.SurgeryId) AS CalcPathSummary
FROM Surgeries s, ProcProstatectomiesPath p 
WHERE s.PatientID = @PatientId 
AND s.SurgeryID = p.SurgeryID
*/

SELECT ProstatectomyPath.*,dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(PathQuality,ProcQuality)) AS CalcPathSummary
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN ProstatectomyPath ON ProstatectomyPath.PathologyId = Pathology.PathologyId
WHERE Procedures.PatientId = @PatientId AND ProcName IN('CP','LP','LP_CONV','PP','RALP','RP','SalvCP','SalvLP','SalvRP')
GO

--40ModifyspFormListBiopsies.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spFormListBiopsies]
   @PatientId int = NULL,
   @ProcedureId int = NULL,
   @FormName varchar(50) = NULL,
   @FormType varchar(50) = 'Dynamic'
AS
IF @FormType = 'Dynamic'
   SELECT ProcDateText, ProcDate, ProcName, dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) AS PathResult, PathQuality, 
          Procedures.LockedBy, Procedures.ProcedureId AS PrimaryKey, 'Procedures' AS TableName, PathGG1, PathGG2, PathGG3, PathResult AS PathResult2, PathHG_PIN, PathASAP
   FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                   LEFT OUTER JOIN ProstateBiopsyPath ON Pathology.PathologyId=ProstateBiopsyPath.PathologyId
   WHERE Procedures.PatientId = @PatientId AND Procedures.ProcedureId <> @ProcedureId AND
         ProcSite='Prostate' AND ProcName IN('TURP','TRUS Biopsy','Biopsy','Needle Biopsy')
   UNION ALL
   SELECT ProcDateText, ProcDate, ProcName, PathResult, PathQuality, 
          Procedures.LockedBy, Procedures.ProcedureId, 'Procedures', NULL, NULL, NULL, PathResult, NULL, NULL
   FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
   WHERE (ProcName LIKE '%Biopsy%' OR ProcName = 'Needle Aspiration') AND 
         (Procedures.PatientId = @PatientId) AND
         (Procedures.ProcedureId NOT IN
                          (
                           SELECT ProcedureId
                           FROM Procedures 
                           WHERE PatientId = @PatientId AND ProcSite='Prostate' AND ProcName IN('TURP','TRUS Biopsy','Biopsy','Needle Biopsy')
                          ))
   ORDER BY ProcDate
/*
ELSE IF @FormType = 'Interactive'
*/
GO

--41ModifyTableSpecimens.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_Specimens
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	SpecimenId int NULL,
	ParentSpecimenId int NULL,
	SpecimenAccessionId int NULL,
	ContactId int NULL,
	SpecimenType varchar(50) NULL,
	SpecimenSubType varchar(50) NULL,
	SpecimenStatus varchar(100) NULL,
	SpecimenPreservationType varchar(100) NULL,
	SpecimenReferenceNumber varchar(50) NULL,
	SpecimenOriginalQty varchar(50) NULL,
	SpecimenUnits varchar(50) NULL,
	SpecimenRemainingQty varchar(50) NULL,
	BoxId int NULL,
	PositionId int NULL,
	SpecimenNotes varchar(1000) NULL,
	SpecimenNumFreezeThaw varchar(50) NULL,
	SpecimenTimeToStorage varchar(50) NULL,
	SpecimenCollectionTime varchar(50) NULL,
	SpecimenFrozenTime varchar(50) NULL,
	SpecimenVialType varchar(50) NULL,
	SpecimenVialNum varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_Specimens)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_Specimens (LoggedOperation, LoggedBy, LoggedTime, SpecimenId, ParentSpecimenId, SpecimenAccessionId, ContactId, SpecimenType, SpecimenSubType, SpecimenStatus, SpecimenPreservationType, SpecimenReferenceNumber, SpecimenOriginalQty, SpecimenUnits, SpecimenRemainingQty, BoxId, PositionId, SpecimenNotes, SpecimenNumFreezeThaw, SpecimenTimeToStorage, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, SpecimenId, ParentSpecimenId, SpecimenAccessionId, ContactId, SpecimenType, SpecimenSubType, SpecimenStatus, SpecimenPreservationType, SpecimenReferenceNumber, SpecimenOriginalQty, SpecimenUnits, SpecimenRemainingQty, BoxId, PositionId, SpecimenNotes, SpecimenNumFreezeThaw, SpecimenTimeToStorage, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_Specimens WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_Specimens
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_Specimens', N'AuditLog_Specimens', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Specimens
	DROP CONSTRAINT FK_Specimens_SpecimenAccessions
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Specimens
	(
	SpecimenId int NOT NULL IDENTITY (1, 1),
	ParentSpecimenId int NULL,
	SpecimenAccessionId int NOT NULL,
	ContactId int NULL,
	SpecimenType varchar(50) NULL,
	SpecimenSubType varchar(50) NULL,
	SpecimenStatus varchar(100) NULL,
	SpecimenPreservationType varchar(100) NULL,
	SpecimenReferenceNumber varchar(50) NULL,
	SpecimenOriginalQty varchar(50) NULL,
	SpecimenUnits varchar(50) NULL,
	SpecimenRemainingQty varchar(50) NULL,
	BoxId int NULL,
	PositionId int NULL,
	SpecimenNotes varchar(1000) NULL,
	SpecimenNumFreezeThaw varchar(50) NULL,
	SpecimenTimeToStorage varchar(50) NULL,
	SpecimenCollectionTime varchar(50) NULL,
	SpecimenFrozenTime varchar(50) NULL,
	SpecimenVialType varchar(50) NULL,
	SpecimenVialNum varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
SET IDENTITY_INSERT dbo.Tmp_Specimens ON
GO
IF EXISTS(SELECT * FROM dbo.Specimens)
	 EXEC('INSERT INTO dbo.Tmp_Specimens (SpecimenId, ParentSpecimenId, SpecimenAccessionId, ContactId, SpecimenType, SpecimenSubType, SpecimenStatus, SpecimenPreservationType, SpecimenReferenceNumber, SpecimenOriginalQty, SpecimenUnits, SpecimenRemainingQty, BoxId, PositionId, SpecimenNotes, SpecimenNumFreezeThaw, SpecimenTimeToStorage, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT SpecimenId, ParentSpecimenId, SpecimenAccessionId, ContactId, SpecimenType, SpecimenSubType, SpecimenStatus, SpecimenPreservationType, SpecimenReferenceNumber, SpecimenOriginalQty, SpecimenUnits, SpecimenRemainingQty, BoxId, PositionId, SpecimenNotes, SpecimenNumFreezeThaw, SpecimenTimeToStorage, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.Specimens WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Specimens OFF
GO
ALTER TABLE dbo.Specimen_SpecimenCollections
	DROP CONSTRAINT FK_Specimen_SpecimenCollections_Specimens
GO
ALTER TABLE dbo.SpecimenEvents
	DROP CONSTRAINT FK_SpecimenEvents_Specimens
GO
DROP TABLE dbo.Specimens
GO
EXECUTE sp_rename N'dbo.Tmp_Specimens', N'Specimens', 'OBJECT' 
GO
ALTER TABLE dbo.Specimens ADD CONSTRAINT
	PK_Specimens PRIMARY KEY CLUSTERED 
	(
	SpecimenId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_Specimens_SpecimenAccessionId ON dbo.Specimens
	(
	SpecimenAccessionId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.Specimens WITH NOCHECK ADD CONSTRAINT
	FK_Specimens_SpecimenAccessions FOREIGN KEY
	(
	SpecimenAccessionId
	) REFERENCES dbo.SpecimenAccessions
	(
	SpecimenAccessionId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
CREATE TRIGGER [dbo].[trgAuditSpecimens_UD]
ON dbo.Specimens FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_Specimens
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.SpecimenId = Inserted.SpecimenId
ELSE IF @action = 'DELETE'
   BEGIN
	   INSERT INTO AuditLog_Specimens
	   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
	   FROM Deleted

	   DELETE SpecimenPositions FROM SpecimenPositions INNER JOIN Deleted ON 
							   SpecimenPositions.PositionId=Deleted.PositionId
   END
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SpecimenEvents ADD CONSTRAINT
	FK_SpecimenEvents_Specimens FOREIGN KEY
	(
	SpecimenId
	) REFERENCES dbo.Specimens
	(
	SpecimenId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Specimen_SpecimenCollections ADD CONSTRAINT
	FK_Specimen_SpecimenCollections_Specimens FOREIGN KEY
	(
	SpecimenId
	) REFERENCES dbo.Specimens
	(
	SpecimenId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
GO

--42ModifyTableSpecimenAccessions.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_SpecimenAccessions
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	SpecimenAccessionId int NULL,
	PatientId int NULL,
	PathologyReferenceNumber varchar(50) NULL,
	AccessionProcName varchar(50) NULL,
	AccessionDateText varchar(20) NULL,
	AccessionDate datetime NULL,
	AccessionInstitution varchar(50) NULL,
	AccessionDepartment varchar(50) NULL,
	AccessionTime varchar(10) NULL,
	PathologyLab varchar(50) NULL,
	DateBanked datetime NULL,
	TimeReceivedInLab varchar(10) NULL,
	TimeFrozen varchar(10) NULL,
	HoldingCondition varchar(20) NULL,
	NumberTubesEDTA varchar(10) NULL,
	NumberTubesClotted varchar(10) NULL,
	NumberTubesGel varchar(10) NULL,
	NumberTubesOther varchar(10) NULL,
	NumberTubesOtherType varchar(10) NULL,
	AccessionAnatomicSite varchar(50) NULL,
	AccessionVisitType varchar(50) NULL,
	AccessionNotes varchar(1000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_SpecimenAccessions)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_SpecimenAccessions (LoggedOperation, LoggedBy, LoggedTime, SpecimenAccessionId, PatientId, PathologyReferenceNumber, AccessionProcName, AccessionDateText, AccessionDate, AccessionInstitution, AccessionDepartment, AccessionTime, PathologyLab, DateBanked, TimeReceivedInLab, TimeFrozen, HoldingCondition, NumberTubesEDTA, NumberTubesClotted, NumberTubesGel, NumberTubesOther, NumberTubesOtherType, AccessionNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, SpecimenAccessionId, PatientId, PathologyReferenceNumber, AccessionProcName, AccessionDateText, AccessionDate, AccessionInstitution, AccessionDepartment, AccessionTime, PathologyLab, DateBanked, TimeReceivedInLab, TimeFrozen, HoldingCondition, NumberTubesEDTA, NumberTubesClotted, NumberTubesGel, NumberTubesOther, NumberTubesOtherType, AccessionNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_SpecimenAccessions WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_SpecimenAccessions
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_SpecimenAccessions', N'AuditLog_SpecimenAccessions', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_SpecimenAccessions
	(
	SpecimenAccessionId int NOT NULL IDENTITY (1, 1),
	PatientId int NULL,
	PathologyReferenceNumber varchar(50) NULL,
	AccessionProcName varchar(50) NULL,
	AccessionDateText varchar(20) NULL,
	AccessionDate datetime NULL,
	AccessionInstitution varchar(50) NULL,
	AccessionDepartment varchar(50) NULL,
	AccessionTime varchar(10) NULL,
	PathologyLab varchar(50) NULL,
	DateBanked datetime NULL,
	TimeReceivedInLab varchar(10) NULL,
	TimeFrozen varchar(10) NULL,
	HoldingCondition varchar(20) NULL,
	NumberTubesEDTA varchar(10) NULL,
	NumberTubesClotted varchar(10) NULL,
	NumberTubesGel varchar(10) NULL,
	NumberTubesOther varchar(10) NULL,
	NumberTubesOtherType varchar(10) NULL,
	AccessionAnatomicSite varchar(50) NULL,
	AccessionVisitType varchar(50) NULL,
	AccessionNotes varchar(1000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
SET IDENTITY_INSERT dbo.Tmp_SpecimenAccessions ON
GO
IF EXISTS(SELECT * FROM dbo.SpecimenAccessions)
	 EXEC('INSERT INTO dbo.Tmp_SpecimenAccessions (SpecimenAccessionId, PatientId, PathologyReferenceNumber, AccessionProcName, AccessionDateText, AccessionDate, AccessionInstitution, AccessionDepartment, AccessionTime, PathologyLab, DateBanked, TimeReceivedInLab, TimeFrozen, HoldingCondition, NumberTubesEDTA, NumberTubesClotted, NumberTubesGel, NumberTubesOther, NumberTubesOtherType, AccessionNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT SpecimenAccessionId, PatientId, PathologyReferenceNumber, AccessionProcName, AccessionDateText, AccessionDate, AccessionInstitution, AccessionDepartment, AccessionTime, PathologyLab, DateBanked, TimeReceivedInLab, TimeFrozen, HoldingCondition, NumberTubesEDTA, NumberTubesClotted, NumberTubesGel, NumberTubesOther, NumberTubesOtherType, AccessionNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.SpecimenAccessions WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_SpecimenAccessions OFF
GO
ALTER TABLE dbo.Specimens
	DROP CONSTRAINT FK_Specimens_SpecimenAccessions
GO
DROP TABLE dbo.SpecimenAccessions
GO
EXECUTE sp_rename N'dbo.Tmp_SpecimenAccessions', N'SpecimenAccessions', 'OBJECT' 
GO
ALTER TABLE dbo.SpecimenAccessions ADD CONSTRAINT
	PK_SpecimenAccessions PRIMARY KEY CLUSTERED 
	(
	SpecimenAccessionId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_SpecimenAccessions_PatientId ON dbo.SpecimenAccessions
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE TRIGGER dbo.trgAuditSpecimenAccessions_UD
ON dbo.SpecimenAccessions FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_SpecimenAccessions
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.SpecimenAccessionId = Inserted.SpecimenAccessionId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_SpecimenAccessions
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Specimens WITH NOCHECK ADD CONSTRAINT
	FK_Specimens_SpecimenAccessions FOREIGN KEY
	(
	SpecimenAccessionId
	) REFERENCES dbo.SpecimenAccessions
	(
	SpecimenAccessionId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
GO

--43ModifyTableRadiationTherapy.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_RadiationTherapy
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PatientId int NULL,
	RadiationTherapyId int NULL,
	RadTxPending bit NULL,
	RadTxDateText varchar(50) NULL,
	RadTxDate datetime NULL,
	RadTxType varchar(50) NULL,
	RadTxDisease varchar(50) NULL,
	RadTxIndication varchar(50) NULL,
	RadTxIntent varchar(50) NULL,
	RadTxTarget varchar(50) NULL,
	RadTxSide varchar(50) NULL,
	RadTxPosition varchar(50) NULL,
	RadTxSite varchar(50) NULL,
	RadTxStopDateText varchar(50) NULL,
	RadTxStopDate datetime NULL,
	RadTxIsotope varchar(50) NULL,
	RadTxDosePerFraction varchar(50) NULL,
	RadTxTotalDose varchar(50) NULL,
	RadTxUnits varchar(50) NULL,
	RadTxNumFractions varchar(50) NULL,
	RadTxNumFields varchar(50) NULL,
	RadTxSchedule varchar(50) NULL,
	RadTxPhysician varchar(50) NULL,
	RadTxInstitution varchar(100) NULL,
	RadTxNotes varchar(1000) NULL,
	RadTxDataSource varchar(100) NULL,
	RadTxQuality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_RadiationTherapy)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_RadiationTherapy (LoggedOperation, LoggedBy, LoggedTime, PatientId, RadiationTherapyId, RadTxPending, RadTxDateText, RadTxDate, RadTxType, RadTxDisease, RadTxIndication, RadTxIntent, RadTxTarget, RadTxSide, RadTxPosition, RadTxStopDateText, RadTxStopDate, RadTxIsotope, RadTxDosePerFraction, RadTxTotalDose, RadTxUnits, RadTxNumFractions, RadTxNumFields, RadTxSchedule, RadTxPhysician, RadTxInstitution, RadTxNotes, RadTxDataSource, RadTxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PatientId, RadiationTherapyId, RadTxPending, RadTxDateText, RadTxDate, RadTxType, RadTxDisease, RadTxIndication, RadTxIntent, RadTxTarget, RadTxSide, RadTxPosition, RadTxStopDateText, RadTxStopDate, RadTxIsotope, RadTxDosePerFraction, RadTxTotalDose, RadTxUnits, RadTxNumFractions, RadTxNumFields, RadTxSchedule, RadTxPhysician, RadTxInstitution, RadTxNotes, RadTxDataSource, RadTxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_RadiationTherapy WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_RadiationTherapy
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_RadiationTherapy', N'AuditLog_RadiationTherapy', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.RadiationTherapy
	DROP CONSTRAINT FK_RadiationTherapy_Patients
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.RadiationTherapy
	DROP CONSTRAINT DF_RadiationTherapy_RadTxPending
GO
CREATE TABLE dbo.Tmp_RadiationTherapy
	(
	PatientId int NOT NULL,
	RadiationTherapyId int NOT NULL IDENTITY (1, 1),
	RadTxPending bit NULL,
	RadTxDateText varchar(50) NULL,
	RadTxDate datetime NULL,
	RadTxType varchar(50) NOT NULL,
	RadTxDisease varchar(50) NULL,
	RadTxIndication varchar(50) NULL,
	RadTxIntent varchar(50) NULL,
	RadTxTarget varchar(50) NULL,
	RadTxSide varchar(50) NULL,
	RadTxPosition varchar(50) NULL,
	RadTxSite varchar(50) NULL,
	RadTxStopDateText varchar(50) NULL,
	RadTxStopDate datetime NULL,
	RadTxIsotope varchar(50) NULL,
	RadTxDosePerFraction varchar(50) NULL,
	RadTxTotalDose varchar(50) NULL,
	RadTxUnits varchar(50) NULL,
	RadTxNumFractions varchar(50) NULL,
	RadTxNumFields varchar(50) NULL,
	RadTxSchedule varchar(50) NULL,
	RadTxPhysician varchar(50) NULL,
	RadTxInstitution varchar(100) NULL,
	RadTxNotes varchar(1000) NULL,
	RadTxDataSource varchar(100) NULL,
	RadTxQuality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_RadiationTherapy ADD CONSTRAINT
	DF_RadiationTherapy_RadTxPending DEFAULT ((0)) FOR RadTxPending
GO
SET IDENTITY_INSERT dbo.Tmp_RadiationTherapy ON
GO
IF EXISTS(SELECT * FROM dbo.RadiationTherapy)
	 EXEC('INSERT INTO dbo.Tmp_RadiationTherapy (PatientId, RadiationTherapyId, RadTxPending, RadTxDateText, RadTxDate, RadTxType, RadTxDisease, RadTxIndication, RadTxIntent, RadTxTarget, RadTxSide, RadTxPosition, RadTxStopDateText, RadTxStopDate, RadTxIsotope, RadTxDosePerFraction, RadTxTotalDose, RadTxUnits, RadTxNumFractions, RadTxNumFields, RadTxSchedule, RadTxPhysician, RadTxInstitution, RadTxNotes, RadTxDataSource, RadTxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PatientId, RadiationTherapyId, RadTxPending, RadTxDateText, RadTxDate, RadTxType, RadTxDisease, RadTxIndication, RadTxIntent, RadTxTarget, RadTxSide, RadTxPosition, RadTxStopDateText, RadTxStopDate, RadTxIsotope, RadTxDosePerFraction, RadTxTotalDose, RadTxUnits, RadTxNumFractions, RadTxNumFields, RadTxSchedule, RadTxPhysician, RadTxInstitution, RadTxNotes, RadTxDataSource, RadTxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.RadiationTherapy WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_RadiationTherapy OFF
GO
ALTER TABLE dbo.RadTxAdministration
	DROP CONSTRAINT FK_RadTxAdministration_RadiationTherapy
GO
DROP TABLE dbo.RadiationTherapy
GO
EXECUTE sp_rename N'dbo.Tmp_RadiationTherapy', N'RadiationTherapy', 'OBJECT' 
GO
ALTER TABLE dbo.RadiationTherapy ADD CONSTRAINT
	PK_RadiationTherapy PRIMARY KEY CLUSTERED 
	(
	RadiationTherapyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_RadiationTherapy_PatientId ON dbo.RadiationTherapy
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.RadiationTherapy WITH NOCHECK ADD CONSTRAINT
	FK_RadiationTherapy_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  NO ACTION 
	
GO
CREATE TRIGGER dbo.trgAuditRadiationTherapy_UD
ON dbo.RadiationTherapy FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_RadiationTherapy
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.RadiationTherapyId = Inserted.RadiationTherapyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_RadiationTherapy
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditRadiationTherapy_UD', N'last', N'update'
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.RadTxAdministration ADD CONSTRAINT
	FK_RadTxAdministration_RadiationTherapy FOREIGN KEY
	(
	RadiationTherapyId
	) REFERENCES dbo.RadiationTherapy
	(
	RadiationTherapyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
GO

--44ModifyTableMedicalTherapy.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_MedicalTherapy
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PatientId int NULL,
	ProtocolId int NULL,
	OperatingRoomDetailId int NULL,
	MedicalTherapyId int NULL,
	MedTxPending bit NULL,
	MedTxDateText varchar(50) NULL,
	MedTxDate datetime NULL,
	MedTxType varchar(50) NULL,
	MedTxDisease varchar(50) NULL,
	MedTxIndication varchar(50) NULL,
	MedTxIntent varchar(50) NULL,
	MedTxAgent varchar(255) NULL,
	MedTxStopDateText varchar(50) NULL,
	MedTxStopDate datetime NULL,
	MedTxDose varchar(50) NULL,
	MedTxTotalDose varchar(50) NULL,
	MedTxUnits varchar(50) NULL,
	MedTxRoute varchar(50) NULL,
	MedTxSchedule varchar(50) NULL,
	MedTxCycle varchar(50) NULL,
	MedTxWeek varchar(50) NULL,
	MedTxInstitution varchar(100) NULL,
	MedTxSite varchar(50) NULL,
	MedTxNotes varchar(1000) NULL,
	MedTxDataSource varchar(100) NULL,
	MedTxQuality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_MedicalTherapy)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_MedicalTherapy (LoggedOperation, LoggedBy, LoggedTime, PatientId, ProtocolId, OperatingRoomDetailId, MedicalTherapyId, MedTxPending, MedTxDateText, MedTxDate, MedTxType, MedTxDisease, MedTxIndication, MedTxIntent, MedTxAgent, MedTxStopDateText, MedTxStopDate, MedTxDose, MedTxTotalDose, MedTxUnits, MedTxRoute, MedTxSchedule, MedTxCycle, MedTxWeek, MedTxInstitution, MedTxNotes, MedTxDataSource, MedTxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PatientId, ProtocolId, OperatingRoomDetailId, MedicalTherapyId, MedTxPending, MedTxDateText, MedTxDate, MedTxType, MedTxDisease, MedTxIndication, MedTxIntent, MedTxAgent, MedTxStopDateText, MedTxStopDate, MedTxDose, MedTxTotalDose, MedTxUnits, MedTxRoute, MedTxSchedule, MedTxCycle, MedTxWeek, MedTxInstitution, MedTxNotes, MedTxDataSource, MedTxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_MedicalTherapy WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_MedicalTherapy
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_MedicalTherapy', N'AuditLog_MedicalTherapy', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.MedicalTherapy
	DROP CONSTRAINT FK_MedicalTherapy_Patients
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.MedicalTherapy
	DROP CONSTRAINT DF_MedicalTherapy_MedTxPending
GO
CREATE TABLE dbo.Tmp_MedicalTherapy
	(
	PatientId int NOT NULL,
	ProtocolId int NULL,
	OperatingRoomDetailId int NULL,
	MedicalTherapyId int NOT NULL IDENTITY (1, 1),
	MedTxPending bit NULL,
	MedTxDateText varchar(50) NULL,
	MedTxDate datetime NULL,
	MedTxType varchar(50) NOT NULL,
	MedTxDisease varchar(50) NULL,
	MedTxIndication varchar(50) NULL,
	MedTxIntent varchar(50) NULL,
	MedTxAgent varchar(255) NULL,
	MedTxStopDateText varchar(50) NULL,
	MedTxStopDate datetime NULL,
	MedTxDose varchar(50) NULL,
	MedTxTotalDose varchar(50) NULL,
	MedTxUnits varchar(50) NULL,
	MedTxRoute varchar(50) NULL,
	MedTxSchedule varchar(50) NULL,
	MedTxCycle varchar(50) NULL,
	MedTxWeek varchar(50) NULL,
	MedTxInstitution varchar(100) NULL,
	MedTxSite varchar(50) NULL,
	MedTxNotes varchar(1000) NULL,
	MedTxDataSource varchar(100) NULL,
	MedTxQuality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_MedicalTherapy ADD CONSTRAINT
	DF_MedicalTherapy_MedTxPending DEFAULT ((0)) FOR MedTxPending
GO
SET IDENTITY_INSERT dbo.Tmp_MedicalTherapy ON
GO
IF EXISTS(SELECT * FROM dbo.MedicalTherapy)
	 EXEC('INSERT INTO dbo.Tmp_MedicalTherapy (PatientId, ProtocolId, OperatingRoomDetailId, MedicalTherapyId, MedTxPending, MedTxDateText, MedTxDate, MedTxType, MedTxDisease, MedTxIndication, MedTxIntent, MedTxAgent, MedTxStopDateText, MedTxStopDate, MedTxDose, MedTxTotalDose, MedTxUnits, MedTxRoute, MedTxSchedule, MedTxCycle, MedTxWeek, MedTxInstitution, MedTxNotes, MedTxDataSource, MedTxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PatientId, ProtocolId, OperatingRoomDetailId, MedicalTherapyId, MedTxPending, MedTxDateText, MedTxDate, MedTxType, MedTxDisease, MedTxIndication, MedTxIntent, MedTxAgent, MedTxStopDateText, MedTxStopDate, MedTxDose, MedTxTotalDose, MedTxUnits, MedTxRoute, MedTxSchedule, MedTxCycle, MedTxWeek, MedTxInstitution, MedTxNotes, MedTxDataSource, MedTxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.MedicalTherapy WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_MedicalTherapy OFF
GO
ALTER TABLE dbo.MedTxAdministration
	DROP CONSTRAINT FK_MedTxAdministration_MedicalTherapy
GO
DROP TABLE dbo.MedicalTherapy
GO
EXECUTE sp_rename N'dbo.Tmp_MedicalTherapy', N'MedicalTherapy', 'OBJECT' 
GO
ALTER TABLE dbo.MedicalTherapy ADD CONSTRAINT
	PK_MedicalTherapy PRIMARY KEY CLUSTERED 
	(
	MedicalTherapyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_MedicalTherapy_PatientId ON dbo.MedicalTherapy
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.MedicalTherapy WITH NOCHECK ADD CONSTRAINT
	FK_MedicalTherapy_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  NO ACTION 
	
GO
CREATE TRIGGER dbo.trgAuditMedicalTherapy_UD
ON dbo.MedicalTherapy FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_MedicalTherapy
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.MedicalTherapyId = Inserted.MedicalTherapyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_MedicalTherapy
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditMedicalTherapy_UD', N'last', N'update'
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.MedTxAdministration ADD CONSTRAINT
	FK_MedTxAdministration_MedicalTherapy FOREIGN KEY
	(
	MedicalTherapyId
	) REFERENCES dbo.MedicalTherapy
	(
	MedicalTherapyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
GO
COMMIT
GO


--45ModifyTableDiagnostics.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_Diagnostics
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PatientId int NULL,
	DiagnosticId int NULL,
	DxPending bit NULL,
	DxDateText varchar(50) NULL,
	DxDate datetime NULL,
	DxType varchar(50) NULL,
	DxDisease varchar(50) NULL,
	DxIndication varchar(50) NULL,
	DxSummary varchar(255) NULL,
	DxSide varchar(50) NULL,
	DxTarget varchar(50) NULL,
	DxSite varchar(50) NULL,
	DxResult varchar(50) NULL,
	DxPhysician varchar(50) NULL,
	DxInstitution varchar(50) NULL,
	ImgReviewed varchar(50) NULL,
	ImgCompared varchar(50) NULL,
	ImgDigitized varchar(50) NULL,
	ImgContrast varchar(50) NULL,
	ImgBaseline varchar(50) NULL,
	DxConfidence varchar(50) NULL,
	DxStatus varchar(50) NULL,
	DxTotalNumTumors varchar(50) NULL,
	DxNumNewTumors varchar(50) NULL,
	DxNotes varchar(2000) NULL,
	DxDataSource varchar(100) NULL,
	DxQuality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_Diagnostics)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_Diagnostics (LoggedOperation, LoggedBy, LoggedTime, PatientId, DiagnosticId, DxPending, DxDateText, DxDate, DxType, DxDisease, DxIndication, DxSummary, DxSide, DxTarget, DxResult, DxPhysician, DxInstitution, ImgReviewed, ImgCompared, ImgDigitized, ImgContrast, ImgBaseline, DxConfidence, DxStatus, DxTotalNumTumors, DxNumNewTumors, DxNotes, DxDataSource, DxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PatientId, DiagnosticId, DxPending, DxDateText, DxDate, DxType, DxDisease, DxIndication, DxSummary, DxSide, DxTarget, DxResult, DxPhysician, DxInstitution, ImgReviewed, ImgCompared, ImgDigitized, ImgContrast, ImgBaseline, DxConfidence, DxStatus, DxTotalNumTumors, DxNumNewTumors, DxNotes, DxDataSource, DxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_Diagnostics WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_Diagnostics
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_Diagnostics', N'AuditLog_Diagnostics', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Diagnostics
	DROP CONSTRAINT FK_Diagnostics_Patients
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Diagnostics
	DROP CONSTRAINT DF_Diagnostics_DxPending
GO
CREATE TABLE dbo.Tmp_Diagnostics
	(
	PatientId int NOT NULL,
	DiagnosticId int NOT NULL IDENTITY (1, 1),
	DxPending bit NULL,
	DxDateText varchar(50) NULL,
	DxDate datetime NULL,
	DxType varchar(50) NOT NULL,
	DxDisease varchar(50) NULL,
	DxIndication varchar(50) NULL,
	DxSummary varchar(255) NULL,
	DxSide varchar(50) NULL,
	DxTarget varchar(50) NULL,
	DxSite varchar(50) NULL,
	DxResult varchar(50) NULL,
	DxPhysician varchar(50) NULL,
	DxInstitution varchar(50) NULL,
	ImgReviewed varchar(50) NULL,
	ImgCompared varchar(50) NULL,
	ImgDigitized varchar(50) NULL,
	ImgContrast varchar(50) NULL,
	ImgBaseline varchar(50) NULL,
	DxConfidence varchar(50) NULL,
	DxStatus varchar(50) NULL,
	DxTotalNumTumors varchar(50) NULL,
	DxNumNewTumors varchar(50) NULL,
	DxNotes varchar(2000) NULL,
	DxDataSource varchar(100) NULL,
	DxQuality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Diagnostics ADD CONSTRAINT
	DF_Diagnostics_DxPending DEFAULT ((0)) FOR DxPending
GO
SET IDENTITY_INSERT dbo.Tmp_Diagnostics ON
GO
IF EXISTS(SELECT * FROM dbo.Diagnostics)
	 EXEC('INSERT INTO dbo.Tmp_Diagnostics (PatientId, DiagnosticId, DxPending, DxDateText, DxDate, DxType, DxDisease, DxIndication, DxSummary, DxSide, DxTarget, DxResult, DxPhysician, DxInstitution, ImgReviewed, ImgCompared, ImgDigitized, ImgContrast, ImgBaseline, DxConfidence, DxStatus, DxTotalNumTumors, DxNumNewTumors, DxNotes, DxDataSource, DxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PatientId, DiagnosticId, DxPending, DxDateText, DxDate, DxType, DxDisease, DxIndication, DxSummary, DxSide, DxTarget, DxResult, DxPhysician, DxInstitution, ImgReviewed, ImgCompared, ImgDigitized, ImgContrast, ImgBaseline, DxConfidence, DxStatus, DxTotalNumTumors, DxNumNewTumors, DxNotes, DxDataSource, DxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.Diagnostics WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Diagnostics OFF
GO
ALTER TABLE dbo.DxImageFindingsKidney
	DROP CONSTRAINT FK_DxImageFindingsKidney_Diagnostics
GO
ALTER TABLE dbo.DxImageFindingsProstate
	DROP CONSTRAINT FK_DxImageFindingsProstate_Diagnostics
GO
ALTER TABLE dbo.DxImageFindings
	DROP CONSTRAINT FK_DxImageFindings_Diagnostics
GO
ALTER TABLE dbo.DxPulmonaryTest
	DROP CONSTRAINT FK_DxPulmonaryTest_Diagnostics
GO
ALTER TABLE dbo.DxImageThyroidUltrasound
	DROP CONSTRAINT FK_DxImageThyroidUltrasound_Diagnostics
GO
ALTER TABLE dbo.DxImageProstate
	DROP CONSTRAINT FK_DxImageProstate_Diagnostics
GO
ALTER TABLE dbo.DxImageEndorectalUltrasound
	DROP CONSTRAINT FK_DxImageEndorectalUltrasound_Diagnostics
GO
ALTER TABLE dbo.DxImageThyroid
	DROP CONSTRAINT FK_DxImageThyroid_Diagnostics
GO
DROP TABLE dbo.Diagnostics
GO
EXECUTE sp_rename N'dbo.Tmp_Diagnostics', N'Diagnostics', 'OBJECT' 
GO
ALTER TABLE dbo.Diagnostics ADD CONSTRAINT
	PK_Diagnostics PRIMARY KEY CLUSTERED 
	(
	DiagnosticId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_Diagnostics_PatientId ON dbo.Diagnostics
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.Diagnostics WITH NOCHECK ADD CONSTRAINT
	FK_Diagnostics_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditDiagnostics_UD
ON dbo.Diagnostics FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_Diagnostics
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.DiagnosticId = Inserted.DiagnosticId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_Diagnostics
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditDiagnostics_UD', N'last', N'update'
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageThyroid WITH NOCHECK ADD CONSTRAINT
	FK_DxImageThyroid_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageEndorectalUltrasound WITH NOCHECK ADD CONSTRAINT
	FK_DxImageEndorectalUltrasound_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageProstate WITH NOCHECK ADD CONSTRAINT
	FK_DxImageProstate_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageThyroidUltrasound WITH NOCHECK ADD CONSTRAINT
	FK_DxImageThyroidUltrasound_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxPulmonaryTest WITH NOCHECK ADD CONSTRAINT
	FK_DxPulmonaryTest_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageFindings WITH NOCHECK ADD CONSTRAINT
	FK_DxImageFindings_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageFindingsProstate WITH NOCHECK ADD CONSTRAINT
	FK_DxImageFindingsProstate_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageFindingsKidney WITH NOCHECK ADD CONSTRAINT
	FK_DxImageFindingsKidney_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
COMMIT
GO

--46ModifyTableProstatectomyProc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_ProstatectomyProc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
	ProcStageSystem varchar(50) NULL,
	ProcStageT varchar(50) NULL,
	ProcStageN varchar(50) NULL,
	ProcStageM varchar(50) NULL,
	ProcBulldogClamps varchar(50) NULL,
	ProcBladderClosure varchar(50) NULL,
	ProcAccessVessels varchar(50) NULL,
	ProcAV_Preserved varchar(50) NULL,
	ProcPuboprostatics varchar(50) NULL,
	ProcR_AV_Site varchar(50) NULL,
	ProcR_AV_Diam varchar(50) NULL,
	ProcL_AV_Site varchar(50) NULL,
	ProcL_AV_Diam varchar(50) NULL,
	ProcR_DopplerStatus varchar(50) NULL,
	ProcR_DopplerVA varchar(50) NULL,
	ProcL_DopplerStatus varchar(50) NULL,
	ProcL_DopplerVA varchar(50) NULL,
	ProcL_NVB_DissectionType varchar(50) NULL,
	ProcL_NVB_Status varchar(50) NULL,
	ProcL_NVB_Graft varchar(50) NULL,
	ProcL_NVB_Donor varchar(50) NULL,
	ProcL_NVB_Quality varchar(50) NULL,
	ProcR_NVB_DissectionType varchar(50) NULL,
	ProcR_NVB_Status varchar(50) NULL,
	ProcR_NVB_Graft varchar(50) NULL,
	ProcR_NVB_Donor varchar(50) NULL,
	ProcR_NVB_Quality varchar(50) NULL,
	ProcAnastQuality varchar(50) NULL,
	ProcAnastNumSutures varchar(50) NULL,
	ProcAnastSuturePattern varchar(50) NULL,
	ProcAnastSutureNotes varchar(255) NULL,
	ProcAnastWatertight varchar(50) NULL,
	ProcBN_Diam varchar(50) NULL,
	ProcBN_DegreeEversion varchar(50) NULL,
	ProcSuspVeinComplex varchar(50) NULL,
	ProcL_Drain varchar(50) NULL,
	ProcR_Drain varchar(50) NULL,
	ProcAnteriorDrain varchar(50) NULL,
	ProcPosteriorDrain varchar(50) NULL,
	ProcCathTraction varchar(50) NULL,
	ProcCathTractionDuration varchar(50) NULL,
	ProcSV_DissectFirst varchar(50) NULL,
	ProcPeriprostaticVeins varchar(50) NULL,
	ProcBladderNeckPreservation varchar(50) NULL,
	ProcUrethralStumpScore varchar(50) NULL,
	ProcPelvisAccessibility varchar(50) NULL,
	ProcSkinIncisionLength varchar(50) NULL,
	ProcFascialIncisionLength varchar(50) NULL,
	ProcMedianLobe varchar(50) NULL,
	ProcUrachalSparing varchar(50) NULL,
	ProcNumSize5Ports varchar(50) NULL,
	ProcNumSize8Ports varchar(50) NULL,
	ProcNumSize10Ports varchar(50) NULL,
	ProcNumSize12Ports varchar(50) NULL,
	ProcMethodOfEntry varchar(50) NULL,
	ProcSkinClosure varchar(50) NULL,
	ProcFascialClosureMethod varchar(50) NULL,
	ProcClosureMaterialsUsed varchar(50) NULL,
	ProcSV_Excision varchar(50) NULL,
	ProcL_SV_Excision varchar(50) NULL,
	ProcR_SV_Excision varchar(50) NULL,
	ProcHypogastric varchar(50) NULL,
	ProcPneumoperPressure varchar(50) NULL,
	ProcFoleyPlacement varchar(50) NULL,
	ProcBladderNeckReconstruction varchar(50) NULL,
	ProcAnteriorFascialSuspension varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_ProstatectomyProc)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_ProstatectomyProc (LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcStageSystem, ProcStageT, ProcBulldogClamps, ProcBladderClosure, ProcAccessVessels, ProcAV_Preserved, ProcPuboprostatics, ProcR_AV_Site, ProcR_AV_Diam, ProcL_AV_Site, ProcL_AV_Diam, ProcR_DopplerStatus, ProcR_DopplerVA, ProcL_DopplerStatus, ProcL_DopplerVA, ProcL_NVB_DissectionType, ProcL_NVB_Status, ProcL_NVB_Graft, ProcL_NVB_Donor, ProcL_NVB_Quality, ProcR_NVB_DissectionType, ProcR_NVB_Status, ProcR_NVB_Graft, ProcR_NVB_Donor, ProcR_NVB_Quality, ProcAnastQuality, ProcAnastNumSutures, ProcAnastSuturePattern, ProcAnastSutureNotes, ProcAnastWatertight, ProcBN_Diam, ProcBN_DegreeEversion, ProcSuspVeinComplex, ProcL_Drain, ProcR_Drain, ProcAnteriorDrain, ProcPosteriorDrain, ProcCathTraction, ProcCathTractionDuration, ProcSV_DissectFirst, ProcPeriprostaticVeins, ProcBladderNeckPreservation, ProcUrethralStumpScore, ProcPelvisAccessibility, ProcSkinIncisionLength, ProcFascialIncisionLength, ProcMedianLobe, ProcUrachalSparing, ProcNumSize5Ports, ProcNumSize8Ports, ProcNumSize10Ports, ProcNumSize12Ports, ProcMethodOfEntry, ProcSkinClosure, ProcFascialClosureMethod, ProcClosureMaterialsUsed, ProcSV_Excision, ProcL_SV_Excision, ProcR_SV_Excision, ProcHypogastric, ProcPneumoperPressure, ProcFoleyPlacement, ProcBladderNeckReconstruction, ProcAnteriorFascialSuspension, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcStageSystem, ProcStageT, ProcBulldogClamps, ProcBladderClosure, ProcAccessVessels, ProcAV_Preserved, ProcPuboprostatics, ProcR_AV_Site, ProcR_AV_Diam, ProcL_AV_Site, ProcL_AV_Diam, ProcR_DopplerStatus, ProcR_DopplerVA, ProcL_DopplerStatus, ProcL_DopplerVA, ProcL_NVB_DissectionType, ProcL_NVB_Status, ProcL_NVB_Graft, ProcL_NVB_Donor, ProcL_NVB_Quality, ProcR_NVB_DissectionType, ProcR_NVB_Status, ProcR_NVB_Graft, ProcR_NVB_Donor, ProcR_NVB_Quality, ProcAnastQuality, ProcAnastNumSutures, ProcAnastSuturePattern, ProcAnastSutureNotes, ProcAnastWatertight, ProcBN_Diam, ProcBN_DegreeEversion, ProcSuspVeinComplex, ProcL_Drain, ProcR_Drain, ProcAnteriorDrain, ProcPosteriorDrain, ProcCathTraction, ProcCathTractionDuration, ProcSV_DissectFirst, ProcPeriprostaticVeins, ProcBladderNeckPreservation, ProcUrethralStumpScore, ProcPelvisAccessibility, ProcSkinIncisionLength, ProcFascialIncisionLength, ProcMedianLobe, ProcUrachalSparing, ProcNumSize5Ports, ProcNumSize8Ports, ProcNumSize10Ports, ProcNumSize12Ports, ProcMethodOfEntry, ProcSkinClosure, ProcFascialClosureMethod, ProcClosureMaterialsUsed, ProcSV_Excision, ProcL_SV_Excision, ProcR_SV_Excision, ProcHypogastric, ProcPneumoperPressure, ProcFoleyPlacement, ProcBladderNeckReconstruction, ProcAnteriorFascialSuspension, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_ProstatectomyProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_ProstatectomyProc
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_ProstatectomyProc', N'AuditLog_ProstatectomyProc', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProstatectomyProc
	DROP CONSTRAINT FK_ProstatectomyProc_Procedures
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_ProstatectomyProc
	(
	ProcedureId int NOT NULL,
	ProcStageSystem varchar(50) NULL,
	ProcStageT varchar(50) NULL,
	ProcStageN varchar(50) NULL,
	ProcStageM varchar(50) NULL,
	ProcBulldogClamps varchar(50) NULL,
	ProcBladderClosure varchar(50) NULL,
	ProcAccessVessels varchar(50) NULL,
	ProcAV_Preserved varchar(50) NULL,
	ProcPuboprostatics varchar(50) NULL,
	ProcR_AV_Site varchar(50) NULL,
	ProcR_AV_Diam varchar(50) NULL,
	ProcL_AV_Site varchar(50) NULL,
	ProcL_AV_Diam varchar(50) NULL,
	ProcR_DopplerStatus varchar(50) NULL,
	ProcR_DopplerVA varchar(50) NULL,
	ProcL_DopplerStatus varchar(50) NULL,
	ProcL_DopplerVA varchar(50) NULL,
	ProcL_NVB_DissectionType varchar(50) NULL,
	ProcL_NVB_Status varchar(50) NULL,
	ProcL_NVB_Graft varchar(50) NULL,
	ProcL_NVB_Donor varchar(50) NULL,
	ProcL_NVB_Quality varchar(50) NULL,
	ProcR_NVB_DissectionType varchar(50) NULL,
	ProcR_NVB_Status varchar(50) NULL,
	ProcR_NVB_Graft varchar(50) NULL,
	ProcR_NVB_Donor varchar(50) NULL,
	ProcR_NVB_Quality varchar(50) NULL,
	ProcAnastQuality varchar(50) NULL,
	ProcAnastNumSutures varchar(50) NULL,
	ProcAnastSuturePattern varchar(50) NULL,
	ProcAnastSutureNotes varchar(255) NULL,
	ProcAnastWatertight varchar(50) NULL,
	ProcBN_Diam varchar(50) NULL,
	ProcBN_DegreeEversion varchar(50) NULL,
	ProcSuspVeinComplex varchar(50) NULL,
	ProcL_Drain varchar(50) NULL,
	ProcR_Drain varchar(50) NULL,
	ProcAnteriorDrain varchar(50) NULL,
	ProcPosteriorDrain varchar(50) NULL,
	ProcCathTraction varchar(50) NULL,
	ProcCathTractionDuration varchar(50) NULL,
	ProcSV_DissectFirst varchar(50) NULL,
	ProcPeriprostaticVeins varchar(50) NULL,
	ProcBladderNeckPreservation varchar(50) NULL,
	ProcUrethralStumpScore varchar(50) NULL,
	ProcPelvisAccessibility varchar(50) NULL,
	ProcSkinIncisionLength varchar(50) NULL,
	ProcFascialIncisionLength varchar(50) NULL,
	ProcMedianLobe varchar(50) NULL,
	ProcUrachalSparing varchar(50) NULL,
	ProcNumSize5Ports varchar(50) NULL,
	ProcNumSize8Ports varchar(50) NULL,
	ProcNumSize10Ports varchar(50) NULL,
	ProcNumSize12Ports varchar(50) NULL,
	ProcMethodOfEntry varchar(50) NULL,
	ProcSkinClosure varchar(50) NULL,
	ProcFascialClosureMethod varchar(50) NULL,
	ProcClosureMaterialsUsed varchar(50) NULL,
	ProcSV_Excision varchar(50) NULL,
	ProcL_SV_Excision varchar(50) NULL,
	ProcR_SV_Excision varchar(50) NULL,
	ProcHypogastric varchar(50) NULL,
	ProcPneumoperPressure varchar(50) NULL,
	ProcFoleyPlacement varchar(50) NULL,
	ProcBladderNeckReconstruction varchar(50) NULL,
	ProcAnteriorFascialSuspension varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.ProstatectomyProc)
	 EXEC('INSERT INTO dbo.Tmp_ProstatectomyProc (ProcedureId, ProcStageSystem, ProcStageT, ProcBulldogClamps, ProcBladderClosure, ProcAccessVessels, ProcAV_Preserved, ProcPuboprostatics, ProcR_AV_Site, ProcR_AV_Diam, ProcL_AV_Site, ProcL_AV_Diam, ProcR_DopplerStatus, ProcR_DopplerVA, ProcL_DopplerStatus, ProcL_DopplerVA, ProcL_NVB_DissectionType, ProcL_NVB_Status, ProcL_NVB_Graft, ProcL_NVB_Donor, ProcL_NVB_Quality, ProcR_NVB_DissectionType, ProcR_NVB_Status, ProcR_NVB_Graft, ProcR_NVB_Donor, ProcR_NVB_Quality, ProcAnastQuality, ProcAnastNumSutures, ProcAnastSuturePattern, ProcAnastSutureNotes, ProcAnastWatertight, ProcBN_Diam, ProcBN_DegreeEversion, ProcSuspVeinComplex, ProcL_Drain, ProcR_Drain, ProcAnteriorDrain, ProcPosteriorDrain, ProcCathTraction, ProcCathTractionDuration, ProcSV_DissectFirst, ProcPeriprostaticVeins, ProcBladderNeckPreservation, ProcUrethralStumpScore, ProcPelvisAccessibility, ProcSkinIncisionLength, ProcFascialIncisionLength, ProcMedianLobe, ProcUrachalSparing, ProcNumSize5Ports, ProcNumSize8Ports, ProcNumSize10Ports, ProcNumSize12Ports, ProcMethodOfEntry, ProcSkinClosure, ProcFascialClosureMethod, ProcClosureMaterialsUsed, ProcSV_Excision, ProcL_SV_Excision, ProcR_SV_Excision, ProcHypogastric, ProcPneumoperPressure, ProcFoleyPlacement, ProcBladderNeckReconstruction, ProcAnteriorFascialSuspension, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT ProcedureId, ProcStageSystem, ProcStageT, ProcBulldogClamps, ProcBladderClosure, ProcAccessVessels, ProcAV_Preserved, ProcPuboprostatics, ProcR_AV_Site, ProcR_AV_Diam, ProcL_AV_Site, ProcL_AV_Diam, ProcR_DopplerStatus, ProcR_DopplerVA, ProcL_DopplerStatus, ProcL_DopplerVA, ProcL_NVB_DissectionType, ProcL_NVB_Status, ProcL_NVB_Graft, ProcL_NVB_Donor, ProcL_NVB_Quality, ProcR_NVB_DissectionType, ProcR_NVB_Status, ProcR_NVB_Graft, ProcR_NVB_Donor, ProcR_NVB_Quality, ProcAnastQuality, ProcAnastNumSutures, ProcAnastSuturePattern, ProcAnastSutureNotes, ProcAnastWatertight, ProcBN_Diam, ProcBN_DegreeEversion, ProcSuspVeinComplex, ProcL_Drain, ProcR_Drain, ProcAnteriorDrain, ProcPosteriorDrain, ProcCathTraction, ProcCathTractionDuration, ProcSV_DissectFirst, ProcPeriprostaticVeins, ProcBladderNeckPreservation, ProcUrethralStumpScore, ProcPelvisAccessibility, ProcSkinIncisionLength, ProcFascialIncisionLength, ProcMedianLobe, ProcUrachalSparing, ProcNumSize5Ports, ProcNumSize8Ports, ProcNumSize10Ports, ProcNumSize12Ports, ProcMethodOfEntry, ProcSkinClosure, ProcFascialClosureMethod, ProcClosureMaterialsUsed, ProcSV_Excision, ProcL_SV_Excision, ProcR_SV_Excision, ProcHypogastric, ProcPneumoperPressure, ProcFoleyPlacement, ProcBladderNeckReconstruction, ProcAnteriorFascialSuspension, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.ProstatectomyProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.ProstatectomyProc
GO
EXECUTE sp_rename N'dbo.Tmp_ProstatectomyProc', N'ProstatectomyProc', 'OBJECT' 
GO
ALTER TABLE dbo.ProstatectomyProc ADD CONSTRAINT
	PK_ProstatectomyProc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.ProstatectomyProc WITH NOCHECK ADD CONSTRAINT
	FK_ProstatectomyProc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditProstatectomyProc_UD
ON dbo.ProstatectomyProc FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_ProstatectomyProc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_ProstatectomyProc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO

--47ModifyTableProject.sql
GO
--resize column
ALTER TABLE Project ALTER COLUMN Title varchar(1000)
GO

--48ModifyTableProstateBiopsyCorePath.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_ProstateBiopsyCorePath
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PathologyId int NULL,
	ProstateBiopsyCorePathId int NULL,
	PathCoreSide varchar(50) NULL,
	PathCoreLevel varchar(50) NULL,
	PathCoreLaterality varchar(50) NULL,
	PathCoreZone varchar(50) NULL,
	PathCoreNumCores varchar(50) NULL,
	PathCoreNumFragments varchar(50) NULL,
	PathCoreLength varchar(50) NULL,
	PathCorePercCancer varchar(50) NULL,
	PathCoreMaxCancerLength varchar(50) NULL,
	PathCoreCancerLength varchar(50) NULL,
	PathCorePercHG_Cancer varchar(50) NULL,
	PathCoreHG_Length varchar(50) NULL,
	PathCoreGG1 varchar(50) NULL,
	PathCoreGG2 varchar(50) NULL,
	PathCoreGG3 varchar(50) NULL,
	PathCoreGGS varchar(50) NULL,
	PathCoreResult varchar(50) NULL,
	PathCoreExtension varchar(50) NULL,
	PathCoreProstatitis varchar(50) NULL,
	PathCorePerineuralInv varchar(50) NULL,
	PathCorePNI_Diam varchar(50) NULL,
	PathCoreHG_PIN varchar(50) NULL,
	PathCoreType varchar(50) NULL,
	PathCoreCapsule varchar(50) NULL,
	PathCoreFat varchar(50) NULL,
	PathCoreASAP varchar(50) NULL,
	PathCoreAtrophy varchar(50) NULL,
	PathCoreStroma varchar(50) NULL,
	PathCoreNotes varchar(1000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_ProstateBiopsyCorePath)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_ProstateBiopsyCorePath (LoggedOperation, LoggedBy, LoggedTime, PathologyId, ProstateBiopsyCorePathId, PathCoreSide, PathCoreLevel, PathCoreLaterality, PathCoreZone, PathCoreNumCores, PathCoreNumFragments, PathCoreLength, PathCorePercCancer, PathCoreMaxCancerLength, PathCoreCancerLength, PathCorePercHG_Cancer, PathCoreHG_Length, PathCoreGG1, PathCoreGG2, PathCoreGG3, PathCoreGGS, PathCoreResult, PathCoreExtension, PathCoreProstatitis, PathCorePerineuralInv, PathCorePNI_Diam, PathCoreHG_PIN, PathCoreType, PathCoreCapsule, PathCoreFat, PathCoreASAP, PathCoreAtrophy, PathCoreStroma, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PathologyId, ProstateBiopsyCorePathId, PathCoreSide, PathCoreLevel, PathCoreLaterality, PathCoreZone, PathCoreNumCores, PathCoreNumFragments, PathCoreLength, PathCorePercCancer, PathCoreMaxCancerLength, PathCoreCancerLength, PathCorePercHG_Cancer, PathCoreHG_Length, PathCoreGG1, PathCoreGG2, PathCoreGG3, PathCoreGGS, PathCoreResult, PathCoreExtension, PathCoreProstatitis, PathCorePerineuralInv, PathCorePNI_Diam, PathCoreHG_PIN, PathCoreType, PathCoreCapsule, PathCoreFat, PathCoreASAP, PathCoreAtrophy, PathCoreStroma, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_ProstateBiopsyCorePath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_ProstateBiopsyCorePath
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_ProstateBiopsyCorePath', N'AuditLog_ProstateBiopsyCorePath', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProstateBiopsyCorePath
	DROP CONSTRAINT FK_ProstateBiopsyCorePath_Pathology
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_ProstateBiopsyCorePath
	(
	PathologyId int NOT NULL,
	ProstateBiopsyCorePathId int NOT NULL IDENTITY (1, 1),
	PathCoreSide varchar(50) NULL,
	PathCoreLevel varchar(50) NULL,
	PathCoreLaterality varchar(50) NULL,
	PathCoreZone varchar(50) NULL,
	PathCoreNumCores varchar(50) NULL,
	PathCoreNumFragments varchar(50) NULL,
	PathCoreLength varchar(50) NULL,
	PathCorePercCancer varchar(50) NULL,
	PathCoreMaxCancerLength varchar(50) NULL,
	PathCoreCancerLength varchar(50) NULL,
	PathCorePercHG_Cancer varchar(50) NULL,
	PathCoreHG_Length varchar(50) NULL,
	PathCoreGG1 varchar(50) NULL,
	PathCoreGG2 varchar(50) NULL,
	PathCoreGG3 varchar(50) NULL,
	PathCoreGGS varchar(50) NULL,
	PathCoreResult varchar(50) NULL,
	PathCoreExtension varchar(50) NULL,
	PathCoreProstatitis varchar(50) NULL,
	PathCorePerineuralInv varchar(50) NULL,
	PathCorePNI_Diam varchar(50) NULL,
	PathCoreHG_PIN varchar(50) NULL,
	PathCoreType varchar(50) NULL,
	PathCoreCapsule varchar(50) NULL,
	PathCoreFat varchar(50) NULL,
	PathCoreASAP varchar(50) NULL,
	PathCoreAtrophy varchar(50) NULL,
	PathCoreStroma varchar(50) NULL,
	PathCoreNotes varchar(1000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
SET IDENTITY_INSERT dbo.Tmp_ProstateBiopsyCorePath ON
GO
IF EXISTS(SELECT * FROM dbo.ProstateBiopsyCorePath)
	 EXEC('INSERT INTO dbo.Tmp_ProstateBiopsyCorePath (PathologyId, ProstateBiopsyCorePathId, PathCoreSide, PathCoreLevel, PathCoreLaterality, PathCoreZone, PathCoreNumCores, PathCoreNumFragments, PathCoreLength, PathCorePercCancer, PathCoreMaxCancerLength, PathCoreCancerLength, PathCorePercHG_Cancer, PathCoreHG_Length, PathCoreGG1, PathCoreGG2, PathCoreGG3, PathCoreGGS, PathCoreResult, PathCoreExtension, PathCoreProstatitis, PathCorePerineuralInv, PathCorePNI_Diam, PathCoreHG_PIN, PathCoreType, PathCoreCapsule, PathCoreFat, PathCoreASAP, PathCoreAtrophy, PathCoreStroma, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT PathologyId, ProstateBiopsyCorePathId, PathCoreSide, PathCoreLevel, PathCoreLaterality, PathCoreZone, PathCoreNumCores, PathCoreNumFragments, PathCoreLength, PathCorePercCancer, PathCoreMaxCancerLength, PathCoreCancerLength, PathCorePercHG_Cancer, PathCoreHG_Length, PathCoreGG1, PathCoreGG2, PathCoreGG3, PathCoreGGS, PathCoreResult, PathCoreExtension, PathCoreProstatitis, PathCorePerineuralInv, PathCorePNI_Diam, PathCoreHG_PIN, PathCoreType, PathCoreCapsule, PathCoreFat, PathCoreASAP, PathCoreAtrophy, PathCoreStroma, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.ProstateBiopsyCorePath WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_ProstateBiopsyCorePath OFF
GO
DROP TABLE dbo.ProstateBiopsyCorePath
GO
EXECUTE sp_rename N'dbo.Tmp_ProstateBiopsyCorePath', N'ProstateBiopsyCorePath', 'OBJECT' 
GO
ALTER TABLE dbo.ProstateBiopsyCorePath ADD CONSTRAINT
	PK_ProstateBiopsyCorePath PRIMARY KEY CLUSTERED 
	(
	ProstateBiopsyCorePathId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.ProstateBiopsyCorePath WITH NOCHECK ADD CONSTRAINT
	FK_ProstateBiopsyCorePath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditProstateBiopsyCorePath_UD
ON dbo.ProstateBiopsyCorePath FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_ProstateBiopsyCorePath
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProstateBiopsyCorePathId = Inserted.ProstateBiopsyCorePathId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_ProstateBiopsyCorePath
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO

--49CreateTableSpineProc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.AuditLog_SpineProc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
	ProcTumorResection varchar(50) NULL,
	ProcNumLaminectomyLevel varchar(50) NULL,
	ProcLaminectomyLevels varchar(50) NULL,
	ProcNumVertebrectomyLevels varchar(50) NULL,
	ProcVertebrectomyLevels varchar(50) NULL,
	ProcPercVertebralBodyRemoved varchar(50) NULL,
	ProcAnteriorReconstruction varchar(50) NULL,
	ProcAnteriorReconstructionType varchar(50) NULL,
	ProcNumPediclesRemoved varchar(50) NULL,
	ProcPediclesRemovedLevel varchar(50) NULL,
	ProcNumInstrumentedLevel varchar(50) NULL,
	ProcInstrumentedLevel varchar(50) NULL,
	ProcPreOpEmbolization varchar(50) NULL,
	ProcCementAugmentation varchar(50) NULL,
	ProcCementLevel varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.SpineProc
	(
	ProcedureId int NOT NULL,
	ProcTumorResection varchar(50) NULL,
	ProcNumLaminectomyLevel varchar(50) NULL,
	ProcLaminectomyLevels varchar(50) NULL,
	ProcNumVertebrectomyLevels varchar(50) NULL,
	ProcVertebrectomyLevels varchar(50) NULL,
	ProcPercVertebralBodyRemoved varchar(50) NULL,
	ProcAnteriorReconstruction varchar(50) NULL,
	ProcAnteriorReconstructionType varchar(50) NULL,
	ProcNumPediclesRemoved varchar(50) NULL,
	ProcPediclesRemovedLevel varchar(50) NULL,
	ProcNumInstrumentedLevel varchar(50) NULL,
	ProcInstrumentedLevel varchar(50) NULL,
	ProcPreOpEmbolization varchar(50) NULL,
	ProcCementAugmentation varchar(50) NULL,
	ProcCementLevel varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.SpineProc ADD CONSTRAINT
	PK_SpineProc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.SpineProc ADD CONSTRAINT
	FK_SpineProc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
GO
COMMIT
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgAuditSpineProc_UD]
ON [dbo].[SpineProc] FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_SpineProc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_SpineProc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
EXEC sp_settriggerorder @triggername=N'[dbo].[trgAuditSpineProc_UD]', @order=N'Last', @stmttype=N'UPDATE'
GO

--50CreateTableMedAdministration.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.AuditLog_MedAdministration
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	MedicationId int NULL,
	MedAdministrationId int NULL,
	MedAdminDateText varchar(50) NULL,
	MedAdminDate datetime NULL,
	MedAdminType varchar(50) NULL,
	MedAdminMedication varchar(100) NULL,
	MedAdminStopDateText varchar(50) NULL,
	MedAdminStopDate datetime NULL,
	MedAdminDose varchar(50) NULL,
	MedAdminTotalDose varchar(50) NULL,
	MedAdminUnits varchar(50) NULL,
	MedAdminRoute varchar(50) NULL,
	MedAdminSchedule varchar(50) NULL,
	MedAdminIndication varchar(50) NULL,
	MedAdminNotes varchar(1000) NULL,
	MedAdminDataSource varchar(100) NULL,
	MedAdminQuality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.MedAdministration
	(
	MedicationId int NOT NULL,
	MedAdministrationId int NOT NULL IDENTITY (1, 1),
	MedAdminDateText varchar(50) NULL,
	MedAdminDate datetime NULL,
	MedAdminType varchar(50) NULL,
	MedAdminMedication varchar(100) NULL,
	MedAdminStopDateText varchar(50) NULL,
	MedAdminStopDate datetime NULL,
	MedAdminDose varchar(50) NULL,
	MedAdminTotalDose varchar(50) NULL,
	MedAdminUnits varchar(50) NULL,
	MedAdminRoute varchar(50) NULL,
	MedAdminSchedule varchar(50) NULL,
	MedAdminIndication varchar(50) NULL,
	MedAdminNotes varchar(1000) NULL,
	MedAdminDataSource varchar(100) NULL,
	MedAdminQuality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.MedAdministration ADD CONSTRAINT
	PK_MedAdministration PRIMARY KEY CLUSTERED 
	(
	MedAdministrationId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_MedAdministration_MedicationId ON dbo.MedAdministration
	(
	MedicationId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.MedAdministration ADD CONSTRAINT
	FK_MedAdministration_Medications FOREIGN KEY
	(
	MedicationId
	) REFERENCES dbo.Medications
	(
	MedicationId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
GO
COMMIT
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgAuditMedAdministration_UD]
ON [dbo].[MedAdministration] FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_MedAdministration
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.MedAdministrationId = Inserted.MedAdministrationId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_MedAdministration
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
EXEC sp_settriggerorder @triggername=N'[dbo].[trgAuditMedAdministration_UD]', @order=N'Last', @stmttype=N'UPDATE'
GO

--51ModifyTableAllergies.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_Allergies
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PatientId int NULL,
	AllergyId int NULL,
	Allergen varchar(255) NULL,
	AllergyResponse varchar(50) NULL,
	AllergyNotes varchar(1000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_Allergies)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_Allergies (LoggedOperation, LoggedBy, LoggedTime, PatientId, AllergyId, Allergen, AllergyResponse, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PatientId, AllergyId, Allergen, AllergyResponse, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_Allergies WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_Allergies
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_Allergies', N'AuditLog_Allergies', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Allergies
	DROP CONSTRAINT FK_Allergies_Patients
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Allergies
	(
	PatientId int NOT NULL,
	AllergyId int NOT NULL IDENTITY (1, 1),
	Allergen varchar(255) NOT NULL,
	AllergyResponse varchar(50) NULL,
	AllergyNotes varchar(1000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
SET IDENTITY_INSERT dbo.Tmp_Allergies ON
GO
IF EXISTS(SELECT * FROM dbo.Allergies)
	 EXEC('INSERT INTO dbo.Tmp_Allergies (PatientId, AllergyId, Allergen, AllergyResponse, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PatientId, AllergyId, Allergen, AllergyResponse, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.Allergies WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Allergies OFF
GO
DROP TABLE dbo.Allergies
GO
EXECUTE sp_rename N'dbo.Tmp_Allergies', N'Allergies', 'OBJECT' 
GO
ALTER TABLE dbo.Allergies ADD CONSTRAINT
	PK_Allergies PRIMARY KEY CLUSTERED 
	(
	AllergyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_Allergies_PatientId ON dbo.Allergies
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.Allergies WITH NOCHECK ADD CONSTRAINT
	FK_Allergies_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditAllergies_UD
ON dbo.Allergies FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_Allergies
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.AllergyId = Inserted.AllergyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_Allergies
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditAllergies_UD', N'last', N'update'
GO
COMMIT
GO

--52ModifyspGetPatientHPIBreast.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spGetPatientHPIBreast]
   @PatientId int = NULL,
   @Rowcount int = NULL OUTPUT
AS

SET NOCOUNT ON

--temp table structure
DECLARE @ChronoTable TABLE
   (
   RowId        int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarSummary   varchar(1000) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   TableName    varchar(50) NULL,
   PrimaryKey   int NOT NULL,
   RelatedRowId int NULL,
   VarStopDate  varchar(50) NULL
   --ExtraInfo    varchar(500) NULL
   )

--medical therapies
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT MedTxDateText, MedTxType, MedTxAgent, MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId
FROM MedicalTherapy
WHERE MedicalTherapy.PatientId = @PatientId

--clinical stages
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)SELECT ClinStageDateText, '', LTRIM(ISNULL(ClinStageSide,'') + ' ' + ISNULL(ClinStageT,'')), ClinStageQuality, ClinStageDate, 'ClinicalStages', ClinicalStageId
FROM ClinicalStages
WHERE (ClinicalStages.PatientId = @PatientId AND ClinStageDisease='Breast')

--main procedure and associated pathology, grade
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT DISTINCT OpDateText, '', ISNULL(OpCaseSurgeon + ' ',''), OpQuality, OpDate, 'OperatingRoomDetails', a.OperatingRoomDetailId
FROM OperatingRoomDetails a INNER JOIN Procedures b ON a.OperatingRoomDetailId = b.OperatingRoomDetailId
WHERE b.PatientId = @PatientId AND 
      (ProcName LIKE '%Mastectomy%' OR ProcName='Wide Local Excision')

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,RelatedRowId)
SELECT ProcDateText, '', LTRIM(ISNULL(ProcSide + ' ','') + ISNULL(ProcName,'Breast, unspecified')), 
       ProcQuality, ProcDate, 'Procedures', ProcedureId, OR_RowId
FROM Procedures a INNER JOIN 
     (SELECT PrimaryKey, RowId OR_RowId
      FROM @ChronoTable 
      WHERE TableName = 'OperatingRoomDetails') b ON a.OperatingRoomDetailId = b.PrimaryKey
WHERE a.PatientId = @PatientId AND 
      (ProcName LIKE '%Mastectomy%' OR ProcName='Wide Local Excision')

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,RelatedRowId)
SELECT PathDateText, '', ISNULL('Histology = ' + PathHistology,''), PathQuality, PathDate, 
      'Pathology', PathologyId, OR_RowId
FROM Pathology a INNER JOIN 
     (SELECT PrimaryKey, RowId ProcRowId
      FROM @ChronoTable 
      WHERE TableName = 'Procedures') b ON a.ProcedureId = b.PrimaryKey INNER JOIN
     Procedures c ON a.ProcedureId = c.ProcedureId INNER JOIN
     (SELECT PrimaryKey, RowId OR_RowId
      FROM @ChronoTable 
      WHERE TableName = 'OperatingRoomDetails') d ON c.OperatingRoomDetailId = d.PrimaryKey
WHERE a.PatientId = @PatientId

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,RelatedRowId)
SELECT PathDateText, '', 
       ISNULL('TNM-Stage = ' + PathStageT,'') + ISNULL(', ' + PathStageN,'') + ISNULL(', ' + PathStageM,''), 
       a.PathQuality, PathDate, 'PathologyStageGrade', PathologyStageGradeId, OR_RowId
FROM PathologyStageGrade a INNER JOIN 
     (SELECT PrimaryKey, RowId PathRowId
      FROM @ChronoTable 
      WHERE TableName = 'Pathology') b ON a.PathologyId = b.PrimaryKey INNER JOIN
      Pathology c ON a.PathologyId = c.PathologyId INNER JOIN
      Procedures d ON c.ProcedureId = d.ProcedureId INNER JOIN
     (SELECT PrimaryKey, RowId OR_RowId
      FROM @ChronoTable 
      WHERE TableName = 'OperatingRoomDetails') e ON d.OperatingRoomDetailId = e.PrimaryKey
WHERE c.PatientId = @PatientId

--path tests
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT pt.PathDateText, pt.PathTest, pt.PathResult, pt.PathQuality, pt.PathDate, 'PathTest', pt.PathTestId
FROM Pathology p INNER JOIN PathTest pt ON p.PathologyId = pt.PathologyId
WHERE p.PatientId = @PatientId AND PathTest IN ('Her-2 / neu','ER','PR')

--procedures not in the current list and associated pathology, grade
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, '', ProcName, ProcQuality, ProcDate, 'Procedures', ProcedureId
FROM Procedures a LEFT OUTER JOIN 
                  (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                  ON a.ProcedureId = b.PrimaryKey
WHERE a.PatientId = @PatientId AND b.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,RelatedRowId)
SELECT PathDateText, '', 
       LTRIM(ISNULL(RIGHT(PathStageSystem,2),'') + ' '  + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ISNULL(PathStageM,'')),
       a.PathQuality, PathDate, 'PathologyStageGrade', PathologyStageGradeId, ProcRowId
FROM PathologyStageGrade a INNER JOIN 
     Pathology b ON a.PathologyId=b.PathologyId INNER JOIN
     (SELECT PrimaryKey, RowId ProcRowId
      FROM @ChronoTable 
      WHERE TableName = 'Procedures') c ON b.ProcedureId = c.PrimaryKey
      LEFT OUTER JOIN
      (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'PathologyStageGrade') AS d
      ON a.PathologyStageGradeId = d.PrimaryKey
WHERE b.PatientId = @PatientId AND d.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,RelatedRowId)
SELECT PathDateText, '', LTRIM(ISNULL(PathHistology,'') + ' ' + ISNULL(PathResult,'')), PathQuality, PathDate, 
      'Pathology', PathologyId, ProcRowId
FROM Pathology a INNER JOIN 
     (SELECT PrimaryKey, RowId ProcRowId
      FROM @ChronoTable 
      WHERE TableName = 'Procedures') b ON a.ProcedureId = b.PrimaryKey
      LEFT OUTER JOIN
      (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'Pathology') AS c
      ON a.PathologyId = c.PrimaryKey
WHERE a.PatientId = @PatientId AND c.PrimaryKey IS NULL

--Clean up variables
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarSummary = ''
WHERE VarSummary IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL

--output resultset
SELECT VarDate, 
      (CASE WHEN VarName<>'' 
             THEN VarName + ' ' 
             ELSE '' 
       END + VarSummary) AS VarSummary,TableName,PrimaryKey,RowId,RelatedRowId
       --,SortDate
FROM @ChronoTable 
ORDER BY SortDate

SET @Rowcount = @@ROWCOUNT
GO

--53ModifyTableAppointments.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_Appointments
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	AppointmentId int NULL,
	ApptPatientId int NULL,
	ApptMRN varchar(50) NULL,
	ApptTime datetime NULL,
	ApptLastName varchar(50) NULL,
	ApptFirstName varchar(50) NULL,
	ApptBirthDate datetime NULL,
	ApptPhysician varchar(50) NULL,
	ApptVisitType varchar(50) NULL,
	ApptDept varchar(50) NULL,
	ApptClinicDate datetime NULL,
	ApptNotes varchar(1000) NULL,
	ApptICD_Code varchar(50) NULL,
	ApptICD_CodeDescription varchar(50) NULL,
	ApptHide varchar(50) NULL,
	ApptStatus varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_Appointments)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_Appointments (LoggedOperation, LoggedBy, LoggedTime, AppointmentId, ApptPatientId, ApptMRN, ApptTime, ApptLastName, ApptFirstName, ApptBirthDate, ApptPhysician, ApptVisitType, ApptDept, ApptClinicDate, ApptNotes, ApptICD_Code, ApptICD_CodeDescription, ApptHide, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, AppointmentId, ApptPatientId, ApptMRN, ApptTime, ApptLastName, ApptFirstName, ApptBirthDate, ApptPhysician, ApptVisitType, ApptDept, ApptClinicDate, ApptNotes, ApptICD_Code, ApptICD_CodeDescription, ApptHide, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_Appointments WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_Appointments
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_Appointments', N'AuditLog_Appointments', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Appointments
	(
	AppointmentId int NOT NULL IDENTITY (1, 1),
	ApptPatientId int NULL,
	ApptMRN varchar(50) NULL,
	ApptTime datetime NULL,
	ApptLastName varchar(50) NULL,
	ApptFirstName varchar(50) NULL,
	ApptBirthDate datetime NULL,
	ApptPhysician varchar(50) NULL,
	ApptVisitType varchar(50) NULL,
	ApptDept varchar(50) NULL,
	ApptClinicDate datetime NULL,
	ApptNotes varchar(1000) NULL,
	ApptICD_Code varchar(50) NULL,
	ApptICD_CodeDescription varchar(50) NULL,
	ApptHide varchar(50) NULL,
	ApptStatus varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
SET IDENTITY_INSERT dbo.Tmp_Appointments ON
GO
IF EXISTS(SELECT * FROM dbo.Appointments)
	 EXEC('INSERT INTO dbo.Tmp_Appointments (AppointmentId, ApptPatientId, ApptMRN, ApptTime, ApptLastName, ApptFirstName, ApptBirthDate, ApptPhysician, ApptVisitType, ApptDept, ApptClinicDate, ApptNotes, ApptICD_Code, ApptICD_CodeDescription, ApptHide, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT AppointmentId, ApptPatientId, ApptMRN, ApptTime, ApptLastName, ApptFirstName, ApptBirthDate, ApptPhysician, ApptVisitType, ApptDept, ApptClinicDate, ApptNotes, ApptICD_Code, ApptICD_CodeDescription, ApptHide, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.Appointments WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Appointments OFF
GO
DROP TABLE dbo.Appointments
GO
EXECUTE sp_rename N'dbo.Tmp_Appointments', N'Appointments', 'OBJECT' 
GO
ALTER TABLE dbo.Appointments ADD CONSTRAINT
	PK_Appointments PRIMARY KEY CLUSTERED 
	(
	AppointmentId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_Appointments_ApptPatientId ON dbo.Appointments
	(
	ApptPatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE TRIGGER dbo.trgAuditAppointments_UD
ON dbo.Appointments FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)
IF (@@ROWCOUNT = 0) RETURN 
SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted
SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END
IF @action = 'UPDATE'
   INSERT INTO AuditLog_Appointments
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.AppointmentId = Inserted.AppointmentId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_Appointments
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO
--54ModifyTablePancreasPath.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_PancreasPath
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PathologyId int NULL,
	PathDifferentiation varchar(50) NULL,
	PathExtraParenchymalInv varchar(50) NULL,
	PathVascularInv varchar(50) NULL,
	PathPerineuralInv varchar(50) NULL,
	PathPancreaticMargin varchar(50) NULL,
	PathAnteriorMargin varchar(50) NULL,
	PathPosteriorMargin varchar(50) NULL,
	PathDuodenalMargin varchar(50) NULL,
	PathGastricMargin varchar(50) NULL,
	PathBileDuctMargin varchar(50) NULL,
	PathAnteriorPeritonealInv varchar(50) NULL,
	PathPancreatitis varchar(50) NULL,
	PathFibrosis varchar(50) NULL,
	PathDuodenum varchar(50) NULL,
	PathStomach varchar(50) NULL,
	PathPanIn varchar(50) NULL,
	PathIPMN varchar(50) NULL,
	PathLymphaticInv varchar(50) NULL,
	PathEpitheliumType varchar(50) NULL,
	PathDysplasia varchar(50) NULL,
	PathCarcinoma varchar(50) NULL,
	PathCarcinomaType varchar(50) NULL,
	PathPercCarcinoma varchar(50) NULL,
	PathCarcinomaMaxDim varchar(50) NULL,
	PathNonneoplastic varchar(50) NULL,
	PathAddTissueMargin varchar(50) NULL,
	PathProximalMargin varchar(50) NULL,
	PathDistalMargin varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_PancreasPath)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_PancreasPath (LoggedOperation, LoggedBy, LoggedTime, PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_PancreasPath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_PancreasPath
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_PancreasPath', N'AuditLog_PancreasPath', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PancreasPath
	DROP CONSTRAINT FK_PancreasPath_Pathology
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_PancreasPath
	(
	PathologyId int NOT NULL,
	PathDifferentiation varchar(50) NULL,
	PathExtraParenchymalInv varchar(50) NULL,
	PathVascularInv varchar(50) NULL,
	PathPerineuralInv varchar(50) NULL,
	PathPancreaticMargin varchar(50) NULL,
	PathAnteriorMargin varchar(50) NULL,
	PathPosteriorMargin varchar(50) NULL,
	PathDuodenalMargin varchar(50) NULL,
	PathGastricMargin varchar(50) NULL,
	PathBileDuctMargin varchar(50) NULL,
	PathAnteriorPeritonealInv varchar(50) NULL,
	PathPancreatitis varchar(50) NULL,
	PathFibrosis varchar(50) NULL,
	PathDuodenum varchar(50) NULL,
	PathStomach varchar(50) NULL,
	PathPanIn varchar(50) NULL,
	PathIPMN varchar(50) NULL,
	PathLymphaticInv varchar(50) NULL,
	PathEpitheliumType varchar(50) NULL,
	PathDysplasia varchar(50) NULL,
	PathCarcinoma varchar(50) NULL,
	PathCarcinomaType varchar(50) NULL,
	PathPercCarcinoma varchar(50) NULL,
	PathCarcinomaMaxDim varchar(50) NULL,
	PathNonneoplastic varchar(50) NULL,
	PathAddTissueMargin varchar(50) NULL,
	PathProximalMargin varchar(50) NULL,
	PathDistalMargin varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.PancreasPath)
	 EXEC('INSERT INTO dbo.Tmp_PancreasPath (PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.PancreasPath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.PancreasPath
GO
EXECUTE sp_rename N'dbo.Tmp_PancreasPath', N'PancreasPath', 'OBJECT' 
GO
ALTER TABLE dbo.PancreasPath ADD CONSTRAINT
	PK_PancreasPath PRIMARY KEY CLUSTERED 
	(
	PathologyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.PancreasPath WITH NOCHECK ADD CONSTRAINT
	FK_PancreasPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
CREATE TRIGGER dbo.trgAuditPancreasPath_UD
ON dbo.PancreasPath FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_PancreasPath
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.PathologyId = Inserted.PathologyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_PancreasPath
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO

--55CreateTableDxImagePancreas.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.AuditLog_DxImagePancreas
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	DiagnosticId int NULL,
	ImgCystMaxDim varchar(50) NULL,
	ImgMultiplicity varchar(50) NULL,
	ImgMaxMainDuctDiam varchar(50) NULL,
	ImgMaxUncinateDuctDiam varchar(50) NULL,
	ImgSideBranchMouthSize varchar(50) NULL,
	ImgEnhancingNodules varchar(50) NULL,
	ImgEnhancingNoduleSize varchar(50) NULL,
	ImgPancreaticMass varchar(50) NULL,
	ImgThickEnhancingSepta varchar(50) NULL,
	ImgBorders varchar(50) NULL,
	ImgArterialProximityToLesion varchar(50) NULL,
	ImgVenousProximityToLesion varchar(50) NULL,
	ImgCystMorphology varchar(50) NULL,
	ImgCalcifications varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.DxImagePancreas
	(
	DiagnosticId int NOT NULL,
	ImgCystMaxDim varchar(50) NULL,
	ImgMultiplicity varchar(50) NULL,
	ImgMaxMainDuctDiam varchar(50) NULL,
	ImgMaxUncinateDuctDiam varchar(50) NULL,
	ImgSideBranchMouthSize varchar(50) NULL,
	ImgEnhancingNodules varchar(50) NULL,
	ImgEnhancingNoduleSize varchar(50) NULL,
	ImgPancreaticMass varchar(50) NULL,
	ImgThickEnhancingSepta varchar(50) NULL,
	ImgBorders varchar(50) NULL,
	ImgArterialProximityToLesion varchar(50) NULL,
	ImgVenousProximityToLesion varchar(50) NULL,
	ImgCystMorphology varchar(50) NULL,
	ImgCalcifications varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.DxImagePancreas ADD CONSTRAINT
	PK_DxImagePancreas PRIMARY KEY CLUSTERED 
	(
	DiagnosticId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.DxImagePancreas ADD CONSTRAINT
	FK_DxImagePancreas_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE
GO
COMMIT
GO
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgAuditDxImagePancreas_UD]
ON [dbo].[DxImagePancreas] FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_DxImagePancreas
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.DiagnosticId = Inserted.DiagnosticId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_DxImagePancreas
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
EXEC sp_settriggerorder @triggername=N'[dbo].[trgAuditDxImagePancreas_UD]', @order=N'Last', @stmttype=N'UPDATE'
GO

--56ModifyTableProstateBiopsyCorePath.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_ProstateBiopsyCorePath
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PathologyId int NULL,
	ProstateBiopsyCorePathId int NULL,
	PathCoreSide varchar(50) NULL,
	PathCoreLevel varchar(50) NULL,
	PathCoreLaterality varchar(50) NULL,
	PathCoreZone varchar(50) NULL,
	PathCoreNumCores varchar(50) NULL,
	PathCoreNumTotalCores varchar(50) NULL,
	PathCoreNumFragments varchar(50) NULL,
	PathCoreLength varchar(50) NULL,
	PathCorePercCancer varchar(50) NULL,
	PathCoreMaxCancerLength varchar(50) NULL,
	PathCoreCancerLength varchar(50) NULL,
	PathCorePercHG_Cancer varchar(50) NULL,
	PathCoreHG_Length varchar(50) NULL,
	PathCoreGG1 varchar(50) NULL,
	PathCoreGG2 varchar(50) NULL,
	PathCoreGG3 varchar(50) NULL,
	PathCoreGGS varchar(50) NULL,
	PathCoreResult varchar(50) NULL,
	PathCoreExtension varchar(50) NULL,
	PathCoreProstatitis varchar(50) NULL,
	PathCorePerineuralInv varchar(50) NULL,
	PathCorePNI_Diam varchar(50) NULL,
	PathCoreHG_PIN varchar(50) NULL,
	PathCoreType varchar(50) NULL,
	PathCoreCapsule varchar(50) NULL,
	PathCoreFat varchar(50) NULL,
	PathCoreASAP varchar(50) NULL,
	PathCoreAtrophy varchar(50) NULL,
	PathCoreStroma varchar(50) NULL,
	PathCoreNotes varchar(1000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_ProstateBiopsyCorePath)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_ProstateBiopsyCorePath (LoggedOperation, LoggedBy, LoggedTime, PathologyId, ProstateBiopsyCorePathId, PathCoreSide, PathCoreLevel, PathCoreLaterality, PathCoreZone, PathCoreNumCores, PathCoreNumFragments, PathCoreLength, PathCorePercCancer, PathCoreMaxCancerLength, PathCoreCancerLength, PathCorePercHG_Cancer, PathCoreHG_Length, PathCoreGG1, PathCoreGG2, PathCoreGG3, PathCoreGGS, PathCoreResult, PathCoreExtension, PathCoreProstatitis, PathCorePerineuralInv, PathCorePNI_Diam, PathCoreHG_PIN, PathCoreType, PathCoreCapsule, PathCoreFat, PathCoreASAP, PathCoreAtrophy, PathCoreStroma, PathCoreNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PathologyId, ProstateBiopsyCorePathId, PathCoreSide, PathCoreLevel, PathCoreLaterality, PathCoreZone, PathCoreNumCores, PathCoreNumFragments, PathCoreLength, PathCorePercCancer, PathCoreMaxCancerLength, PathCoreCancerLength, PathCorePercHG_Cancer, PathCoreHG_Length, PathCoreGG1, PathCoreGG2, PathCoreGG3, PathCoreGGS, PathCoreResult, PathCoreExtension, PathCoreProstatitis, PathCorePerineuralInv, PathCorePNI_Diam, PathCoreHG_PIN, PathCoreType, PathCoreCapsule, PathCoreFat, PathCoreASAP, PathCoreAtrophy, PathCoreStroma, PathCoreNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_ProstateBiopsyCorePath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_ProstateBiopsyCorePath
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_ProstateBiopsyCorePath', N'AuditLog_ProstateBiopsyCorePath', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProstateBiopsyCorePath
	DROP CONSTRAINT FK_ProstateBiopsyCorePath_Pathology
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_ProstateBiopsyCorePath
	(
	PathologyId int NOT NULL,
	ProstateBiopsyCorePathId int NOT NULL IDENTITY (1, 1),
	PathCoreSide varchar(50) NULL,
	PathCoreLevel varchar(50) NULL,
	PathCoreLaterality varchar(50) NULL,
	PathCoreZone varchar(50) NULL,
	PathCoreNumCores varchar(50) NULL,
	PathCoreNumTotalCores varchar(50) NULL,
	PathCoreNumFragments varchar(50) NULL,
	PathCoreLength varchar(50) NULL,
	PathCorePercCancer varchar(50) NULL,
	PathCoreMaxCancerLength varchar(50) NULL,
	PathCoreCancerLength varchar(50) NULL,
	PathCorePercHG_Cancer varchar(50) NULL,
	PathCoreHG_Length varchar(50) NULL,
	PathCoreGG1 varchar(50) NULL,
	PathCoreGG2 varchar(50) NULL,
	PathCoreGG3 varchar(50) NULL,
	PathCoreGGS varchar(50) NULL,
	PathCoreResult varchar(50) NULL,
	PathCoreExtension varchar(50) NULL,
	PathCoreProstatitis varchar(50) NULL,
	PathCorePerineuralInv varchar(50) NULL,
	PathCorePNI_Diam varchar(50) NULL,
	PathCoreHG_PIN varchar(50) NULL,
	PathCoreType varchar(50) NULL,
	PathCoreCapsule varchar(50) NULL,
	PathCoreFat varchar(50) NULL,
	PathCoreASAP varchar(50) NULL,
	PathCoreAtrophy varchar(50) NULL,
	PathCoreStroma varchar(50) NULL,
	PathCoreNotes varchar(1000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
SET IDENTITY_INSERT dbo.Tmp_ProstateBiopsyCorePath ON
GO
IF EXISTS(SELECT * FROM dbo.ProstateBiopsyCorePath)
	 EXEC('INSERT INTO dbo.Tmp_ProstateBiopsyCorePath (PathologyId, ProstateBiopsyCorePathId, PathCoreSide, PathCoreLevel, PathCoreLaterality, PathCoreZone, PathCoreNumCores, PathCoreNumFragments, PathCoreLength, PathCorePercCancer, PathCoreMaxCancerLength, PathCoreCancerLength, PathCorePercHG_Cancer, PathCoreHG_Length, PathCoreGG1, PathCoreGG2, PathCoreGG3, PathCoreGGS, PathCoreResult, PathCoreExtension, PathCoreProstatitis, PathCorePerineuralInv, PathCorePNI_Diam, PathCoreHG_PIN, PathCoreType, PathCoreCapsule, PathCoreFat, PathCoreASAP, PathCoreAtrophy, PathCoreStroma, PathCoreNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT PathologyId, ProstateBiopsyCorePathId, PathCoreSide, PathCoreLevel, PathCoreLaterality, PathCoreZone, PathCoreNumCores, PathCoreNumFragments, PathCoreLength, PathCorePercCancer, PathCoreMaxCancerLength, PathCoreCancerLength, PathCorePercHG_Cancer, PathCoreHG_Length, PathCoreGG1, PathCoreGG2, PathCoreGG3, PathCoreGGS, PathCoreResult, PathCoreExtension, PathCoreProstatitis, PathCorePerineuralInv, PathCorePNI_Diam, PathCoreHG_PIN, PathCoreType, PathCoreCapsule, PathCoreFat, PathCoreASAP, PathCoreAtrophy, PathCoreStroma, PathCoreNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.ProstateBiopsyCorePath WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_ProstateBiopsyCorePath OFF
GO
DROP TABLE dbo.ProstateBiopsyCorePath
GO
EXECUTE sp_rename N'dbo.Tmp_ProstateBiopsyCorePath', N'ProstateBiopsyCorePath', 'OBJECT' 
GO
ALTER TABLE dbo.ProstateBiopsyCorePath ADD CONSTRAINT
	PK_ProstateBiopsyCorePath PRIMARY KEY CLUSTERED 
	(
	ProstateBiopsyCorePathId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.ProstateBiopsyCorePath WITH NOCHECK ADD CONSTRAINT
	FK_ProstateBiopsyCorePath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditProstateBiopsyCorePath_UD
ON dbo.ProstateBiopsyCorePath FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_ProstateBiopsyCorePath
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProstateBiopsyCorePathId = Inserted.ProstateBiopsyCorePathId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_ProstateBiopsyCorePath
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO

--57CreateTableMIS_Proc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.AuditLog_MIS_Proc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
	ProcIntent varchar(50) NULL,
	ProcInstrumentUsed varchar(50) NULL,
	ProcNumPorts varchar(50) NULL,
	ProcConversionReason varchar(255) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.MIS_Proc
	(
	ProcedureId int NOT NULL,
	ProcIntent varchar(50) NULL,
	ProcInstrumentUsed varchar(50) NULL,
	ProcNumPorts varchar(50) NULL,
	ProcConversionReason varchar(255) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.MIS_Proc ADD CONSTRAINT
	PK_MIS_Proc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.MIS_Proc ADD CONSTRAINT
	FK_MIS_Proc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
GO
COMMIT
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgAuditMIS_Proc_UD]
ON [dbo].[MIS_Proc] FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_MIS_Proc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_MIS_Proc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
EXEC sp_settriggerorder @triggername=N'[dbo].[trgAuditMIS_Proc_UD]', @order=N'Last', @stmttype=N'UPDATE'
GO

--58ModifyTableOperatingRoomDetails.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_OperatingRoomDetails
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PatientId int NULL,
	OperatingRoomDetailId int NULL,
	OpLogNum varchar(50) NULL,
	OpPending bit NULL,
	OpDateText varchar(50) NULL,
	OpDate datetime NULL,
	OpInstitution varchar(50) NULL,
	OpService varchar(50) NULL,
	OpAdmitDateText varchar(50) NULL,
	OpAdmitDate datetime NULL,
	OpDischargeDateText varchar(50) NULL,
	OpDischargeDate datetime NULL,
	OpCaseSurgeon varchar(50) NULL,
	OpDuration varchar(50) NULL,
	OpAnesthesiaDuration varchar(50) NULL,
	OpAnesthesiaType varchar(50) NULL,
	OpEstBloodLoss varchar(50) NULL,
	OpAutoAvailable varchar(50) NULL,
	OpAutoTransfused varchar(50) NULL,
	OpAutoIntraOp varchar(50) NULL,
	OpAutoPostOp varchar(50) NULL,
	OpRBC_Available varchar(50) NULL,
	OpRBC_Transfused varchar(50) NULL,
	OpRBC_IntraOp varchar(50) NULL,
	OpRBC_PostOp varchar(50) NULL,
	OpHD_Available varchar(50) NULL,
	OpHD_Transfused varchar(50) NULL,
	OpHD_IntraOp varchar(50) NULL,
	OpHGB_Admit varchar(50) NULL,
	OpHCT_Admit varchar(50) NULL,
	OpHGB_IntraOp varchar(50) NULL,
	OpHCT_IntraOp varchar(50) NULL,
	OpFFP_Available varchar(50) NULL,
	OpFFP_Transfused varchar(50) NULL,
	OpFFP_IntraOp varchar(50) NULL,
	OpFFP_PostOp varchar(50) NULL,
	OpPlateletsAvailable varchar(50) NULL,
	OpPlateletsTransfused varchar(50) NULL,
	OpPlateletsIntraOp varchar(50) NULL,
	OpPlateletsPostOp varchar(50) NULL,
	OpCryoAvailable varchar(50) NULL,
	OpCryoTransfused varchar(50) NULL,
	OpCryoIntraOp varchar(50) NULL,
	OpCryoPostOp varchar(50) NULL,
	OpPreOpAntibiotics varchar(50) NULL,
	OpIntraOpAntibiotics varchar(50) NULL,
	OpPostOpAntibiotics varchar(50) NULL,
	OpNG_Tube varchar(50) NULL,
	OpAnticoagulation varchar(50) NULL,
	OpPneumatics varchar(50) NULL,
	OpICU_PostOp varchar(50) NULL,
	OpPostOpDayFed varchar(50) NULL,
	OpASA varchar(50) NULL,
	OpFluids varchar(50) NULL,
	OpFluidNormosol varchar(50) NULL,
	OpFluidAlbumin varchar(50) NULL,
	OpFluidManitol varchar(50) NULL,
	OpFluidHespan varchar(50) NULL,
	OpColloid varchar(50) NULL,
	OpCrystalloid varchar(50) NULL,
	OpUrineOutput varchar(50) NULL,
	OpDifficulty varchar(50) NULL,
	OpNS_ProbeType varchar(50) NULL,
	OpNS_Notes varchar(1000) NULL,
	OpPresenceStatement varchar(100) NULL,
	OpPresenceKeyPortions varchar(100) NULL,
	OpInTime varchar(50) NULL,
	OpOutTime varchar(50) NULL,
	OpPatientDisposition varchar(50) NULL,
	OpAdmitStatus varchar(50) NULL,
	OpLocation varchar(50) NULL,
	OpIntraopMonitoring varchar(50) NULL,
	OpPreOpSummary varchar(500) NULL,
	OpPostOpSummary varchar(500) NULL,
	OpFoleyCatheter varchar(50) NULL,
	OpStraightCatheter varchar(50) NULL,
	OpNotes varchar(2000) NULL,
	OpDataSource varchar(100) NULL,
	OpQuality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_OperatingRoomDetails SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_OperatingRoomDetails)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_OperatingRoomDetails (LoggedOperation, LoggedBy, LoggedTime, PatientId, OperatingRoomDetailId, OpLogNum, OpPending, OpDateText, OpDate, OpInstitution, OpService, OpAdmitDateText, OpAdmitDate, OpDischargeDateText, OpDischargeDate, OpCaseSurgeon, OpDuration, OpAnesthesiaDuration, OpAnesthesiaType, OpEstBloodLoss, OpAutoAvailable, OpAutoTransfused, OpAutoIntraOp, OpAutoPostOp, OpRBC_Available, OpRBC_Transfused, OpRBC_IntraOp, OpRBC_PostOp, OpHD_Available, OpHD_Transfused, OpHD_IntraOp, OpHGB_Admit, OpHCT_Admit, OpHGB_IntraOp, OpHCT_IntraOp, OpFFP_Available, OpFFP_Transfused, OpFFP_IntraOp, OpFFP_PostOp, OpPlateletsAvailable, OpPlateletsTransfused, OpPlateletsIntraOp, OpPlateletsPostOp, OpCryoAvailable, OpCryoTransfused, OpCryoIntraOp, OpCryoPostOp, OpPreOpAntibiotics, OpIntraOpAntibiotics, OpPostOpAntibiotics, OpNG_Tube, OpAnticoagulation, OpPneumatics, OpICU_PostOp, OpPostOpDayFed, OpASA, OpFluids, OpFluidNormosol, OpFluidAlbumin, OpFluidManitol, OpFluidHespan, OpColloid, OpCrystalloid, OpUrineOutput, OpDifficulty, OpNS_ProbeType, OpNS_Notes, OpPresenceStatement, OpPresenceKeyPortions, OpInTime, OpOutTime, OpPatientDisposition, OpAdmitStatus, OpLocation, OpIntraopMonitoring, OpPreOpSummary, OpPostOpSummary, OpNotes, OpDataSource, OpQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PatientId, OperatingRoomDetailId, OpLogNum, OpPending, OpDateText, OpDate, OpInstitution, OpService, OpAdmitDateText, OpAdmitDate, OpDischargeDateText, OpDischargeDate, OpCaseSurgeon, OpDuration, OpAnesthesiaDuration, OpAnesthesiaType, OpEstBloodLoss, OpAutoAvailable, OpAutoTransfused, OpAutoIntraOp, OpAutoPostOp, OpRBC_Available, OpRBC_Transfused, OpRBC_IntraOp, OpRBC_PostOp, OpHD_Available, OpHD_Transfused, OpHD_IntraOp, OpHGB_Admit, OpHCT_Admit, OpHGB_IntraOp, OpHCT_IntraOp, OpFFP_Available, OpFFP_Transfused, OpFFP_IntraOp, OpFFP_PostOp, OpPlateletsAvailable, OpPlateletsTransfused, OpPlateletsIntraOp, OpPlateletsPostOp, OpCryoAvailable, OpCryoTransfused, OpCryoIntraOp, OpCryoPostOp, OpPreOpAntibiotics, OpIntraOpAntibiotics, OpPostOpAntibiotics, OpNG_Tube, OpAnticoagulation, OpPneumatics, OpICU_PostOp, OpPostOpDayFed, OpASA, OpFluids, OpFluidNormosol, OpFluidAlbumin, OpFluidManitol, OpFluidHespan, OpColloid, OpCrystalloid, OpUrineOutput, OpDifficulty, OpNS_ProbeType, OpNS_Notes, OpPresenceStatement, OpPresenceKeyPortions, OpInTime, OpOutTime, OpPatientDisposition, OpAdmitStatus, OpLocation, OpIntraopMonitoring, OpPreOpSummary, OpPostOpSummary, OpNotes, OpDataSource, OpQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_OperatingRoomDetails WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_OperatingRoomDetails
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_OperatingRoomDetails', N'AuditLog_OperatingRoomDetails', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.OperatingRoomDetails
	DROP CONSTRAINT FK_OperatingRoomDetails_Patients
GO
ALTER TABLE dbo.Patients SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.OperatingRoomDetails
	DROP CONSTRAINT DF_OpDetails_SurgPending
GO
CREATE TABLE dbo.Tmp_OperatingRoomDetails
	(
	PatientId int NOT NULL,
	OperatingRoomDetailId int NOT NULL IDENTITY (1, 1),
	OpLogNum varchar(50) NULL,
	OpPending bit NULL,
	OpDateText varchar(50) NULL,
	OpDate datetime NULL,
	OpInstitution varchar(50) NULL,
	OpService varchar(50) NULL,
	OpAdmitDateText varchar(50) NULL,
	OpAdmitDate datetime NULL,
	OpDischargeDateText varchar(50) NULL,
	OpDischargeDate datetime NULL,
	OpCaseSurgeon varchar(50) NULL,
	OpDuration varchar(50) NULL,
	OpAnesthesiaDuration varchar(50) NULL,
	OpAnesthesiaType varchar(50) NULL,
	OpEstBloodLoss varchar(50) NULL,
	OpAutoAvailable varchar(50) NULL,
	OpAutoTransfused varchar(50) NULL,
	OpAutoIntraOp varchar(50) NULL,
	OpAutoPostOp varchar(50) NULL,
	OpRBC_Available varchar(50) NULL,
	OpRBC_Transfused varchar(50) NULL,
	OpRBC_IntraOp varchar(50) NULL,
	OpRBC_PostOp varchar(50) NULL,
	OpHD_Available varchar(50) NULL,
	OpHD_Transfused varchar(50) NULL,
	OpHD_IntraOp varchar(50) NULL,
	OpHGB_Admit varchar(50) NULL,
	OpHCT_Admit varchar(50) NULL,
	OpHGB_IntraOp varchar(50) NULL,
	OpHCT_IntraOp varchar(50) NULL,
	OpFFP_Available varchar(50) NULL,
	OpFFP_Transfused varchar(50) NULL,
	OpFFP_IntraOp varchar(50) NULL,
	OpFFP_PostOp varchar(50) NULL,
	OpPlateletsAvailable varchar(50) NULL,
	OpPlateletsTransfused varchar(50) NULL,
	OpPlateletsIntraOp varchar(50) NULL,
	OpPlateletsPostOp varchar(50) NULL,
	OpCryoAvailable varchar(50) NULL,
	OpCryoTransfused varchar(50) NULL,
	OpCryoIntraOp varchar(50) NULL,
	OpCryoPostOp varchar(50) NULL,
	OpPreOpAntibiotics varchar(50) NULL,
	OpIntraOpAntibiotics varchar(50) NULL,
	OpPostOpAntibiotics varchar(50) NULL,
	OpNG_Tube varchar(50) NULL,
	OpAnticoagulation varchar(50) NULL,
	OpPneumatics varchar(50) NULL,
	OpICU_PostOp varchar(50) NULL,
	OpPostOpDayFed varchar(50) NULL,
	OpASA varchar(50) NULL,
	OpFluids varchar(50) NULL,
	OpFluidNormosol varchar(50) NULL,
	OpFluidAlbumin varchar(50) NULL,
	OpFluidManitol varchar(50) NULL,
	OpFluidHespan varchar(50) NULL,
	OpColloid varchar(50) NULL,
	OpCrystalloid varchar(50) NULL,
	OpUrineOutput varchar(50) NULL,
	OpDifficulty varchar(50) NULL,
	OpNS_ProbeType varchar(50) NULL,
	OpNS_Notes varchar(1000) NULL,
	OpPresenceStatement varchar(100) NULL,
	OpPresenceKeyPortions varchar(100) NULL,
	OpInTime varchar(50) NULL,
	OpOutTime varchar(50) NULL,
	OpPatientDisposition varchar(50) NULL,
	OpAdmitStatus varchar(50) NULL,
	OpLocation varchar(50) NULL,
	OpIntraopMonitoring varchar(50) NULL,
	OpPreOpSummary varchar(500) NULL,
	OpPostOpSummary varchar(500) NULL,
	OpFoleyCatheter varchar(50) NULL,
	OpStraightCatheter varchar(50) NULL,
	OpNotes varchar(2000) NULL,
	OpDataSource varchar(100) NULL,
	OpQuality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_OperatingRoomDetails SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_OperatingRoomDetails ADD CONSTRAINT
	DF_OpDetails_SurgPending DEFAULT ((0)) FOR OpPending
GO
SET IDENTITY_INSERT dbo.Tmp_OperatingRoomDetails ON
GO
IF EXISTS(SELECT * FROM dbo.OperatingRoomDetails)
	 EXEC('INSERT INTO dbo.Tmp_OperatingRoomDetails (PatientId, OperatingRoomDetailId, OpLogNum, OpPending, OpDateText, OpDate, OpInstitution, OpService, OpAdmitDateText, OpAdmitDate, OpDischargeDateText, OpDischargeDate, OpCaseSurgeon, OpDuration, OpAnesthesiaDuration, OpAnesthesiaType, OpEstBloodLoss, OpAutoAvailable, OpAutoTransfused, OpAutoIntraOp, OpAutoPostOp, OpRBC_Available, OpRBC_Transfused, OpRBC_IntraOp, OpRBC_PostOp, OpHD_Available, OpHD_Transfused, OpHD_IntraOp, OpHGB_Admit, OpHCT_Admit, OpHGB_IntraOp, OpHCT_IntraOp, OpFFP_Available, OpFFP_Transfused, OpFFP_IntraOp, OpFFP_PostOp, OpPlateletsAvailable, OpPlateletsTransfused, OpPlateletsIntraOp, OpPlateletsPostOp, OpCryoAvailable, OpCryoTransfused, OpCryoIntraOp, OpCryoPostOp, OpPreOpAntibiotics, OpIntraOpAntibiotics, OpPostOpAntibiotics, OpNG_Tube, OpAnticoagulation, OpPneumatics, OpICU_PostOp, OpPostOpDayFed, OpASA, OpFluids, OpFluidNormosol, OpFluidAlbumin, OpFluidManitol, OpFluidHespan, OpColloid, OpCrystalloid, OpUrineOutput, OpDifficulty, OpNS_ProbeType, OpNS_Notes, OpPresenceStatement, OpPresenceKeyPortions, OpInTime, OpOutTime, OpPatientDisposition, OpAdmitStatus, OpLocation, OpIntraopMonitoring, OpPreOpSummary, OpPostOpSummary, OpNotes, OpDataSource, OpQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PatientId, OperatingRoomDetailId, OpLogNum, OpPending, OpDateText, OpDate, OpInstitution, OpService, OpAdmitDateText, OpAdmitDate, OpDischargeDateText, OpDischargeDate, OpCaseSurgeon, OpDuration, OpAnesthesiaDuration, OpAnesthesiaType, OpEstBloodLoss, OpAutoAvailable, OpAutoTransfused, OpAutoIntraOp, OpAutoPostOp, OpRBC_Available, OpRBC_Transfused, OpRBC_IntraOp, OpRBC_PostOp, OpHD_Available, OpHD_Transfused, OpHD_IntraOp, OpHGB_Admit, OpHCT_Admit, OpHGB_IntraOp, OpHCT_IntraOp, OpFFP_Available, OpFFP_Transfused, OpFFP_IntraOp, OpFFP_PostOp, OpPlateletsAvailable, OpPlateletsTransfused, OpPlateletsIntraOp, OpPlateletsPostOp, OpCryoAvailable, OpCryoTransfused, OpCryoIntraOp, OpCryoPostOp, OpPreOpAntibiotics, OpIntraOpAntibiotics, OpPostOpAntibiotics, OpNG_Tube, OpAnticoagulation, OpPneumatics, OpICU_PostOp, OpPostOpDayFed, OpASA, OpFluids, OpFluidNormosol, OpFluidAlbumin, OpFluidManitol, OpFluidHespan, OpColloid, OpCrystalloid, OpUrineOutput, OpDifficulty, OpNS_ProbeType, OpNS_Notes, OpPresenceStatement, OpPresenceKeyPortions, OpInTime, OpOutTime, OpPatientDisposition, OpAdmitStatus, OpLocation, OpIntraopMonitoring, OpPreOpSummary, OpPostOpSummary, OpNotes, OpDataSource, OpQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.OperatingRoomDetails WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_OperatingRoomDetails OFF
GO
ALTER TABLE dbo.PhysicianBilling
	DROP CONSTRAINT FK_PhysicianBilling_OperatingRoomDetails
GO
DROP TABLE dbo.OperatingRoomDetails
GO
EXECUTE sp_rename N'dbo.Tmp_OperatingRoomDetails', N'OperatingRoomDetails', 'OBJECT' 
GO
ALTER TABLE dbo.OperatingRoomDetails ADD CONSTRAINT
	PK_OperatingRoomDetails PRIMARY KEY CLUSTERED 
	(
	OperatingRoomDetailId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_OperatingRoomDetails_PatientId ON dbo.OperatingRoomDetails
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.OperatingRoomDetails WITH NOCHECK ADD CONSTRAINT
	FK_OperatingRoomDetails_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
CREATE TRIGGER dbo.trgAuditOperatingRoomDetails_UD
ON dbo.OperatingRoomDetails FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_OperatingRoomDetails
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.OperatingRoomDetailId = Inserted.OperatingRoomDetailId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_OperatingRoomDetails
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PhysicianBilling WITH NOCHECK ADD CONSTRAINT
	FK_PhysicianBilling_OperatingRoomDetails FOREIGN KEY
	(
	OperatingRoomDetailId
	) REFERENCES dbo.OperatingRoomDetails
	(
	OperatingRoomDetailId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
ALTER TABLE dbo.PhysicianBilling SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO

--59ModifyTableNephrectomyPath.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_NephrectomyPath
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PathologyId int NULL,
	PathExtension varchar(50) NULL,
	PathMargin varchar(50) NULL,
	PathAdrenalInv varchar(50) NULL,
	PathAdrenalSide varchar(50) NULL,
	PathMultifocal varchar(50) NULL,
	PathNuclearGrade varchar(50) NULL,
	PathPattern varchar(50) NULL,
	PathCancerMaxDim varchar(50) NULL,
	PathOtherKidney varchar(255) NULL,
	PathAngiolymphaticInv varchar(50) NULL,
	PathRenalSinusFatInv varchar(50) NULL,
	PathMarginClearance varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_NephrectomyPath SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_NephrectomyPath)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_NephrectomyPath (LoggedOperation, LoggedBy, LoggedTime, PathologyId, PathExtension, PathMargin, PathAdrenalInv, PathAdrenalSide, PathMultifocal, PathNuclearGrade, PathPattern, PathCancerMaxDim, PathOtherKidney, PathAngiolymphaticInv, PathRenalSinusFatInv, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PathologyId, PathExtension, PathMargin, PathAdrenalInv, PathAdrenalSide, PathMultifocal, PathNuclearGrade, PathPattern, PathCancerMaxDim, PathOtherKidney, PathAngiolymphaticInv, PathRenalSinusFatInv, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_NephrectomyPath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_NephrectomyPath
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_NephrectomyPath', N'AuditLog_NephrectomyPath', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.NephrectomyPath
	DROP CONSTRAINT FK_NephrectomyPath_Pathology
GO
ALTER TABLE dbo.Pathology SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_NephrectomyPath
	(
	PathologyId int NOT NULL,
	PathExtension varchar(50) NULL,
	PathMargin varchar(50) NULL,
	PathAdrenalInv varchar(50) NULL,
	PathAdrenalSide varchar(50) NULL,
	PathMultifocal varchar(50) NULL,
	PathNuclearGrade varchar(50) NULL,
	PathPattern varchar(50) NULL,
	PathCancerMaxDim varchar(50) NULL,
	PathOtherKidney varchar(255) NULL,
	PathAngiolymphaticInv varchar(50) NULL,
	PathRenalSinusFatInv varchar(50) NULL,
	PathMarginClearance varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_NephrectomyPath SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.NephrectomyPath)
	 EXEC('INSERT INTO dbo.Tmp_NephrectomyPath (PathologyId, PathExtension, PathMargin, PathAdrenalInv, PathAdrenalSide, PathMultifocal, PathNuclearGrade, PathPattern, PathCancerMaxDim, PathOtherKidney, PathAngiolymphaticInv, PathRenalSinusFatInv, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT PathologyId, PathExtension, PathMargin, PathAdrenalInv, PathAdrenalSide, PathMultifocal, PathNuclearGrade, PathPattern, PathCancerMaxDim, PathOtherKidney, PathAngiolymphaticInv, PathRenalSinusFatInv, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.NephrectomyPath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.NephrectomyPath
GO
EXECUTE sp_rename N'dbo.Tmp_NephrectomyPath', N'NephrectomyPath', 'OBJECT' 
GO
ALTER TABLE dbo.NephrectomyPath ADD CONSTRAINT
	PK_NephrectomyPath PRIMARY KEY CLUSTERED 
	(
	PathologyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.NephrectomyPath WITH NOCHECK ADD CONSTRAINT
	FK_NephrectomyPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditNephrectomyPath_UD
ON dbo.NephrectomyPath FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_NephrectomyPath
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.PathologyId = Inserted.PathologyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_NephrectomyPath
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO

--60ModifyTableNephrectomyPathFinding.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_NephrectomyPathFinding
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PathologyId int NULL,
	NephrectomyPathFindingId int NULL,
	PathFindMaxDim varchar(50) NULL,
	PathFindHistology varchar(255) NULL,
	PathFindPole varchar(50) NULL,
	PathFindAP varchar(50) NULL,
	PathFindLaterality varchar(50) NULL,
	PathFindSite varchar(50) NULL,
	PathFindGrade varchar(50) NULL,
	PathFindPattern varchar(50) NULL,
	PathFindSarcomatoid varchar(50) NULL,
	PathFindNecrosis varchar(50) NULL,
	PathFindVascularInv varchar(50) NULL,
	PathFindRV_Inv varchar(50) NULL,
	PathFindIVC_Inv varchar(50) NULL,
	PathFindIVC_WallInv varchar(50) NULL,
	PathFindExtension varchar(50) NULL,
	PathNotes varchar(1000) NULL,
	PathFindRV_InvOtherFindings varchar(255) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_NephrectomyPathFinding SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_NephrectomyPathFinding)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_NephrectomyPathFinding (LoggedOperation, LoggedBy, LoggedTime, PathologyId, NephrectomyPathFindingId, PathFindMaxDim, PathFindHistology, PathFindPole, PathFindAP, PathFindLaterality, PathFindSite, PathFindGrade, PathFindPattern, PathFindSarcomatoid, PathFindNecrosis, PathFindVascularInv, PathFindRV_Inv, PathFindIVC_Inv, PathFindIVC_WallInv, PathFindExtension, PathNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PathologyId, NephrectomyPathFindingId, PathFindMaxDim, PathFindHistology, PathFindPole, PathFindAP, PathFindLaterality, PathFindSite, PathFindGrade, PathFindPattern, PathFindSarcomatoid, PathFindNecrosis, PathFindVascularInv, PathFindRV_Inv, PathFindIVC_Inv, PathFindIVC_WallInv, PathFindExtension, PathNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_NephrectomyPathFinding WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_NephrectomyPathFinding
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_NephrectomyPathFinding', N'AuditLog_NephrectomyPathFinding', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.NephrectomyPathFinding
	DROP CONSTRAINT FK_NephrectomyPathFinding_Pathology
GO
ALTER TABLE dbo.Pathology SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_NephrectomyPathFinding
	(
	PathologyId int NOT NULL,
	NephrectomyPathFindingId int NOT NULL IDENTITY (1, 1),
	PathFindMaxDim varchar(50) NULL,
	PathFindHistology varchar(255) NULL,
	PathFindPole varchar(50) NULL,
	PathFindAP varchar(50) NULL,
	PathFindLaterality varchar(50) NULL,
	PathFindSite varchar(50) NULL,
	PathFindGrade varchar(50) NULL,
	PathFindPattern varchar(50) NULL,
	PathFindSarcomatoid varchar(50) NULL,
	PathFindNecrosis varchar(50) NULL,
	PathFindVascularInv varchar(50) NULL,
	PathFindRV_Inv varchar(50) NULL,
	PathFindIVC_Inv varchar(50) NULL,
	PathFindIVC_WallInv varchar(50) NULL,
	PathFindExtension varchar(50) NULL,
	PathNotes varchar(1000) NULL,
	PathFindRV_InvOtherFindings varchar(255) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_NephrectomyPathFinding SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_NephrectomyPathFinding ON
GO
IF EXISTS(SELECT * FROM dbo.NephrectomyPathFinding)
	 EXEC('INSERT INTO dbo.Tmp_NephrectomyPathFinding (PathologyId, NephrectomyPathFindingId, PathFindMaxDim, PathFindHistology, PathFindPole, PathFindAP, PathFindLaterality, PathFindSite, PathFindGrade, PathFindPattern, PathFindSarcomatoid, PathFindNecrosis, PathFindVascularInv, PathFindRV_Inv, PathFindIVC_Inv, PathFindIVC_WallInv, PathFindExtension, PathNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT PathologyId, NephrectomyPathFindingId, PathFindMaxDim, PathFindHistology, PathFindPole, PathFindAP, PathFindLaterality, PathFindSite, PathFindGrade, PathFindPattern, PathFindSarcomatoid, PathFindNecrosis, PathFindVascularInv, PathFindRV_Inv, PathFindIVC_Inv, PathFindIVC_WallInv, PathFindExtension, PathNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.NephrectomyPathFinding WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_NephrectomyPathFinding OFF
GO
DROP TABLE dbo.NephrectomyPathFinding
GO
EXECUTE sp_rename N'dbo.Tmp_NephrectomyPathFinding', N'NephrectomyPathFinding', 'OBJECT' 
GO
ALTER TABLE dbo.NephrectomyPathFinding ADD CONSTRAINT
	PK_NephrectomyPathFinding PRIMARY KEY CLUSTERED 
	(
	NephrectomyPathFindingId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.NephrectomyPathFinding WITH NOCHECK ADD CONSTRAINT
	FK_NephrectomyPathFinding_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditNephrectomyPathFinding_UD
ON dbo.NephrectomyPathFinding FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_NephrectomyPathFinding
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.NephrectomyPathFindingId = Inserted.NephrectomyPathFindingId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_NephrectomyPathFinding
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO

--61ModifyTablePathology.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_Pathology
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PatientId int NULL,
	OperatingRoomDetailId int NULL,
	ProcedureId int NULL,
	PathologyId int NULL,
	PathDateText varchar(50) NULL,
	PathDate datetime NULL,
	PathInstitution varchar(50) NULL,
	PathLaboratory varchar(50) NULL,
	PathSpecimenType varchar(50) NULL,
	PathSpecimenCollection varchar(50) NULL,
	PathSite varchar(50) NULL,
	PathSubsite varchar(50) NULL,
	PathSide varchar(50) NULL,
	PathNum varchar(50) NULL,
	PathHistology varchar(255) NULL,
	PathHistology2 varchar(255) NULL,
	PathResult varchar(50) NULL,
	Pathologist varchar(50) NULL,
	PathLymphaticInv varchar(50) NULL,
	PathVascularInv varchar(50) NULL,
	PathPerineuralInv varchar(50) NULL,
	PathDisease varchar(50) NULL,
	PathNotes varchar(8000) NULL,
	PathDataSource varchar(100) NULL,
	PathQuality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_Pathology SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_Pathology)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_Pathology (LoggedOperation, LoggedBy, LoggedTime, PatientId, OperatingRoomDetailId, ProcedureId, PathologyId, PathDateText, PathDate, PathInstitution, PathLaboratory, PathSpecimenType, PathSpecimenCollection, PathSite, PathSubsite, PathSide, PathNum, PathHistology, PathHistology2, PathResult, Pathologist, PathLymphaticInv, PathVascularInv, PathPerineuralInv, PathNotes, PathDataSource, PathQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PatientId, OperatingRoomDetailId, ProcedureId, PathologyId, PathDateText, PathDate, PathInstitution, PathLaboratory, PathSpecimenType, PathSpecimenCollection, PathSite, PathSubsite, PathSide, PathNum, PathHistology, PathHistology2, PathResult, Pathologist, PathLymphaticInv, PathVascularInv, PathPerineuralInv, PathNotes, PathDataSource, PathQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_Pathology WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_Pathology
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_Pathology', N'AuditLog_Pathology', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Pathology
	DROP CONSTRAINT FK_Pathology_Patients
GO
ALTER TABLE dbo.Patients SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Pathology
	(
	PatientId int NOT NULL,
	OperatingRoomDetailId int NULL,
	ProcedureId int NULL,
	PathologyId int NOT NULL IDENTITY (1, 1),
	PathDateText varchar(50) NULL,
	PathDate datetime NULL,
	PathInstitution varchar(50) NULL,
	PathLaboratory varchar(50) NULL,
	PathSpecimenType varchar(50) NULL,
	PathSpecimenCollection varchar(50) NULL,
	PathSite varchar(50) NULL,
	PathSubsite varchar(50) NULL,
	PathSide varchar(50) NULL,
	PathNum varchar(50) NULL,
	PathHistology varchar(255) NULL,
	PathHistology2 varchar(255) NULL,
	PathResult varchar(50) NULL,
	Pathologist varchar(50) NULL,
	PathLymphaticInv varchar(50) NULL,
	PathVascularInv varchar(50) NULL,
	PathPerineuralInv varchar(50) NULL,
	PathDisease varchar(50) NULL,
	PathNotes varchar(8000) NULL,
	PathDataSource varchar(100) NULL,
	PathQuality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Pathology SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Pathology ON
GO
IF EXISTS(SELECT * FROM dbo.Pathology)
	 EXEC('INSERT INTO dbo.Tmp_Pathology (PatientId, OperatingRoomDetailId, ProcedureId, PathologyId, PathDateText, PathDate, PathInstitution, PathLaboratory, PathSpecimenType, PathSpecimenCollection, PathSite, PathSubsite, PathSide, PathNum, PathHistology, PathHistology2, PathResult, Pathologist, PathLymphaticInv, PathVascularInv, PathPerineuralInv, PathNotes, PathDataSource, PathQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PatientId, OperatingRoomDetailId, ProcedureId, PathologyId, PathDateText, PathDate, PathInstitution, PathLaboratory, PathSpecimenType, PathSpecimenCollection, PathSite, PathSubsite, PathSide, PathNum, PathHistology, PathHistology2, PathResult, Pathologist, PathLymphaticInv, PathVascularInv, PathPerineuralInv, PathNotes, PathDataSource, PathQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.Pathology WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Pathology OFF
GO
ALTER TABLE dbo.CystectomyPath
	DROP CONSTRAINT FK_CystectomyPath_Pathology
GO
ALTER TABLE dbo.ThyroidPath
	DROP CONSTRAINT FK_ThyroidPath_Pathology
GO
ALTER TABLE dbo.ProstatectomyPathFinding
	DROP CONSTRAINT FK_ProstatectomyPathFinding_Pathology
GO
ALTER TABLE dbo.PathologyStageGrade
	DROP CONSTRAINT FK_PathologyStageGrade_Pathology
GO
ALTER TABLE dbo.CystoscopyPathFinding
	DROP CONSTRAINT FK_CystoscopyPathFinding_Pathology
GO
ALTER TABLE dbo.PancreasPath
	DROP CONSTRAINT FK_PancreasPath_Pathology
GO
ALTER TABLE dbo.PathologyFinding
	DROP CONSTRAINT FK_PathologyFinding_Pathology
GO
ALTER TABLE dbo.ProstateBiopsyCorePath
	DROP CONSTRAINT FK_ProstateBiopsyCorePath_Pathology
GO
ALTER TABLE dbo.NodePathFinding
	DROP CONSTRAINT FK_NodePathFinding_Pathology
GO
ALTER TABLE dbo.LiverPath
	DROP CONSTRAINT FK_LiverPath_Pathology
GO
ALTER TABLE dbo.BiopsyPath
	DROP CONSTRAINT FK_BiopsyPath_Pathology
GO
ALTER TABLE dbo.CystectomyPathFinding
	DROP CONSTRAINT FK_CystectomyPathFinding_Pathology
GO
ALTER TABLE dbo.CystoscopyPath
	DROP CONSTRAINT FK_CystoscopyPath_Pathology
GO
ALTER TABLE dbo.HeadNeckPath
	DROP CONSTRAINT FK_HeadNeckPath_Pathology
GO
ALTER TABLE dbo.GastricPath
	DROP CONSTRAINT FK_GastricPath_Pathology
GO
ALTER TABLE dbo.NephrectomyPathFinding
	DROP CONSTRAINT FK_NephrectomyPathFinding_Pathology
GO
ALTER TABLE dbo.OrchiectomyPath
	DROP CONSTRAINT FK_OrchiectomyPath_Pathology
GO
ALTER TABLE dbo.PathTest
	DROP CONSTRAINT FK_PathTest_Pathology
GO
ALTER TABLE dbo.PolypectomyPath
	DROP CONSTRAINT FK_PolypectomyPath_Pathology
GO
ALTER TABLE dbo.ProstatectomyPath
	DROP CONSTRAINT FK_ProstatectomyPath_Pathology
GO
ALTER TABLE dbo.ProstatectomyPathSection
	DROP CONSTRAINT FK_ProstatectomyPathSection_Pathology
GO
ALTER TABLE dbo.ProstateBiopsyPath
	DROP CONSTRAINT FK_ProstateBiopsyPath_Pathology
GO
ALTER TABLE dbo.BreastPathFinding
	DROP CONSTRAINT FK_BreastPathFinding_Pathology
GO
ALTER TABLE dbo.ColorectalPath
	DROP CONSTRAINT FK_ColorectalPath_Pathology
GO
ALTER TABLE dbo.LungPath
	DROP CONSTRAINT FK_LungPath_Pathology
GO
ALTER TABLE dbo.BreastPath
	DROP CONSTRAINT FK_BreastPath_Pathology
GO
ALTER TABLE dbo.ColorectalPathFinding
	DROP CONSTRAINT FK_ColorectalPathFinding_Pathology
GO
ALTER TABLE dbo.NephrectomyPath
	DROP CONSTRAINT FK_NephrectomyPath_Pathology
GO
DROP TABLE dbo.Pathology
GO
EXECUTE sp_rename N'dbo.Tmp_Pathology', N'Pathology', 'OBJECT' 
GO
ALTER TABLE dbo.Pathology ADD CONSTRAINT
	PK_Pathology PRIMARY KEY CLUSTERED 
	(
	PathologyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_Pathology_PatientId ON dbo.Pathology
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.Pathology WITH NOCHECK ADD CONSTRAINT
	FK_Pathology_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
CREATE TRIGGER dbo.trgAuditPathology_UD
ON dbo.Pathology FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_Pathology
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.PathologyId = Inserted.PathologyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_Pathology
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.NephrectomyPath WITH NOCHECK ADD CONSTRAINT
	FK_NephrectomyPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.NephrectomyPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ColorectalPathFinding WITH NOCHECK ADD CONSTRAINT
	FK_ColorectalPathFinding_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
ALTER TABLE dbo.ColorectalPathFinding SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.BreastPath WITH NOCHECK ADD CONSTRAINT
	FK_BreastPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
ALTER TABLE dbo.BreastPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.LungPath WITH NOCHECK ADD CONSTRAINT
	FK_LungPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.LungPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ColorectalPath WITH NOCHECK ADD CONSTRAINT
	FK_ColorectalPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
ALTER TABLE dbo.ColorectalPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.BreastPathFinding WITH NOCHECK ADD CONSTRAINT
	FK_BreastPathFinding_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
ALTER TABLE dbo.BreastPathFinding SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProstateBiopsyPath WITH NOCHECK ADD CONSTRAINT
	FK_ProstateBiopsyPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.ProstateBiopsyPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProstatectomyPathSection WITH NOCHECK ADD CONSTRAINT
	FK_ProstatectomyPathSection_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.ProstatectomyPathSection SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProstatectomyPath WITH NOCHECK ADD CONSTRAINT
	FK_ProstatectomyPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.ProstatectomyPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PolypectomyPath WITH NOCHECK ADD CONSTRAINT
	FK_PolypectomyPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
ALTER TABLE dbo.PolypectomyPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PathTest WITH NOCHECK ADD CONSTRAINT
	FK_PathTest_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
ALTER TABLE dbo.PathTest SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.OrchiectomyPath WITH NOCHECK ADD CONSTRAINT
	FK_OrchiectomyPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.OrchiectomyPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.NephrectomyPathFinding WITH NOCHECK ADD CONSTRAINT
	FK_NephrectomyPathFinding_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.NephrectomyPathFinding SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.GastricPath WITH NOCHECK ADD CONSTRAINT
	FK_GastricPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
ALTER TABLE dbo.GastricPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.HeadNeckPath ADD CONSTRAINT
	FK_HeadNeckPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.HeadNeckPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.CystoscopyPath WITH NOCHECK ADD CONSTRAINT
	FK_CystoscopyPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.CystoscopyPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.CystectomyPathFinding WITH NOCHECK ADD CONSTRAINT
	FK_CystectomyPathFinding_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.CystectomyPathFinding SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.BiopsyPath WITH NOCHECK ADD CONSTRAINT
	FK_BiopsyPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.BiopsyPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.LiverPath WITH NOCHECK ADD CONSTRAINT
	FK_LiverPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.LiverPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.NodePathFinding WITH NOCHECK ADD CONSTRAINT
	FK_NodePathFinding_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.NodePathFinding SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProstateBiopsyCorePath WITH NOCHECK ADD CONSTRAINT
	FK_ProstateBiopsyCorePath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.ProstateBiopsyCorePath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PathologyFinding WITH NOCHECK ADD CONSTRAINT
	FK_PathologyFinding_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.PathologyFinding SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PancreasPath WITH NOCHECK ADD CONSTRAINT
	FK_PancreasPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
ALTER TABLE dbo.PancreasPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.CystoscopyPathFinding WITH NOCHECK ADD CONSTRAINT
	FK_CystoscopyPathFinding_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.CystoscopyPathFinding SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PathologyStageGrade WITH NOCHECK ADD CONSTRAINT
	FK_PathologyStageGrade_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.PathologyStageGrade SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProstatectomyPathFinding WITH NOCHECK ADD CONSTRAINT
	FK_ProstatectomyPathFinding_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.ProstatectomyPathFinding SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ThyroidPath WITH NOCHECK ADD CONSTRAINT
	FK_ThyroidPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
ALTER TABLE dbo.ThyroidPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.CystectomyPath WITH NOCHECK ADD CONSTRAINT
	FK_CystectomyPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.CystectomyPath SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO

--62ModifyTableSpecimenAccessions.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_SpecimenAccessions
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	SpecimenAccessionId int NULL,
	PatientId int NULL,
	PathologyReferenceNumber varchar(50) NULL,
	AccessionProcName varchar(50) NULL,
	AccessionDateText varchar(20) NULL,
	AccessionDate datetime NULL,
	AccessionInstitution varchar(50) NULL,
	AccessionDepartment varchar(50) NULL,
	AccessionTime varchar(10) NULL,
	PathologyLab varchar(50) NULL,
	DateBanked datetime NULL,
	TimeReceivedInLab varchar(10) NULL,
	TimeFrozen varchar(10) NULL,
	HoldingCondition varchar(20) NULL,
	NumberTubesEDTA varchar(10) NULL,
	NumberTubesClotted varchar(10) NULL,
	NumberTubesGel varchar(10) NULL,
	NumberTubesOther varchar(10) NULL,
	NumberTubesOtherType varchar(10) NULL,
	AccessionAnatomicSite varchar(50) NULL,
	AccessionVisitType varchar(50) NULL,
	AccessionProcInstrument varchar(50) NULL,
	AccessionNotes varchar(1000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_SpecimenAccessions SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_SpecimenAccessions)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_SpecimenAccessions (LoggedOperation, LoggedBy, LoggedTime, SpecimenAccessionId, PatientId, PathologyReferenceNumber, AccessionProcName, AccessionDateText, AccessionDate, AccessionInstitution, AccessionDepartment, AccessionTime, PathologyLab, DateBanked, TimeReceivedInLab, TimeFrozen, HoldingCondition, NumberTubesEDTA, NumberTubesClotted, NumberTubesGel, NumberTubesOther, NumberTubesOtherType, AccessionAnatomicSite, AccessionVisitType, AccessionNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, SpecimenAccessionId, PatientId, PathologyReferenceNumber, AccessionProcName, AccessionDateText, AccessionDate, AccessionInstitution, AccessionDepartment, AccessionTime, PathologyLab, DateBanked, TimeReceivedInLab, TimeFrozen, HoldingCondition, NumberTubesEDTA, NumberTubesClotted, NumberTubesGel, NumberTubesOther, NumberTubesOtherType, AccessionAnatomicSite, AccessionVisitType, AccessionNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_SpecimenAccessions WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_SpecimenAccessions
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_SpecimenAccessions', N'AuditLog_SpecimenAccessions', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_SpecimenAccessions
	(
	SpecimenAccessionId int NOT NULL IDENTITY (1, 1),
	PatientId int NULL,
	PathologyReferenceNumber varchar(50) NULL,
	AccessionProcName varchar(50) NULL,
	AccessionDateText varchar(20) NULL,
	AccessionDate datetime NULL,
	AccessionInstitution varchar(50) NULL,
	AccessionDepartment varchar(50) NULL,
	AccessionTime varchar(10) NULL,
	PathologyLab varchar(50) NULL,
	DateBanked datetime NULL,
	TimeReceivedInLab varchar(10) NULL,
	TimeFrozen varchar(10) NULL,
	HoldingCondition varchar(20) NULL,
	NumberTubesEDTA varchar(10) NULL,
	NumberTubesClotted varchar(10) NULL,
	NumberTubesGel varchar(10) NULL,
	NumberTubesOther varchar(10) NULL,
	NumberTubesOtherType varchar(10) NULL,
	AccessionAnatomicSite varchar(50) NULL,
	AccessionVisitType varchar(50) NULL,
	AccessionProcInstrument varchar(50) NULL,
	AccessionNotes varchar(1000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_SpecimenAccessions SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_SpecimenAccessions ON
GO
IF EXISTS(SELECT * FROM dbo.SpecimenAccessions)
	 EXEC('INSERT INTO dbo.Tmp_SpecimenAccessions (SpecimenAccessionId, PatientId, PathologyReferenceNumber, AccessionProcName, AccessionDateText, AccessionDate, AccessionInstitution, AccessionDepartment, AccessionTime, PathologyLab, DateBanked, TimeReceivedInLab, TimeFrozen, HoldingCondition, NumberTubesEDTA, NumberTubesClotted, NumberTubesGel, NumberTubesOther, NumberTubesOtherType, AccessionAnatomicSite, AccessionVisitType, AccessionNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT SpecimenAccessionId, PatientId, PathologyReferenceNumber, AccessionProcName, AccessionDateText, AccessionDate, AccessionInstitution, AccessionDepartment, AccessionTime, PathologyLab, DateBanked, TimeReceivedInLab, TimeFrozen, HoldingCondition, NumberTubesEDTA, NumberTubesClotted, NumberTubesGel, NumberTubesOther, NumberTubesOtherType, AccessionAnatomicSite, AccessionVisitType, AccessionNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.SpecimenAccessions WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_SpecimenAccessions OFF
GO
ALTER TABLE dbo.Specimens
	DROP CONSTRAINT FK_Specimens_SpecimenAccessions
GO
DROP TABLE dbo.SpecimenAccessions
GO
EXECUTE sp_rename N'dbo.Tmp_SpecimenAccessions', N'SpecimenAccessions', 'OBJECT' 
GO
ALTER TABLE dbo.SpecimenAccessions ADD CONSTRAINT
	PK_SpecimenAccessions PRIMARY KEY CLUSTERED 
	(
	SpecimenAccessionId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_SpecimenAccessions_PatientId ON dbo.SpecimenAccessions
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE TRIGGER dbo.trgAuditSpecimenAccessions_UD
ON dbo.SpecimenAccessions FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_SpecimenAccessions
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.SpecimenAccessionId = Inserted.SpecimenAccessionId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_SpecimenAccessions
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Specimens WITH NOCHECK ADD CONSTRAINT
	FK_Specimens_SpecimenAccessions FOREIGN KEY
	(
	SpecimenAccessionId
	) REFERENCES dbo.SpecimenAccessions
	(
	SpecimenAccessionId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Specimens SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO

--63ModifyTableCystoscopyPath.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_CystoscopyPath
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PathologyId int NULL,
	PathMorphology varchar(50) NULL,
	PathCarcinomaInSitu varchar(50) NULL,
	PathPattern varchar(50) NULL,
	PathExtension varchar(50) NULL,
	PathVascularInv varchar(50) NULL,
	PathMucosaInv varchar(50) NULL,
	PathUrethra varchar(50) NULL,
	PathMusclePresentStatement varchar(255) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_CystoscopyPath SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_CystoscopyPath)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_CystoscopyPath (LoggedOperation, LoggedBy, LoggedTime, PathologyId, PathMorphology, PathCarcinomaInSitu, PathPattern, PathExtension, PathVascularInv, PathMucosaInv, PathUrethra, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PathologyId, PathMorphology, PathCarcinomaInSitu, PathPattern, PathExtension, PathVascularInv, PathMucosaInv, PathUrethra, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_CystoscopyPath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_CystoscopyPath
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_CystoscopyPath', N'AuditLog_CystoscopyPath', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.CystoscopyPath
	DROP CONSTRAINT FK_CystoscopyPath_Pathology
GO
ALTER TABLE dbo.Pathology SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_CystoscopyPath
	(
	PathologyId int NOT NULL,
	PathMorphology varchar(50) NULL,
	PathCarcinomaInSitu varchar(50) NULL,
	PathPattern varchar(50) NULL,
	PathExtension varchar(50) NULL,
	PathVascularInv varchar(50) NULL,
	PathMucosaInv varchar(50) NULL,
	PathUrethra varchar(50) NULL,
	PathMusclePresentStatement varchar(255) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_CystoscopyPath SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.CystoscopyPath)
	 EXEC('INSERT INTO dbo.Tmp_CystoscopyPath (PathologyId, PathMorphology, PathCarcinomaInSitu, PathPattern, PathExtension, PathVascularInv, PathMucosaInv, PathUrethra, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT PathologyId, PathMorphology, PathCarcinomaInSitu, PathPattern, PathExtension, PathVascularInv, PathMucosaInv, PathUrethra, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.CystoscopyPath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.CystoscopyPath
GO
EXECUTE sp_rename N'dbo.Tmp_CystoscopyPath', N'CystoscopyPath', 'OBJECT' 
GO
ALTER TABLE dbo.CystoscopyPath ADD CONSTRAINT
	PK_CystoscopyPath PRIMARY KEY CLUSTERED 
	(
	PathologyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.CystoscopyPath WITH NOCHECK ADD CONSTRAINT
	FK_CystoscopyPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditCystoscopyPath_UD
ON dbo.CystoscopyPath FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_CystoscopyPath
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.PathologyId = Inserted.PathologyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_CystoscopyPath
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO

--64ModifyTableProcedureFinding.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_ProcedureFinding
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
	ProcedureFindingId int NULL,
	ProcFinding varchar(50) NULL,
	ProcFindSide varchar(50) NULL,
	ProcFindSite varchar(50) NULL,
	ProcFindSubsite varchar(50) NULL,
	ProcFindDissection varchar(50) NULL,
	ProcFindPrimaryDimension varchar(50) NULL,
	ProcFindSecondaryDimension varchar(50) NULL,
	ProcFindTertiaryDimension varchar(50) NULL,
	ProcFindExtension varchar(50) NULL,
	ProcFindEncapsulation varchar(50) NULL,
	ProcFindDiseaseExtent varchar(50) NULL,
	ProcFindStatus varchar(50) NULL,
	ProcFindFrozen varchar(50) NULL,
	ProcFindMorphology varchar(50) NULL,
	ProcFindHistology varchar(255) NULL,
	ProcFindNotes varchar(1000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_ProcedureFinding SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_ProcedureFinding)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_ProcedureFinding (LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcedureFindingId, ProcFinding, ProcFindSide, ProcFindSite, ProcFindSubsite, ProcFindDissection, ProcFindPrimaryDimension, ProcFindSecondaryDimension, ProcFindTertiaryDimension, ProcFindExtension, ProcFindEncapsulation, ProcFindDiseaseExtent, ProcFindStatus, ProcFindFrozen, ProcFindMorphology, ProcFindNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcedureFindingId, ProcFinding, ProcFindSide, ProcFindSite, ProcFindSubsite, ProcFindDissection, ProcFindPrimaryDimension, ProcFindSecondaryDimension, ProcFindTertiaryDimension, ProcFindExtension, ProcFindEncapsulation, ProcFindDiseaseExtent, ProcFindStatus, ProcFindFrozen, ProcFindMorphology, ProcFindNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_ProcedureFinding WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_ProcedureFinding
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_ProcedureFinding', N'AuditLog_ProcedureFinding', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProcedureFinding
	DROP CONSTRAINT FK_ProcedureFinding_Procedures
GO
ALTER TABLE dbo.Procedures SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_ProcedureFinding
	(
	ProcedureId int NOT NULL,
	ProcedureFindingId int NOT NULL IDENTITY (1, 1),
	ProcFinding varchar(50) NULL,
	ProcFindSide varchar(50) NULL,
	ProcFindSite varchar(50) NULL,
	ProcFindSubsite varchar(50) NULL,
	ProcFindDissection varchar(50) NULL,
	ProcFindPrimaryDimension varchar(50) NULL,
	ProcFindSecondaryDimension varchar(50) NULL,
	ProcFindTertiaryDimension varchar(50) NULL,
	ProcFindExtension varchar(50) NULL,
	ProcFindEncapsulation varchar(50) NULL,
	ProcFindDiseaseExtent varchar(50) NULL,
	ProcFindStatus varchar(50) NULL,
	ProcFindFrozen varchar(50) NULL,
	ProcFindMorphology varchar(50) NULL,
	ProcFindHistology varchar(255) NULL,
	ProcFindNotes varchar(1000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_ProcedureFinding SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_ProcedureFinding ON
GO
IF EXISTS(SELECT * FROM dbo.ProcedureFinding)
	 EXEC('INSERT INTO dbo.Tmp_ProcedureFinding (ProcedureId, ProcedureFindingId, ProcFinding, ProcFindSide, ProcFindSite, ProcFindSubsite, ProcFindDissection, ProcFindPrimaryDimension, ProcFindSecondaryDimension, ProcFindTertiaryDimension, ProcFindExtension, ProcFindEncapsulation, ProcFindDiseaseExtent, ProcFindStatus, ProcFindFrozen, ProcFindMorphology, ProcFindNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT ProcedureId, ProcedureFindingId, ProcFinding, ProcFindSide, ProcFindSite, ProcFindSubsite, ProcFindDissection, ProcFindPrimaryDimension, ProcFindSecondaryDimension, ProcFindTertiaryDimension, ProcFindExtension, ProcFindEncapsulation, ProcFindDiseaseExtent, ProcFindStatus, ProcFindFrozen, ProcFindMorphology, ProcFindNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.ProcedureFinding WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_ProcedureFinding OFF
GO
DROP TABLE dbo.ProcedureFinding
GO
EXECUTE sp_rename N'dbo.Tmp_ProcedureFinding', N'ProcedureFinding', 'OBJECT' 
GO
ALTER TABLE dbo.ProcedureFinding ADD CONSTRAINT
	PK_ProcedureFinding PRIMARY KEY CLUSTERED 
	(
	ProcedureFindingId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.ProcedureFinding WITH NOCHECK ADD CONSTRAINT
	FK_ProcedureFinding_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditProcedureFinding_UD
ON dbo.ProcedureFinding FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_ProcedureFinding
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureFindingId = Inserted.ProcedureFindingId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_ProcedureFinding
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditProcedureFinding_UD', N'last', N'update'
GO
COMMIT
GO

--65ModifyTableGynGI_UpperAbdominalProc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_GynGI_UpperAbdominalProc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
	ProcAirLeakTest varchar(50) NULL,
	ProcSmallBowelAnastChecked varchar(255) NULL,
	ProcHemicolectomyAnastMethod varchar(50) NULL,
	ProcHemicolectomyAnastType varchar(50) NULL,
	ProcMesentericDefect varchar(50) NULL,
	ProcLAR_Details varchar(1000) NULL,
	ProcLenSmallBowelRemaining varchar(50) NULL,
	ProcL_ColonManeuverAnast varchar(255) NULL,
	ProcMaxSizeDiaphragmRemoved varchar(50) NULL,
	ProcMethodOfAnast varchar(50) NULL,
	ProcL_PositivePressureBubbleResult varchar(50) NULL,
	ProcR_PositivePressureBubbleResult varchar(50) NULL,
	ProcProximalIntestinalTransection varchar(50) NULL,
	ProcReconType varchar(50) NULL,
	ProcAirLeakTestResult varchar(50) NULL,
	ProcStaplerSize varchar(50) NULL,
	ProcChestTubeSize varchar(50) NULL,
	ProcStaplerType varchar(50) NULL,
	ProcL_DiaphragmResectionExtent varchar(50) NULL,
	ProcR_DiaphragmResectionExtent varchar(50) NULL,
	ProcR_DiaphragmSutureType varchar(50) NULL,
	ProcL_DiaphragmSutureType varchar(50) NULL,
	ProcDiaphragmClosedMeshRight varchar(50) NULL,
	ProcDiaphragmClosedMeshLeft varchar(50) NULL,
	ProcProximalIntestinalTtransection varchar(50) NULL,
	ProcLocAnastAnalVerge varchar(50) NULL,
	ProcSatisfactoryAnast varchar(255) NULL,
	ProcLenFirstResectSmallBowel varchar(50) NULL,
	ProcLenSecondResectSmallBowel varchar(50) NULL,
	ProcStomachWallClosure varchar(50) NULL,
	ProcStomClosureMethod varchar(50) NULL,
	ProcStomaDiversionType varchar(50) NULL,
	ProcRemnantClosure varchar(50) NULL,
	ProcBypassPerformed varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_GynGI_UpperAbdominalProc SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_GynGI_UpperAbdominalProc)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_GynGI_UpperAbdominalProc (LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcAirLeakTest, ProcSmallBowelAnastChecked, ProcHemicolectomyAnastMethod, ProcHemicolectomyAnastType, ProcMesentericDefect, ProcLAR_Details, ProcLenSmallBowelRemaining, ProcL_ColonManeuverAnast, ProcMaxSizeDiaphragmRemoved, ProcMethodOfAnast, ProcL_PositivePressureBubbleResult, ProcR_PositivePressureBubbleResult, ProcProximalIntestinalTransection, ProcReconType, ProcAirLeakTestResult, ProcStaplerSize, ProcChestTubeSize, ProcStaplerType, ProcL_DiaphragmResectionExtent, ProcR_DiaphragmResectionExtent, ProcR_DiaphragmSutureType, ProcL_DiaphragmSutureType, ProcDiaphragmClosedMeshRight, ProcDiaphragmClosedMeshLeft, ProcProximalIntestinalTtransection, ProcLocAnastAnalVerge, ProcSatisfactoryAnast, ProcLenFirstResectSmallBowel, ProcLenSecondResectSmallBowel, ProcStomachWallClosure, ProcStomClosureMethod, ProcStomaDiversionType, ProcRemnantClosure, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcAirLeakTest, ProcSmallBowelAnastChecked, ProcHemicolectomyAnastMethod, ProcHemicolectomyAnastType, ProcMesentericDefect, ProcLAR_Details, ProcLenSmallBowelRemaining, ProcL_ColonManeuverAnast, ProcMaxSizeDiaphragmRemoved, ProcMethodOfAnast, ProcL_PositivePressureBubbleResult, ProcR_PositivePressureBubbleResult, ProcProximalIntestinalTransection, ProcReconType, ProcAirLeakTestResult, ProcStaplerSize, ProcChestTubeSize, ProcStaplerType, ProcL_DiaphragmResectionExtent, ProcR_DiaphragmResectionExtent, ProcR_DiaphragmSutureType, ProcL_DiaphragmSutureType, ProcDiaphragmClosedMeshRight, ProcDiaphragmClosedMeshLeft, ProcProximalIntestinalTtransection, ProcLocAnastAnalVerge, ProcSatisfactoryAnast, ProcLenFirstResectSmallBowel, ProcLenSecondResectSmallBowel, ProcStomachWallClosure, ProcStomClosureMethod, ProcStomaDiversionType, ProcRemnantClosure, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_GynGI_UpperAbdominalProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_GynGI_UpperAbdominalProc
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_GynGI_UpperAbdominalProc', N'AuditLog_GynGI_UpperAbdominalProc', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.GynGI_UpperAbdominalProc
	DROP CONSTRAINT FK_GynGI_UpperAbdominalProc_Procedures
GO
ALTER TABLE dbo.Procedures SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_GynGI_UpperAbdominalProc
	(
	ProcedureId int NOT NULL,
	ProcAirLeakTest varchar(50) NULL,
	ProcSmallBowelAnastChecked varchar(255) NULL,
	ProcHemicolectomyAnastMethod varchar(50) NULL,
	ProcHemicolectomyAnastType varchar(50) NULL,
	ProcMesentericDefect varchar(50) NULL,
	ProcLAR_Details varchar(1000) NULL,
	ProcLenSmallBowelRemaining varchar(50) NULL,
	ProcL_ColonManeuverAnast varchar(255) NULL,
	ProcMaxSizeDiaphragmRemoved varchar(50) NULL,
	ProcMethodOfAnast varchar(50) NULL,
	ProcL_PositivePressureBubbleResult varchar(50) NULL,
	ProcR_PositivePressureBubbleResult varchar(50) NULL,
	ProcProximalIntestinalTransection varchar(50) NULL,
	ProcReconType varchar(50) NULL,
	ProcAirLeakTestResult varchar(50) NULL,
	ProcStaplerSize varchar(50) NULL,
	ProcChestTubeSize varchar(50) NULL,
	ProcStaplerType varchar(50) NULL,
	ProcL_DiaphragmResectionExtent varchar(50) NULL,
	ProcR_DiaphragmResectionExtent varchar(50) NULL,
	ProcR_DiaphragmSutureType varchar(50) NULL,
	ProcL_DiaphragmSutureType varchar(50) NULL,
	ProcDiaphragmClosedMeshRight varchar(50) NULL,
	ProcDiaphragmClosedMeshLeft varchar(50) NULL,
	ProcProximalIntestinalTtransection varchar(50) NULL,
	ProcLocAnastAnalVerge varchar(50) NULL,
	ProcSatisfactoryAnast varchar(255) NULL,
	ProcLenFirstResectSmallBowel varchar(50) NULL,
	ProcLenSecondResectSmallBowel varchar(50) NULL,
	ProcStomachWallClosure varchar(50) NULL,
	ProcStomClosureMethod varchar(50) NULL,
	ProcStomaDiversionType varchar(50) NULL,
	ProcRemnantClosure varchar(50) NULL,
	ProcBypassPerformed varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_GynGI_UpperAbdominalProc SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.GynGI_UpperAbdominalProc)
	 EXEC('INSERT INTO dbo.Tmp_GynGI_UpperAbdominalProc (ProcedureId, ProcAirLeakTest, ProcSmallBowelAnastChecked, ProcHemicolectomyAnastMethod, ProcHemicolectomyAnastType, ProcMesentericDefect, ProcLAR_Details, ProcLenSmallBowelRemaining, ProcL_ColonManeuverAnast, ProcMaxSizeDiaphragmRemoved, ProcMethodOfAnast, ProcL_PositivePressureBubbleResult, ProcR_PositivePressureBubbleResult, ProcProximalIntestinalTransection, ProcReconType, ProcAirLeakTestResult, ProcStaplerSize, ProcChestTubeSize, ProcStaplerType, ProcL_DiaphragmResectionExtent, ProcR_DiaphragmResectionExtent, ProcR_DiaphragmSutureType, ProcL_DiaphragmSutureType, ProcDiaphragmClosedMeshRight, ProcDiaphragmClosedMeshLeft, ProcProximalIntestinalTtransection, ProcLocAnastAnalVerge, ProcSatisfactoryAnast, ProcLenFirstResectSmallBowel, ProcLenSecondResectSmallBowel, ProcStomachWallClosure, ProcStomClosureMethod, ProcStomaDiversionType, ProcRemnantClosure, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT ProcedureId, ProcAirLeakTest, ProcSmallBowelAnastChecked, ProcHemicolectomyAnastMethod, ProcHemicolectomyAnastType, ProcMesentericDefect, ProcLAR_Details, ProcLenSmallBowelRemaining, ProcL_ColonManeuverAnast, ProcMaxSizeDiaphragmRemoved, ProcMethodOfAnast, ProcL_PositivePressureBubbleResult, ProcR_PositivePressureBubbleResult, ProcProximalIntestinalTransection, ProcReconType, ProcAirLeakTestResult, ProcStaplerSize, ProcChestTubeSize, ProcStaplerType, ProcL_DiaphragmResectionExtent, ProcR_DiaphragmResectionExtent, ProcR_DiaphragmSutureType, ProcL_DiaphragmSutureType, ProcDiaphragmClosedMeshRight, ProcDiaphragmClosedMeshLeft, ProcProximalIntestinalTtransection, ProcLocAnastAnalVerge, ProcSatisfactoryAnast, ProcLenFirstResectSmallBowel, ProcLenSecondResectSmallBowel, ProcStomachWallClosure, ProcStomClosureMethod, ProcStomaDiversionType, ProcRemnantClosure, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.GynGI_UpperAbdominalProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.GynGI_UpperAbdominalProc
GO
EXECUTE sp_rename N'dbo.Tmp_GynGI_UpperAbdominalProc', N'GynGI_UpperAbdominalProc', 'OBJECT' 
GO
ALTER TABLE dbo.GynGI_UpperAbdominalProc ADD CONSTRAINT
	PK_GynGI_UpperAbdominalProc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.GynGI_UpperAbdominalProc ADD CONSTRAINT
	FK_GynGI_UpperAbdominalProc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER [dbo].[trgAuditGynGI_UpperAbdominalProc_UD]
ON dbo.GynGI_UpperAbdominalProc FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_GynGI_UpperAbdominalProc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_GynGI_UpperAbdominalProc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditGynGI_UpperAbdominalProc_UD', N'last', N'update'
GO
COMMIT
GO

--66ModifyspGetPatientHPIProstateGU.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spGetPatientHPIProstateGU]
   @PatientId int = NULL,
   @EForm bit = 0,
   @Rowcount int = NULL OUTPUT
AS
SET NOCOUNT ON
--These variables are for debuging / testing speed
DECLARE @starttime datetime
DECLARE @stoptime datetime
Declare @strDebug varchar(8000)
--End of Debug variables

DECLARE @strPatientHPI     varchar(1000)
DECLARE @strDate           varchar(50)
DECLARE @strStopDate       varchar(50)
DECLARE @dteDate           datetime
DECLARE @strVariable       varchar(50)
DECLARE @strValue          varchar(255)
DECLARE @strDataQuality    varchar(50)
DECLARE @strTableName      varchar(50)
DECLARE @strExtraInfo      varchar(50) 
DECLARE @intPrimaryKey     int
DECLARE @i                 int
DECLARE @blnPreTx          bit
DECLARE @blnValidPSA       bit
DECLARE @sngTime           float(24) --VBA single float(53) double
DECLARE @BiopsyDate        datetime
DECLARE @BiopsyDays        float(24) -- number of days after prostate biopsy that PSA is invalid
DECLARE @strOutPut         varchar(1000)

--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'
SET @BiopsyDate = @MISSING_DATE
SET @BiopsyDays = 21

--Clinical states constants (must be ordered)
DECLARE @NO_PROSTATE_CANCER_DIAGNOSIS smallint
DECLARE @LOCALIZED                    smallint
DECLARE @RISING_PSA_NON_CASTRATE      smallint
DECLARE @RISING_PSA_CASTRATE          smallint
DECLARE @NON_CASTRATE_METS            smallint
DECLARE @CASTRATE_METS                smallint
DECLARE @DEAD                         smallint
SET @NO_PROSTATE_CANCER_DIAGNOSIS = 0
SET @LOCALIZED = 1
SET @RISING_PSA_NON_CASTRATE = 2
SET @RISING_PSA_CASTRATE = 3
SET @NON_CASTRATE_METS = 4   
SET @CASTRATE_METS = 5  
SET @DEAD = 6

--This is used to determine castrate clinical states
DECLARE @CASTRATE_TESTOSTERONE_LEVEL smallint
SET @CASTRATE_TESTOSTERONE_LEVEL = 50

DECLARE @ClinStateDate    datetime        --date of last clinical state transition
DECLARE @ClinStateDteText varchar(50)     --datetext of last clinical state transition
DECLARE @ClinState        int             --current clinical state (0 to 5)
DECLARE @Castrate         bit             --castrate levels of testosterone (<50)
DECLARE @DxBiopsyID       int             --primary key for diagnostic biopsy record
DECLARE @DxBxDate         datetime        --date of diagnostic (first positive) biopsy
DECLARE @DxBxDateText     varchar(50)     --datetext of diagnostic (first positive) biopsy
DECLARE @DxBxType         varchar(50)     --diagnostic biopsy type: TURP or needle
DECLARE @DxBxSummary      varchar(255)     --pathologic summary of diagnostic biopsy: eg. 3+4
DECLARE @DxBxQuality      varchar(50)     --data quality for diagnostic biopsy
DECLARE @PreTxPSA         float(24)       --valid PSA before any "curative" treatment (XRT or RP)
DECLARE @PreTxPSADate     datetime 
DECLARE @PreDxBxPSA       varchar(50)     --PSA right before diagnostic biopsy
DECLARE @ClinStageDate	  datetime 
DECLARE @ClinStageSystem  varchar(50)     --UICC TNM staging system used
DECLARE @ClinStageT       varchar(50)     --pre-treatment UICC Tumor Stage
DECLARE @ClinStageN       varchar(50)     --pre-treatment UICC Nodes Stage
DECLARE @ClinStageM       varchar(50)     --pre-treatment UICC Metastatis Stage

DECLARE @ClinStageQuality varchar(50)     --data quality of clinical staging data
DECLARE @NeoAdjHormTx     varchar(50)     --patient has had neo-adjuvant hormone therapy
DECLARE @NeoAdjHormTxDate datetime        --date of first hormone therapy (all PSAs after this are invalid?)
DECLARE @NeoAdjRadTx      varchar(50)     --patient has had neo-adjuvant radiation therapy
DECLARE @NeoAdjRadTxDate  datetime        --date of last neo-adjuvant radiation therapy (all following pre-tx PSAs are invalid)
DECLARE @NeoAdjChemoTx    varchar(50)     --patient has had neo-adjuvant chemotherapy
DECLARE @NeoAdjChemoDate  datetime        --date of last neo-adjuvant chemotherapy
--DECLARE @Prostatectomy    bit           --patient had prostatectomy (means he will always use RP PSA recurrence methods)
DECLARE @TxDate           datetime        --date of first "curative" treatment
DECLARE @TxType           varchar(50)     --curative treatment type
DECLARE @AdjHormTx        varchar(50)
DECLARE @AdjChemoTx       varchar(50)
--DECLARE @NumPSAs          int --number of PSAs after curative treatment
DECLARE @EOD              varchar(50)     --last extent of disease 
DECLARE @LastPSA_Value    varchar(50)
DECLARE @LastPSA_Date     datetime   

DECLARE @HormEvent        varchar(50)
DECLARE @HormTxDate       datetime
DECLARE @MetsEvent        varchar(50)
DECLARE @ChemoTxDate      datetime

--used for eform
DECLARE @strTableNames     varchar(200)
DECLARE @strPrimaryKeys    varchar(50)
DECLARE @strVarDelimited   varchar(500)
DECLARE @strFilters        varchar(200)
DECLARE @strQualities      varchar(200)
DECLARE @ClinStageID       int             --primary key for diagnostic clinical stage record
DECLARE @PreTxPSAID        int             --primary key for pre prostatectomy psa record
DECLARE @PreDxBxPSAID      int             --primary key for pre diagnosis biopsy psa record
DECLARE @PreDxBxPSAQuality varchar(50)     --data quality for pre diagnosis biopsy psa record
DECLARE @ClinStateID       int             --primary key for clin state record
DECLARE @ClinStateTable    varchar(50)     --table name where clin state obtained from
DECLARE @ClinStateQuality  varchar(50)     --data quality of clin state
DECLARE @blnHadRP          bit             --patient had prostatectomy
DECLARE @ProstatePathId    int             --primary key for ProstatectomyPath record
DECLARE @PLNDPathId        int             --primary key for Pathology of the PLND record
DECLARE @NO_PK             varchar(50)     --used to indicate that a table has no data for delimited format
DECLARE @NO_DQ             varchar(50)     --used to indicate that a table has no data quality for delimited format

--used for eform
SET @strTableNames    = ''
SET @strPrimaryKeys   = ''
SET @strVarDelimited  = ''
SET @strQualities = ''
SET @NO_PK = ',NO_PK'
SET @NO_DQ = 'NO_DQ'

SET @ClinStateDate     = @MISSING_DATE
SET @ClinStateDteText  = ''
SET @ClinState         = @NO_PROSTATE_CANCER_DIAGNOSIS
SET @Castrate          = 0
SET @DxBxDate          = @MISSING_DATE
SET @DxBxDateText      = ''
SET @DxBxType          = ''
SET @DxBxSummary       = ''
SET @DxBxQuality       = ''
SET @PreTxPSA          = @MISSING_NUMBER
SET @PreTxPSADate      = @MISSING_DATE
SET @ClinStageDate     = @MISSING_DATE
SET @ClinStageSystem   = ''
SET @ClinStageT        = ''
SET @ClinStageN        = ''
SET @ClinStageM        = ''
SET @ClinStageQuality  = ''
SET @NeoAdjHormTx      = 0
SET @NeoAdjHormTxDate  = @MISSING_DATE
SET @NeoAdjRadTx       = 0
SET @NeoAdjRadTxDate   = @MISSING_DATE
SET @NeoAdjChemoTx     = 0
SET @NeoAdjChemoDate   = @MISSING_DATE
SET @HormTxDate        = @MISSING_DATE
SET @ChemoTxDate       = @MISSING_DATE
--SET @Prostatectomy    = 0
SET @TxDate            = @MISSING_DATE
SET @TxType            = ''
--SET @NumPSAs          = 0
SET @EOD               = ''
SET @LastPSA_Value     = @MISSING_NUMBER
SET @LastPSA_Date      = @MISSING_DATE
SET @MetsEvent         = ''
SET @HormEvent         = ''
SET @PreDxBxPSA        = ''
SET @PreDxBxPSAQuality = ''

DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate              datetime NULL,
   VarString             varchar(500) NULL,
   VarDelimited          varchar(500) NULL,
   TableNames            varchar(200) NULL,
   Qualities             varchar(50) NULL,
   PrimaryKeys           varchar(50) NULL,
   StopDateText          varchar(50) NULL,
   Filters               varchar(200) NULL
   )

DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarValue
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarValue     varchar(255) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   VarStopDate  varchar(50) NULL,
   TableName    varchar(50) NULL,
   PrimaryKey   int NULL,
   VarExtraInfo varchar(110) NULL,
   Filters      varchar(200) NULL,
   VarDelimited varchar(500) NULL,
   TableNames   varchar(200) NULL,
   Qualities    varchar(50) NULL,
   PrimaryKeys  varchar(50) NULL
   )

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ProcName, CAST((dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) + ISNULL(' Other Histology: ' + PathHistology2,'')) as varchar(255)), ISNULL(PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId,ProcSite,
       'ProstateProc',
       '__' + ISNULL(ProcDateText,'') + ISNULL(' ' + ProcName,'') + '|' + '__' + ISNULL(CAST((dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) + ISNULL(' Other Histology: ' + PathHistology2,'')) as varchar(255)),'')  + '|',
       'Procedures,ProstateBiopsyPath', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ), CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(ProstateBiopsyPath.PathologyId as varchar(50)),@NO_PK)
FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN ProstateBiopsyPath ON Pathology.PathologyId=ProstateBiopsyPath.PathologyId
WHERE Procedures.PatientId = @PatientId AND 
      ProcSite='Prostate' AND ProcName IN('TURP','TRUS Biopsy','Biopsy','Needle Biopsy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo)
SELECT ClinStageDateText, ClinStageSystem, ClinStageT, ClinStageQuality, ClinStageDate, 'ClinicalStages', ClinicalStageId,
       ISNULL(ClinStageN,'') + ISNULL(',' + ClinStageM,'')
FROM ClinicalStages
WHERE (ClinicalStages.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT DxDateText, DxType, DxResult, DxQuality, DxDate,  'Diagnostics', DiagnosticId
FROM Diagnostics
WHERE (Diagnostics.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT LabDateText, LabTest, LabResult, LabQuality, LabDate, 'LabTests', LabTestId
FROM LabTests
WHERE (LabTests.PatientId = @PatientId AND LabTest IN ('PSA','TEST') AND LabResult IS NOT NULL)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey,VarExtraInfo,Filters)
SELECT MedTxDateText, MedTxType, MedTxAgent, MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId,ProtocolNum, 'MedTxType_' + MedTxType
FROM MedicalTherapy LEFT OUTER JOIN Protocols ON MedicalTherapy.ProtocolId=Protocols.ProtocolId
WHERE (MedicalTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText,LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy'), ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,''), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId,'TestisProc',
       '__' + ISNULL(ProcDateText,'') +  ' ' + LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy') + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK)       
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId
WHERE Procedures.PatientId = @PatientId AND ProcName = 'Orchiectomy'

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText,'Cystectomy', LTRIM(ISNULL(ProcName,'') + ' ' + ISNULL(RIGHT(PathStageSystem,2),'') + ' ' 
       + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' + ISNULL(PathStageM,'') + ' ' + ISNULL(PathGrade,'') + ' ' + ISNULL(PathResult,'') + ' ' +  ISNULL(PathHistology,'') + ' '
       + CASE WHEN UD_OperatingRoomDetailId IS NULL THEN '' ELSE 'Urinary Diversion:' + UD_ProcName + ' ' END)
       + CASE WHEN Pathology.OperatingRoomDetailId IS NULL THEN '' 
              ELSE ISNULL('Nodes:' + dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)),'')
         END
       , ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId,'BladderProc',
       '__' + ISNULL(ProcDateText,'') + ' ' + LTRIM(ISNULL(ProcName,'')) + '|' + 
       '__' + ISNULL(RIGHT(PathStageSystem,2),'') + ' ' + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' + ISNULL(PathStageM,'') + ' ' + ISNULL(PathGrade,'') + '|' +
       '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,PathologyStageGrade,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathologyStageGrade.PathQuality,','+@NO_DQ) + ISNULL(',' + Pathology.PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + (ISNULL(',' + CAST(PathologyStageGrade.PathologyStageGradeId as varchar(50)),@NO_PK)) + (ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK))
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN (
                                SELECT OperatingRoomDetailId, MAX(ProcedureId) AS UD_MAX_ProcedureId
                                FROM Procedures 
                                WHERE PatientId=@PatientId AND ProcName IN('IlealConduit','NeoBladder','ContCutaneous','ileal conduit','indiana pouch','IndianaPouch','Ileal Loop','Studer Pouch','Sigmoid Conduit','IlealConduit/SigmoidNeobladder')
                                GROUP BY OperatingRoomDetailId 
                                ) AS MaxUD ON Procedures.OperatingRoomDetailId = MaxUD.OperatingRoomDetailId 
                LEFT OUTER JOIN (
                                SELECT OperatingRoomDetailId AS UD_OperatingRoomDetailId, ProcName AS UD_ProcName,ProcedureId AS UD_ProcedureId
                                FROM Procedures 
                                WHERE PatientId=@PatientId
                                ) AS UrinaryDiversions ON UrinaryDiversions.UD_ProcedureId = MaxUD.UD_MAX_ProcedureId  
WHERE Procedures.PatientId = @PatientId AND ProcName IN('Cystectomy','CP','Cysto-Prostatectomy','Partial Cystectomy','Radical Cystectomy','Salvage Radical Cystectomy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ISNULL(ProcName,'Prostatectomy'),
       dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)) +
       ' (' + dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality))+ ')' + 
       ' (' + ISNULL(Pathology.PathQuality,ProcQuality) + ')', 
       ProcQuality, ProcDate,  'Procedures', Procedures.ProcedureId, 'ProstateProc',
       '__' + ISNULL(ProcDateText + ' ' ,'') + '|' + '__' + RTRIM(ISNULL(LkpProcName,'Prostatectomy')) + '|' + '__' + ISNULL(dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)),'') +
       ' (' + dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality))+ ')' + '|',
       'Procedures,ProstatectomyProc,ProstatectomyPath' + CASE WHEN PLND.PathologyId IS NOT NULL THEN ',Pathology' ELSE '' END, 
       ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + ProcQuality,','+@NO_DQ) + ISNULL(',' + Pathology.PathQuality,','+@NO_DQ) + 
       CASE WHEN PLND.PathologyId IS NOT NULL THEN ISNULL(',' + COALESCE(Pathology.PathQuality,ProcQuality),@NO_DQ) ELSE '' END,
       CAST(Procedures.ProcedureId as varchar(50)) + (ISNULL(',' + CAST(ProstatectomyProc.ProcedureId as varchar(50)),@NO_PK)) + (ISNULL(',' + CAST(ProstatectomyPath.PathologyId as varchar(50)),@NO_PK)) + 
       CASE WHEN PLND.PathologyId IS NOT NULL THEN (ISNULL(',' + CAST(PLND.PathologyId as varchar(50)),'')) ELSE '' END
FROM Procedures LEFT OUTER JOIN ProstatectomyProc ON ProstatectomyProc.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN ProstatectomyPath ON ProstatectomyPath.PathologyId = Pathology.PathologyId 
                LEFT OUTER JOIN (
                                SELECT PathologyId,OperatingRoomDetailId,PathQuality,
                                       ROW_NUMBER() OVER(ORDER BY PathologyId DESC) AS RowNum
                                FROM Pathology
                                WHERE Pathology.PatientId=@PatientId AND PathSpecimenType='PLND'
                                ) PLND ON Procedures.OperatingRoomDetailId = PLND.OperatingRoomDetailId AND
                                          COALESCE(Pathology.PathQuality,ProcQuality,'') = ISNULL(PLND.PathQuality,'') AND
                                          RowNum = 1
               LEFT OUTER JOIN (
                               SELECT LkpCode,LkpDescription LkpProcName
                               FROM LookupCodes 
                               WHERE LkpFieldName = 'ProcName' 
                               ) LKP ON ProcName=LkpCode
WHERE Procedures.PatientId = @PatientId AND ProcName IN('CP','LP','LP_CONV','PP','RALP','RP','SalvCP','SalvLP','SalvRP')
      AND Procedures.ProcedureId NOT IN (SELECT PrimaryKey FROM @ChronoTable WHERE TableName='Procedures')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, 'RPLND', LTRIM(ISNULL(ProcApproach,'') + ' ' + ISNULL(PathResult,'') + ' ' + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' +  ISNULL(PathStageM,'')),
       ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId,'TestisProc',
       '__' + ISNULL(ProcDateText,'') + ' ' + RTRIM(ProcName +  ' ' + ISNULL(ProcApproach,'')) + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|' + '__' + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' +  ISNULL(PathStageM,'') + '|',
       'Procedures,Pathology,PathologyStageGrade', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + Pathology.PathQuality,','+@NO_DQ) + ISNULL(',' + PathologyStageGrade.PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + (ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK)) + (ISNULL(',' + CAST(PathologyStageGrade.PathologyStageGradeId as varchar(50)),@NO_PK))
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
WHERE Procedures.PatientId = @PatientId AND ProcName = 'RPLND'

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ProcName, ISNULL(ProcSide,'') + ' ' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,''), ProcQuality, ProcDate, 'Procedures',Procedures.ProcedureId, 'KidneyProc',
       '__' + ISNULL(ProcDateText,'') +  ' ' + ISNULL(ProcName,'') + ' ' + ISNULL(ProcSide,'') + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK) 
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId
WHERE Procedures.PatientId  = @PatientId AND ProcName IN('Nephrectomy','Partial Nephrectomy','Laparoscopic Nephroureterectomy','Partial for Horshoe Kidney','Laparoscopic Partial Nephrectomy','Nephroureterectomy','Laparoscopic Radical Nephrectomy','Radical Nephrectomy')

--procedures not in the current list
INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ISNULL(ProcName,''), ISNULL(ProcSite,'') + ' ' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,''), ProcQuality, ProcDate, 'Procedures', Procedures.ProcedureId, 
       CASE WHEN ProcName='PLND' THEN 'ProstateProc' 
            WHEN ProcName LIKE 'Cysto%' THEN 'CystoProc' 
            ELSE 'OtherProc' 
       END,
       '__' + ISNULL(ProcDateText,'') +  ' ' + ISNULL(ProcName,'') + ' ' + ISNULL(ProcSite,'') + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK)       
FROM Procedures LEFT OUTER JOIN 
                (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
                LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey,VarExtraInfo)
SELECT RadTxDateText, RadTxType, RadTxTotalDose, RadTxQuality, RadTxDate,RadTxStopDateText, 'RadiationTherapy', RadiationTherapyId, ISNULL(RadTxTarget+' ','') + ISNULL(RadTxIntent,'')
FROM RadiationTherapy
WHERE (RadiationTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT BrachyDateText,'Brachytherapy',BrachyIsotope,BrachyQuality,BrachyDate,'BrachyTherapy',PatientId
FROM BrachyTherapy
WHERE (BrachyTherapy.PatientId = @PatientId AND ISNULL(BrachyPending,0)=0)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT statusDateText, 'Status', status, statusQuality, statusDate, 'Status', statusId
FROM Status
WHERE (Status.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT PtDeathDateText, 'Status', PtDeathType, Null, PtDeathDate, 'Patients', PatientID
FROM Patients
WHERE (PtDeathDate Is Not Null) AND (PatientID=@PatientID)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo,VarStopDate)
SELECT VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo,
       (SELECT TOP 1 PtProtocolStatusDateText
        FROM PatientProtocolStatus 
        WHERE PatientProtocolId = PatProtId AND PtProtocolStatus = 'Off Study') VarStopDate
FROM 
   (
   SELECT dbo.fnGetPtProtocolStatusDate(PatientProtocolId,'DateText') VarDate,'Protocol' VarName,
          ISNULL(dbo.fnGetPtProtocolStatusLast(PatientProtocolId),PtProtocolStatus) VarValue,PtProtocolQuality Quality,
          CAST(dbo.fnGetPtProtocolStatusDate(PatientProtocolId,'Date') AS datetime) SortDate,
          'PatientProtocols' TableName,PatientProtocolId PrimaryKey,
          ISNULL(ProtocolNum,'') + ISNULL(' ('+ProtocolAlias+')','') VarExtraInfo,
          PatientProtocolId PatProtId
   FROM PatientProtocols INNER JOIN Protocols ON PatientProtocols.ProtocolId = Protocols.ProtocolId
   WHERE (PatientId = @PatientId) 
   ) a LEFT OUTER JOIN 
   (
   SELECT c.LkpCode 
   FROM LookupCodeAttributes a INNER JOIN
        LookupAttributes b ON a.AttributeId=b.AttributeId INNER JOIN
        LookupCodes c ON a.LookupCodeId=c.LookupCodeId
   WHERE AttributeName = 'ProtocolScreening' AND
         AttributeValue = 'HPI'
   ) b ON a.VarValue LIKE ('%' + b.LkpCode + '%')
WHERE b.LkpCode IS NULL

--Clean up local variables for each record fetched
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarValue = ''
WHERE VarValue IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarValue = dbo.fnPacManStr(VarValue)
WHERE TableName = 'LabTests' AND ISNUMERIC(VarValue)=0
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL
UPDATE @ChronoTable 
   SET VarExtraInfo = ''
WHERE VarExtraInfo IS NULL

--Figure out Aborted Prostatectomies
UPDATE @ChronoTable
   SET VarName = 'PLND Aborted Prostatectomy',
       Filters = 'ProstateProc'
FROM @ChronoTable INNER JOIN Procedures ON Procedures.ProcedureId=PrimaryKey
                  LEFT OUTER JOIN Pathology ON Procedures.ProcedureId=Pathology.ProcedureId
WHERE TableName='Procedures' AND VarName='PLND' AND 
      Pathology.ProcedureId IS NULL

SET @strOutPut = ''
SET @strPatientHPI = ''
DECLARE tables_cursor CURSOR LOCAL FAST_FORWARD
   FOR
   SELECT VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey,VarExtraInfo,
          Filters,Qualities,VarDelimited,TableNames,PrimaryKeys
   FROM @ChronoTable
   ORDER BY SortDate ASC   
OPEN tables_cursor
IF CURSOR_STATUS ('local','tables_cursor') = 1
BEGIN
   --SET @starttime= GETDATE()
   --SET @strDebug= 'START ' + CAST(@starttime as varchar)
   FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@strTableName,@intPrimaryKey,@strExtraInfo,@strFilters,@strQualities,@strVarDelimited,@strTableNames,@strPrimaryKeys
   WHILE (@@FETCH_STATUS <> -1)
   BEGIN  
      --DETERMINE if record is pre-treatment assume record is not pre-treatment
      SET @blnPreTx = 0
      IF @dteDate IS NULL 
         SET @blnPreTx = 1
      ELSE IF @TxDate = @MISSING_DATE
         SET @blnPreTx = 1
      ELSE IF @dteDate = @TxDate
         SET @blnPreTx = 1     

      -- PSA
      IF @strVariable = 'PSA'
      BEGIN
         --accomodate <,>, <=, >=
         --SET @strValue = dbo.fnPacManStr(@strValue) --not need cause of update statement        
         IF ISNUMERIC(@strValue) = 1
         BEGIN
            SET @blnValidPSA = 1
            -- PSA invalid if patient on hormone therapy
            IF (@blnPreTx = 1 AND @NeoAdjHormTx <> '') OR (@AdjHormTx <> '') OR (@HormEvent <> '')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@HormTxDate = @MISSING_DATE) OR (@dteDate > @HormTxDate)
                     SET @blnValidPSA = 0

            -- PSA invalid if patient on chemotherapy
            IF (@blnPreTx = 1 AND @NeoAdjChemoTx <> '') OR (@AdjChemoTx <> '') OR (@MetsEvent LIKE '%CHEMO%')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@ChemoTxDate = @MISSING_DATE) OR (@dteDate > @ChemoTxDate)
                     SET @blnValidPSA = 0

            -- PSAs invalid within specified days after prostate biopsy
            IF @BiopsyDate <> @MISSING_DATE AND @dteDate IS NOT NULL
               IF @dteDate > @BiopsyDate
                  IF (@dteDate - @BiopsyDate) < @BiopsyDays
                     SET @blnValidPSA = 0

            -- find valid pre-treatment PSA 
            IF @blnValidPSA = 1   
               IF @blnPreTx = 1
               BEGIN
                  IF NOT (@dteDate IS NULL AND @PreTxPSA <> @MISSING_NUMBER AND @PreTxPSA > CAST(@strValue AS float(24)))
                     SET @PreTxPSA = CAST(@strValue AS float(24))
                     IF @EForm=1
                        SET @PreTxPSAID = @intPrimaryKey  
                  IF @dteDate IS NOT NULL
                     SET @PreTxPSADate = @dteDate
               END
               ELSE
                  SET @LastPSA_Value = @strValue
               IF @dteDate IS NOT NULL
                  SET @LastPSA_Date = @dteDate
         END 
      END
      ELSE
      -- Prostate Biopsy
      IF @strVariable IN('NEEDLE BIOPSY','BIOPSY','TURP','TRUS Biopsy') AND @strExtraInfo='Prostate'--dbo.fnIsBiopsyProstate (@strVariable)= 1
      BEGIN
         -- which biopsy is the diagnostic biopsy?
         -- save date to check for PSAs within 3 weeks of biopsy
         IF @blnPreTx = 1
            IF @dteDate IS NOT NULL
            BEGIN
               SET @BiopsyDate = @dteDate
               -- diagnostic biopsy is first positive biopsy
               -- but if ther are later pre-tx grades, use them
               IF @strValue <> '' AND @strValue NOT IN('NEG','PIN','ASAP','Negative') --dbo.fnIsAbnormalBiopsyProstate (@strValue) = 1
                  IF @DxBxDate = @MISSING_DATE OR 
                                 (@strDataQuality='RR' AND @DxBxQuality <> 'RR' AND @DxBxDate = @dteDate) OR 
                                 (@strDataQuality IN('STD','REV') AND @DxBxQuality = 'OUT' AND @DxBxDate = @dteDate)
                  BEGIN
                     SET @DxBxType = @strVariable
                     SET @DxBxDate = @dteDate
                     SET @DxBxDateText = @strDate
                     SET @DxBxSummary = @strValue
                     SET @DxBxQuality = @strDataQuality
	                  SET @DxBiopsyID = @intPrimaryKey --for paper form
                     -- move the clinical state forward
                     IF @ClinState < @LOCALIZED
                     BEGIN
                        SET @ClinState = @LOCALIZED
                        SET @ClinStateDate = @dteDate 
                        SET @ClinStateDteText = @strDate
                        IF @EForm=1
                           BEGIN
                              SET @ClinStateID = @intPrimaryKey
                              SET @ClinStateTable = @strTableName
                              SET @ClinStateQuality = @strDataQuality
                           END                                             
                     END
                  END
            END         
      END   -- does not deal with post-curative treatment (RP, XRT) biopsies
      ELSE
      -- UICC/AJCC Clinical Tumor Stage
      IF @strVariable IN('UICC_92','UICC_97','UICC_02')
      BEGIN
         IF @blnPreTx = 1 AND @strValue <> ''
            If @strDataQuality = 'RR' OR @ClinStageQuality <> 'RR'
            BEGIN
               IF @dteDate IS NOT NULL
               BEGIN
	               SET @ClinStageDate = @dteDate            
	               SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
                  IF CHARINDEX(',',@strExtraInfo) > 0
                     BEGIN
                        SET @ClinStageN = SUBSTRING(@strExtraInfo,1,CHARINDEX(',',@strExtraInfo)-1)
                        SET @ClinStageM = SUBSTRING(@strExtraInfo,CHARINDEX(',',@strExtraInfo)+1,LEN(@strExtraInfo))
                     END
                  ELSE IF @strExtraInfo <> ''
                     SET @ClinStageN = @strExtraInfo
	               SET @ClinStageQuality = @strDataQuality
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey
	            END
	            ELSE IF @strValue > @ClinStageT
	            BEGIN
		            -- don't need to copy date b/c all nulls sort to top
         		   SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
                  IF CHARINDEX(',',@strExtraInfo) > 0
                     BEGIN
                        SET @ClinStageN = SUBSTRING(@strExtraInfo,1,CHARINDEX(',',@strExtraInfo)-1)
                        SET @ClinStageM = SUBSTRING(@strExtraInfo,CHARINDEX(',',@strExtraInfo)+1,LEN(@strExtraInfo))
                     END
                  ELSE IF @strExtraInfo <> ''
                     SET @ClinStageN = @strExtraInfo
	               SET @ClinStageQuality = @strDataQuality
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey
               END
            END       
      END
      ELSE
      BEGIN   
         -- Chemotherapy (NOT AN ELSE b/c of combination therapies)
         IF (@strVariable LIKE '%CHEMO%') AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @ChemoTxDate = @MISSING_DATE
                  SET @ChemoTxDate = @dteDate
   
            IF @blnPreTx = 1
               SET @NeoAdjChemoTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjChemoTx = @strVariable
               -- assumes any chemo after treatment indicates metastasis
               SET @MetsEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' ' 
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               IF @strExtraInfo <> ''
                  SET @strOutput = @strOutput +  ' IRB#' + @strExtraInfo
               IF @EForm=1
                  INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Filters,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strFilters,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
               ELSE
                  INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''))
               SET @strOutput = ''
         END
         -- Hormone Therapy (NOT AN ELSE b/c of combination therapies)
         IF ((@strVariable LIKE '%HORM%')
            OR (@strVariable = 'ORCH')
            OR (@strVariable ='Bilateral Orchiectomy')
            OR (@strVariable LIKE 'ORCH_BIL%')
            OR (@strVariable LIKE '%LHRH%')
            OR (@strVariable LIKE '%AA%')
            OR (@strVariable LIKE '%ESTROGEN%')
            OR (@strVariable LIKE '%PROGEST%'))
            AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @HormTxDate = @MISSING_DATE
                  SET @HormTxDate = @dteDate
            IF @blnPreTx = 1
               SET @NeoAdjHormTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjHormTx = @strVariable
               SET @HormEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' '  
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               IF @strExtraInfo <> ''
                  SET @strOutput = @strOutput +  ' IRB#' + @strExtraInfo
               --prevent the same record from being inserted again need a better way
               IF NOT EXISTS(SELECT SortDate FROM @SortTable WHERE SortDate=@dteDate AND VarString=@strOutput)
                  BEGIN
                     IF @EForm=1                  
                        INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Filters,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strFilters,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
                     ELSE
                        INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''))                        
                  END
               SET @strOutput = ''   
         END 
      END    
      --Testosterone
      /*
      IF @strVariable LIKE 'TEST%' 
      --look for castrate levels of testosterone
      BEGIN 
        IF ISNUMERIC(@strValue) = 1
           IF CAST(@strValue As float(24)) < @CASTRATE_TESTOSTERONE_LEVEL
              SET @Castrate = 1     
      END
      */
      --check if castrated
      --IF @strVariable IN ('ORCH_BIL','Bilateral Orchiectomy')
      --   SET @Castrate = 1
      --Diagnostics Imaging
      /*
      these should be positive diagnostics for metastasis
      what exactly is positive?
      should it require specifying extent of disease?
      should CT and MRI be confirmed by LN_BX?
      should BS or PET be confirmed by BONE_BX?
      add target latter so can use other scan types?
      */
      /*
      IF @strVariable IN('BS','Bone Scan','BONE_BX','LN_BX') --('PET','PET Scan','XRAY','X-RAY','RADIOGRPH',)  
            --OR @strVariable LIKE 'CT%' OR @strVariable LIKE '%MRI%'--dbo.fnIsDiagnostic(@strVariable) = 1
      BEGIN
         IF @strValue LIKE 'POS%' OR 
            @strValue LIKE 'ABN_P%' OR 
            @strValue LIKE 'ABN_MAL%' OR
            @strValue='Abnormal Malignant' OR
            @strValue='Abnormal'	OR
            @strValue='Abnormal Prostate'--dbo.fnIsAbnormalDiagnostic(@strValue) = 1
            IF @ClinState < @NON_CASTRATE_METS
            BEGIN
               IF @Castrate = 1
                  SET @ClinState = @CASTRATE_METS
               ELSE
                  SET @ClinState = @NON_CASTRATE_METS
               IF @EForm=1
                  BEGIN
                     SET @ClinStateID = @intPrimaryKey
                     SET @ClinStateTable = @strTableName
                  END   
               IF @dteDate IS NOT NULL
               BEGIN
                  SET @ClinStateDate = @dteDate
                  SET @ClinStateDteText = @strDate
               END
            END
      END
      ELSE
      */
      -- Radiation Therapy
      IF @strVariable IN('XRT','EBRT','RT','COMBO','BRACHY','COMBO','RADIOISOTOPE','SEED'
                        ,'IMPLANT','Brachytherapy',
                        'External Beam','Radiation Therapy, Unspecified','External Beam, IMRT',
                        'High-Dose Rate Brachytherapy','External Beam, 3D Conventional',
                        'External Beam, 3D Conformal') --dbo.fnIsRadiationtherapy(@strVariable) = 1 OR dbo.fnIsBrachytherapy(@strVariable)= 1
      BEGIN
         IF @ClinState < @LOCALIZED
         BEGIN
            SET @ClinState = @LOCALIZED
            IF @EForm=1
               BEGIN
                  SET @ClinStateID = @intPrimaryKey
                  SET @ClinStateTable = @strTableName
                  SET @ClinStateQuality = @strDataQuality
               END   
            IF @dteDate IS NOT NULL
            BEGIN
               SET @ClinStateDate = @dteDate
               SET @ClinStateDteText = @strDate
            END                                          
         END
         IF @blnPreTx = 1
            BEGIN 
               SET @NeoAdjRadTx = @strVariable
               --SET @RadTxDate = @dteDate
               IF @dteDate IS NOT NULL
                  SET @TxDate = @dteDate
            END
         SET @strOutput = @strOutput + @strDate + ' '
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         SET @strOutput = @strOutput + @strVariable + ' ' + @strExtraInfo + ' ' + @strValue
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''))
         SET @strOutput = ''     
      END
      ELSE
      -- Extent of Disease
      IF @strVariable = 'EOD'
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' + @strVariable + ' ' + @strValue
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey)
         SET @strOutput = ''   
      END
      ELSE
      -- Radical Prostatectomy
      IF @strVariable LIKE 'R[RCPL]P' OR @strVariable LIKE '[RCPL]P' OR @strVariable LIKE 'Salv[RCPL]P' OR @strVariable='RALP' OR @strVariable = 'LP_CONV' --dbo.fnIsRadicalProstatectomy(@strVariable) = 1
      BEGIN
         IF @ClinState < @LOCALIZED
         BEGIN
           SET @ClinState = @LOCALIZED
           IF @EForm=1
              BEGIN
                 SET @ClinStateID = @intPrimaryKey
                 SET @ClinStateTable = @strTableName
                 SET @ClinStateQuality = @strDataQuality
              END
           IF @dteDate IS NOT NULL
           BEGIN
              SET @ClinStateDate = @dteDate
              SET @ClinStateDteText = @strDate
           END                                          
         END
         IF @blnPreTx = 1 
            IF @dteDate IS NOT NULL
               SET @TxDate = @dteDate
         --recoding some variables here
         SELECT @strVariable=LkpDescription FROM LookupCodes WHERE LkpCode=@strVariable AND LkpFieldName = 'ProcName' 
         SET @strOutput = @strOutput + @strDate + ' ' + ISNULL(@strVariable,'') + ' ' + @strValue
         SET @strOutput = REPLACE(REPLACE(REPLACE(REPLACE(@strOutput,'SMS','Margin'),'ECE','Extension'),'SVI','Seminal Vesicles'),'LNI','Nodes')
         IF @EForm=1
            BEGIN
               SET @strVarDelimited = REPLACE(REPLACE(REPLACE(REPLACE(@strVarDelimited,'SMS','Margin'),'ECE','Extension'),'SVI','Seminal Vesicles'),'LNI','|__Nodes')
               INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strVarDelimited,@strTableNames,@strPrimaryKeys,@strFilters,@strQualities)
               SET @strTableNames = ''
               SET @strPrimaryKeys = ''
               SET @strVarDelimited = ''
            END
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,@strFilters,@strQualities)
         SET @strOutput = ''   
      END
      ELSE
      -- Status    
      IF @strVariable = 'Status'
      BEGIN
         IF @strValue IN('Localized','LCR','Local Recurrence')
            BEGIN
               IF @ClinState < @LOCALIZED 
               BEGIN
                  SET @ClinState = @LOCALIZED
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('BCR','Biochemical Recurrence')
            BEGIN
               IF @Castrate = 1 AND @ClinState < @RISING_PSA_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_CASTRATE
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
               ELSE IF @ClinState < @RISING_PSA_NON_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_NON_CASTRATE
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
            END
         ELSE
            IF @strValue IN('RisingPSA_Castrate','Rising PSA Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('RisingPSA_NonCastrate','Rising PSA Non-Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_NON_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_NON_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END 
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsNonCastrate','Non-Castrate Mets','Clinical Mets Non-Castrate')
            BEGIN
               IF @ClinState < @NON_CASTRATE_METS
               BEGIN
                  SET @ClinState = @NON_CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END 
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsCastrate','Castrate Mets','Clinical Mets Castrate')
            BEGIN
               IF @ClinState < @CASTRATE_METS
               BEGIN
                  SET @ClinState = @CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('METS','Distant Metastasis')
            BEGIN
               IF @ClinState < @CASTRATE_METS AND @Castrate = 1
                  BEGIN
                     SET @ClinState = @CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
               ELSE IF @ClinState < @NON_CASTRATE_METS
                  BEGIN
                     SET @ClinState = @NON_CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
            END
         ELSE
            IF @strValue IN('DOD','DOC','DUC','Dead','Death from Prostate Cancer','Death from Other Cause',
                            'Death from Unknown Causes')
            BEGIN
               If @ClinState < @DEAD 
                  BEGIN
                     SET @ClinState = @DEAD
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
            END
      END
      --Protocols
      IF @strVariable = 'Protocol'
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' '  
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         IF @strVariable <> ''
            SET @strOutput = @strOutput +  @strVariable
         IF @strExtraInfo <> ''
            SET @strOutput = @strOutput +  ' ' + @strExtraInfo
         IF @strValue <> ''
            SET @strOutput = @strOutput + ' ' + @strValue

         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey)
         SET @strOutput = ''
      END
      ELSE
      --PRINT @strDate + ' ' + @strVariable + ' ' + @strValue + ' ' + @strDataQuality
      --SET @stoptime= GETDATE()
      --SET @strdebug = @strdebug + char(10) + @strVariable + ' ' + @stoptime --Cast to text
      --SELECT @stoptime - @starttime
      
      --Here we catch a bunch of values that are normally ignored and instead put them back into the output table
      IF @strTableName IN('MedicalTherapy','RadiationTherapy','BrachyTherapy','Procedures')
         BEGIN
            IF NOT EXISTS(SELECT PrimaryKeys FROM @SortTable WHERE TableNames LIKE '%' + @strTableName + '%' AND PrimaryKeys LIKE '%' + CAST(@intPrimaryKey as varchar(50)) + '%')
               BEGIN
                  IF @strTableName IN('MedicalTherapy','RadiationTherapy')
                     BEGIN
                        SET @strOutput = ISNULL(@strDate,'') + ' ' 
                        IF @strStopDate <> ''
                           SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
                        IF @strTableName='MedicalTherapy'
                           BEGIN
                              IF @strValue <> ''
                                 SET @strOutput = @strOutput +  @strValue
                              ELSE
                                 SET @strOutput = @strOutput + @strVariable
                              IF @strExtraInfo <> ''
                                 SET @strOutput = @strOutput +  ' IRB#' + @strExtraInfo
                           END
                        ELSE
                           SET @strOutput = @strOutput+@strVariable+' '+' '+@strExtraInfo+' '+@strValue
                     END  
                  ELSE IF (@strTableName = 'Procedures' AND @intPrimaryKey<>@DxBiopsyID) OR @strTableName = 'BrachyTherapy'
                     SET @strOutput = RTRIM(LTRIM(ISNULL(@strDate,'') + ' ' + ISNULL(@strVariable,'') + ' ' + ISNULL(@strValue,'')))
                  IF @EForm=1
                     BEGIN
                        IF @strVarDelimited IS NOT NULL AND @strTableNames IS NOT NULL AND @strPrimaryKeys IS NOT NULL
                           INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,StopDateText,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strVarDelimited,@strTableNames,@strPrimaryKeys,NULLIF(@strStopDate,''),@strFilters,@strQualities)
                        ELSE
                           INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,StopDateText,Filters,Qualities) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''),@strFilters,@strDataQuality)
                     END
                  ELSE
                     INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''),@strFilters,@strQualities)
                  SET @strOutput = '' 
               END
         END
      FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@strTableName,@intPrimaryKey,@strExtraInfo,@strFilters,@strQualities,@strVarDelimited,@strTableNames,@strPrimaryKeys
      --SET @starttime= GETDATE()
   END
   DEALLOCATE tables_cursor
   --PRINT @strdebug
END      
   --Capture PreDx Biopsy PSA
   SELECT TOP 1 @PreDxBxPSA=VarValue, @PreDxBxPSAID=PrimaryKey, @PreDxBxPSAQuality=Quality
   FROM @ChronoTable 
   WHERE TableName='LabTests' AND VarName='PSA' AND VarValue<>'' AND SortDate<=@DxBxDate 
   ORDER BY SortDate DESC
   --reformat BxSummary
   IF LEFT(@DxBxSummary,3) LIKE '[1-5]+[1-5]'
      SET @DxBxSummary = 'Gleason ' + CAST(CAST(LEFT(@DxBxSummary,1) AS int) 
                       + CAST(SUBSTRING(@DxBxSummary,3,1) AS int) AS varchar(50)) + ' (' + LEFT(@DxBxSummary,3) + ')' 
                       + CASE WHEN LEN(@DxBxSummary)>3 THEN RIGHT(@DxBxSummary,LEN(@DxBxSummary)-3) ELSE '' END 
   ELSE IF @DxBxSummary<>''
      SET @DxBxSummary = 'Gleason ' + @DxBxSummary
   IF @EForm <> 1
      SET @DxBxSummary = @DxBxSummary + ISNULL(' (' + @DxBxQuality + ')','')

   -- assembles diagnosis date, stage, grade, pre tx psa line
   IF @EForm=1
      BEGIN
         IF @DxBxDate <> @MISSING_DATE
            BEGIN
               SET @strPatientHPI = @DxBxDateText + ' '
            	SET @strTableNames = 'Procedures'
               SET @strQualities = ISNULL(@DxBxQuality,@NO_DQ)
               SET @strPrimaryKeys = CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = '__' + @DxBxDateText + ' ' +  '|'
            END 
         IF @ClinStageT <> ''
            BEGIN
               --SET @strPatientHPI = @strPatientHPI + @ClinStageT + ' (' + RIGHT(@ClinStageSystem,2) + ') '
               SET @strPatientHPI = @strPatientHPI + @ClinStageT + @ClinStageN + @ClinStageM + ' (' + RIGHT(@ClinStageSystem,2) + ') '
               SET @strTableNames = @strTableNames + ',ClinicalStages'
               SET @strQualities = @strQualities +  ISNULL(',' + @ClinStageQuality,','+@NO_DQ)
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@ClinStageID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @ClinStageT + @ClinStageN + @ClinStageM + ' (' + RIGHT(@ClinStageSystem,2) + ')|'
            END
         IF @DxBxType <> ''
            BEGIN 
               SET @strPatientHPI =  @strPatientHPI + @DxBxType + ' ' + @DxBxSummary + ' '
               SET @strTableNames = @strTableNames + ',Procedures'
               SET @strQualities = @strQualities +  ISNULL(',' + @DxBxQuality,','+@NO_DQ)
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @DxBxType + ' ' + @DxBxSummary + '|'
            END
         IF @PreDxBxPSA <> ''
            BEGIN
               SET @strPatientHPI = @strPatientHPI + ' PSA ' + @PreDxBxPSA + ' '
               SET @strTableNames = @strTableNames + ',LabTests'
               SET @strQualities = @strQualities +  ISNULL(',' + @PreDxBxPSAQuality,','+@NO_DQ)
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@PreDxBxPSAID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__ PSA ' + CAST(@PreDxBxPSA AS varchar(50)) + '|'
            END
         --strip leading comma from TableNames and PrimaryKeys concatenation
         IF LEFT(@strTableNames,1) = ','
            SET @strTableNames = RIGHT(@strTableNames,LEN(@strTableNames)-1)
         IF LEFT(@strPrimaryKeys,1) = ','
            SET @strPrimaryKeys = RIGHT(@strPrimaryKeys,LEN(@strPrimaryKeys)-1)
         INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,Filters) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@strQualities,@strPrimaryKeys,'ProstateProc')
         SET @strTableNames = ''
         SET @strPrimaryKeys = ''
         SET @strVarDelimited = ''
      END 
   ELSE
      BEGIN
         IF @DxBxType <> ''
            SET @DxBxSummary = @DxBxType + ' ' + @DxBxSummary
         IF @DxBxDate <> @MISSING_DATE
            SET @strPatientHPI = @DxBxDateText
         IF @ClinStageT <> ''
            SET @strPatientHPI = @strPatientHPI + ' ' + @ClinStageT + @ClinStageN + @ClinStageM + ' (' + RIGHT(@ClinStageSystem,2) + ')'
         IF @DxBxSummary <> ''
            SET @strPatientHPI = @strPatientHPI + ' ' + @DxBxSummary  
         IF @PreDxBxPSA <> ''
            SET @strPatientHPI = @strPatientHPI + ' PSA ' + @PreDxBxPSA + ' '
         IF @strPatientHPI <> ''
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,Filters) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI,NULL,NULL,NULL,'ProstateProc')
      END
   SET @strPatientHPI = ''   -- make sure this is set to '' by default

   -- assemble clinical state / status line
   IF @ClinStateDate <> @MISSING_DATE 
   BEGIN
      SET @strPatientHPI = @strPatientHPI + @ClinStateDteText + ' '
      -- decode numeric clinical states back into text for display
      --Removed by request orignially coded as 'No Prostate Cancer Diagnosis '
      IF @ClinState = @NO_PROSTATE_CANCER_DIAGNOSIS
         SET @strPatientHPI = '' --@strPatientHPI + ''
      IF @ClinState = @LOCALIZED
         SET @strPatientHPI = @strPatientHPI + 'Localized'
      IF @ClinState = @RISING_PSA_NON_CASTRATE
         SET @strPatientHPI = @strPatientHPI + 'Rising PSA Non-Castrate'
      IF @ClinState = @RISING_PSA_CASTRATE
         SET @strPatientHPI = @strPatientHPI + 'Rising PSA Castrate'
      --Removed by request, orignially coded as 'Non-Castrate Mets'
      IF @ClinState = @NON_CASTRATE_METS
         SET @strPatientHPI = '' --@strPatientHPI + 'Metastasis' 
      IF @ClinState = @CASTRATE_METS
         SET @strPatientHPI = @strPatientHPI + 'Castrate Mets'
      IF @ClinState = @DEAD
         SET @strPatientHPI = @strPatientHPI + 'Dead'

      IF @EForm=1 AND @strPatientHPI <> ''
         BEGIN
            SET @strVarDelimited = '__' + @strPatientHPI + '|'
            SET @strTableNames = @ClinStateTable
            SET @strPrimaryKeys = CAST(@ClinstateID as varchar(50))
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,Filters) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@ClinStateQuality,@strPrimaryKeys,CASE WHEN @ClinStateTable = 'Procedures' THEN 'ProstateProc' END)
            SET @strTableNames = ''
            SET @strPrimaryKeys = ''
            SET @strVarDelimited = ''
         END
      ELSE
         INSERT @SortTable (SortDate,VarString) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI)
   END      
   SET @strPatientHPI = '' 

   IF @EForm=1
      BEGIN
         SELECT VarString AS PatientHPI,VarDelimited AS PatientHPIDelimited,TableNames,
                PrimaryKeys, SortDate, StopDateText, Filters, Qualities
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   ELSE
      BEGIN
         SELECT VarString AS PatientHPI--,TableNames,PrimaryKeys
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   --SELECT * FROM @ChronoTable

   SELECT @DxBiopsyID AS DxBiopsyId
GO



--67ModifyspGetPatientHPIBladder.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spGetPatientHPIBladder]
   @PatientId int = NULL,
   @Rowcount int = NULL OUTPUT
AS
SET NOCOUNT ON
--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

/*
SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'

DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate     datetime NULL,
   VarString    varchar(255) NULL
   )
*/
DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarSummary
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarSummary   varchar(1000) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   TableName    varchar(50) NULL,
   PrimaryKey   int NOT NULL,
   VarStopDate  varchar(50) NULL,
   ExtraInfo    varchar(500) NULL,
   RelatedProcId int NULL
   )

--LookupCodes cached and reused throughtout algorithm.
DECLARE @Codes TABLE
	(
	LkpCode varchar(255) NOT NULL,
   AttributeValue varchar(50) NOT NULL,
   PRIMARY KEY CLUSTERED (LkpCode, AttributeValue)
	)

INSERT INTO @Codes (LkpCode,AttributeValue)
SELECT DISTINCT LkpCode,AttributeValue
FROM LookupCodes a INNER JOIN 
     LookupCodeAttributes b ON a.LookupCodeId=b.LookupCodeId INNER JOIN
     LookupAttributes c ON b.AttributeId=c.AttributeId
WHERE LkpFieldName = 'HPI_Algorithm' AND
      AttributeName = 'HPI_Bladder'
ORDER BY AttributeValue, LkpCode

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,VarStopDate,TableName,PrimaryKey,ExtraInfo)
SELECT MedTxDateText, MedTxType, MedTxAgent + ISNULL(' (' +  MedTxCycle + ' Cycles) ','') , MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId,
       CASE WHEN LkpCode IS NOT NULL THEN 'Intravesical'
            ELSE 'Systemic'
       END
FROM MedicalTherapy LEFT OUTER JOIN 
     @Codes Codes ON MedTxAgent = LkpCode AND AttributeValue = 'IntravesicalMedTx' 
WHERE PatientId = @PatientId

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,RelatedProcId,ExtraInfo)
SELECT ProcDateText,ProcName, ISNULL(UD_ProcName+' ',''),
       ProcQuality, ProcDate, 'Procedures', Procedures.ProcedureId, UD_ProcedureId, 'ProcCystectomy'
FROM Procedures LEFT OUTER JOIN (
                                SELECT OperatingRoomDetailId, MAX(ProcedureId) AS UD_MAX_ProcedureId
                                FROM Procedures INNER JOIN 
                                     @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'UrinaryDiversion'     
                                WHERE PatientId=@PatientId
                                GROUP BY OperatingRoomDetailId 
                                ) AS MaxUD ON Procedures.OperatingRoomDetailId = MaxUD.OperatingRoomDetailId 
                LEFT OUTER JOIN (
                                SELECT ProcName AS UD_ProcName,ProcedureId AS UD_ProcedureId
                                FROM Procedures 
                                WHERE PatientId=@PatientId
                                ) AS UrinaryDiversions ON UrinaryDiversions.UD_ProcedureId = MaxUD.UD_MAX_ProcedureId
                INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'Cystectomy'    
WHERE Procedures.PatientId = @PatientId

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,RelatedProcId,ExtraInfo)
SELECT ProcDateText,'Bladder Path: ',
       LTRIM(
       + ISNULL(PathStageT+' ','') + ISNULL(PathStageM+' ','') + ISNULL(PathGrade+' ','') 
       + ISNULL(PathHistology+' ','') + ISNULL('Margin:'+PathBladderMargin+' ','')
       + ISNULL('Prostate Inv:'+PathProstateInv+' ',''))
       + ISNULL('Nodes:' + dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)),'')
       , ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Pathology', Pathology.PathologyId, Procedures.ProcedureId, 'PathCystectomy'
FROM Procedures INNER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN ProstatectomyPath ON Pathology.PathologyId = ProstatectomyPath.PathologyId
                LEFT OUTER JOIN CystectomyPath ON Pathology.PathologyId = CystectomyPath.PathologyId
                INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'Cystectomy'
WHERE Procedures.PatientId = @PatientId AND 
      ProstatectomyPath.PathologyId IS NULL

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,ExtraInfo)
SELECT ProcDateText, 'Prostate Path: ', 
       LTRIM(ISNULL(PathHistology+' ','') + ISNULL(PathStageT+' ',''))
       + dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)), 
       ISNULL(Pathology.PathQuality,ProcQuality), ProcDate,  
       CASE WHEN Pathology.PathologyId IS NOT NULL THEN 'Pathology' ELSE 'Procedures' END, ISNULL(Pathology.PathologyId,Procedures.ProcedureId), 'PathProstatectomy'
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN ProstatectomyPath ON ProstatectomyPath.PathologyId = Pathology.PathologyId
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'Prostatectomy'
WHERE Procedures.PatientId = @PatientId AND
      (ProstatectomyPath.PathologyId IS NOT NULL OR 
       PathSite IN(SELECT LkpCode FROM @Codes WHERE AttributeValue = 'SiteProstate'))

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,'Orchiectomy', LTRIM(ISNULL(ProcSide,'') + ' ' + ISNULL(ProcApproach,'')), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'Orchiectomy'
WHERE Procedures.PatientId = @PatientId

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, '', LTRIM(ISNULL(ProcSide + ' ','')  + ISNULL(ProcName,'') + ISNULL(' ' + PathHistology,'')), ProcQuality, ProcDate, 'Procedures',Procedures.ProcedureId
FROM Procedures INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'Nephrectomy'
                LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
WHERE Procedures.PatientId = @PatientId

--Show all TUR% with the Path results or any other endoscopies that have a result of Fulguration
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey,ExtraInfo)
SELECT ProcDateText, ISNULL(ProcName,'Endoscopy'), LTRIM(ISNULL(PathStageT + ' ','') + ISNULL(PathGrade + ' ' ,'') + ISNULL(PathResult,'')), ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
       , CASE WHEN PathResult LIKE '%Positive%' OR PathHistology IS NOT NULL THEN 'PathPositive' END
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'TUR'
WHERE (Procedures.PatientId = @PatientId) AND 
      (LkpCode IS NOT NULL OR 
       PathResult IN(SELECT LkpCode FROM @Codes WHERE AttributeValue = 'TURFulguration'))

--put in the last 3 endoscopies that are not already in
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT TOP 3 ProcDateText, ISNULL(ProcName,'Endoscopy'), LTRIM(ISNULL(PathGrade + ' ' ,'') + ISNULL(PathResult,'')), ISNULL(b.PathQuality,ProcQuality), ProcDate, 'Procedures', a.ProcedureId
FROM Procedures a LEFT OUTER JOIN Pathology b ON a.ProcedureId = b.ProcedureId AND
                    ISNULL(b.PathSpecimenType,'') NOT IN(SELECT LkpCode FROM @Codes 
                                                         WHERE AttributeValue = 'CytologySpecimen')
                  LEFT OUTER JOIN PathologyStageGrade c ON b.PathologyId = c.PathologyId
                  LEFT OUTER JOIN 
                  (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'Procedures') AS d
                   ON a.ProcedureId = d.PrimaryKey
                  INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'Endoscopy'
WHERE a.PatientId = @PatientId AND d.PrimaryKey IS NULL 
ORDER BY ProcDate DESC

INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'RPLND', LTRIM(ISNULL(ProcApproach,'') + ' ' + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathStageN,'') + ' ' +  ISNULL(PathStageM,'')),
       ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'RPLND'
WHERE Procedures.PatientId = @PatientId

--non prostate biopsies
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'Biopsy', LTRIM(ISNULL(ProcSide,'') + ' ' + ISNULL(ProcName,'') + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathResult,'')), ISNULL(PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'BiopsyNonProstate'
WHERE Procedures.PatientId = @PatientId 
AND (Procedures.ProcedureId NOT IN
     (
      SELECT ProcedureId
      FROM Procedures INNER JOIN @Codes Codes ON ProcName = LkpCode AND AttributeValue = 'BiopsyProstate'
      WHERE PatientId = @PatientId AND 
            ProcSite IN(SELECT LkpCode FROM @Codes WHERE AttributeValue = 'SiteProstate')
     ))

--procedures not in the current list exclude prostate biopsies, endoscopies and already included urinary diverion record
INSERT @ChronoTable (VarDate,VarName,VarSummary,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, LTRIM(ISNULL(RIGHT(PathStageSystem,2),'') + ' '  + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ISNULL(PathStageM,'') + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathResult,'')), ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN 
                (SELECT PrimaryKey,VarName,ExtraInfo FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
                LEFT OUTER JOIN @Codes BiopsyProstate ON ProcName = BiopsyProstate.LkpCode AND BiopsyProstate.AttributeValue = 'BiopsyProstate'
                LEFT OUTER JOIN @Codes Endoscopy ON ProcName = Endoscopy.LkpCode AND Endoscopy.AttributeValue = 'Endoscopy'
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL AND
      BiopsyProstate.LkpCode IS NULL AND Endoscopy.LkpCode IS NULL AND
      Procedures.ProcedureId NOT IN (SELECT RelatedProcId FROM @ChronoTable WHERE TableName='Procedures' AND ExtraInfo = 'ProcCystectomy')

--Add in cytology side by side comparison first by PK then by date
UPDATE @ChronoTable 
   SET VarSummary = VarSummary +  ' / ' + PathSpecimenType + ' ' + PathResult
FROM @ChronoTable a INNER JOIN 
     Pathology b ON a.PrimaryKey = b.ProcedureId AND
                    b.PathSpecimenType IN(SELECT LkpCode FROM @Codes 
                                          WHERE AttributeValue = 'CytologySpecimen')
WHERE b.PatientId = @PatientId AND
      VarName IN('Cystoscopy','Endoscopy') AND
      b.PathResult IS NOT NULL

UPDATE @ChronoTable 
   SET VarSummary = VarSummary +  ' / ' + PathSpecimenType + ' ' + PathResult
FROM @ChronoTable a INNER JOIN Pathology b ON b.PatientId = @PatientId AND
                                              a.SortDate = b.PathDate AND
                                              b.PathSpecimenType = 'Cytology' AND
                                              a.PrimaryKey <> b.ProcedureId
WHERE b.PatientId = @PatientId AND
      VarName IN('Cystoscopy','Endoscopy') AND
      b.PathResult IS NOT NULL

--Clean up columns
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarSummary = ''
WHERE VarSummary IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL

--Remove PLND records that are on the same date as cystectomy because the nodes are already displayed
DELETE @ChronoTable FROM @ChronoTable a INNER JOIN 
                           (
                           SELECT SortDate FROM @ChronoTable
                           WHERE TableName='Procedures' AND ExtraInfo = 'ProcCystectomy'
                           ) b ON a.SortDate = b.SortDate
WHERE TableName='Procedures' AND VarName='PLND'  

SELECT LTRIM(VarDate 
            + CASE WHEN VarStopDate IS NULL THEN ' ' ELSE ' - ' + VarStopDate + ' ' END 
            --Remove duplicate Labeling
            + CASE WHEN CHARINDEX (VarName,VarSummary) <> 0 THEN '' ELSE VarName + ' ' END 
            + VarSummary) AS PatientHPI,VarName,VarDate,ExtraInfo--, TableName,PrimaryKey,SortDate
FROM @ChronoTable 
ORDER BY SortDate, ChronoId
SET @Rowcount = @@ROWCOUNT
GO



--68ModifyTablePancreasPath.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_PancreasPath
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PathologyId int NULL,
	PathDifferentiation varchar(50) NULL,
	PathExtraParenchymalInv varchar(50) NULL,
	PathVascularInv varchar(50) NULL,
	PathPerineuralInv varchar(50) NULL,
	PathPancreaticMargin varchar(50) NULL,
	PathAnteriorMargin varchar(50) NULL,
	PathPosteriorMargin varchar(50) NULL,
	PathDuodenalMargin varchar(50) NULL,
	PathGastricMargin varchar(50) NULL,
	PathBileDuctMargin varchar(50) NULL,
	PathAnteriorPeritonealInv varchar(50) NULL,
	PathPancreatitis varchar(50) NULL,
	PathFibrosis varchar(50) NULL,
	PathDuodenum varchar(50) NULL,
	PathStomach varchar(50) NULL,
	PathPanIn varchar(50) NULL,
	PathIPMN varchar(50) NULL,
	PathLymphaticInv varchar(50) NULL,
	PathEpitheliumType varchar(50) NULL,
	PathDysplasia varchar(50) NULL,
	PathCarcinoma varchar(50) NULL,
	PathCarcinomaType varchar(50) NULL,
	PathPercCarcinoma varchar(50) NULL,
	PathCarcinomaMaxDim varchar(50) NULL,
	PathNonneoplastic varchar(50) NULL,
	PathAddTissueMargin varchar(50) NULL,
	PathProximalMargin varchar(50) NULL,
	PathDistalMargin varchar(50) NULL,
	PathFocality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_PancreasPath SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_PancreasPath)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_PancreasPath (LoggedOperation, LoggedBy, LoggedTime, PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, PathEpitheliumType, PathDysplasia, PathCarcinoma, PathCarcinomaType, PathPercCarcinoma, PathCarcinomaMaxDim, PathNonneoplastic, PathAddTissueMargin, PathProximalMargin, PathDistalMargin, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, PathEpitheliumType, PathDysplasia, PathCarcinoma, PathCarcinomaType, PathPercCarcinoma, PathCarcinomaMaxDim, PathNonneoplastic, PathAddTissueMargin, PathProximalMargin, PathDistalMargin, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_PancreasPath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_PancreasPath
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_PancreasPath', N'AuditLog_PancreasPath', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PancreasPath
	DROP CONSTRAINT FK_PancreasPath_Pathology
GO
ALTER TABLE dbo.Pathology SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_PancreasPath
	(
	PathologyId int NOT NULL,
	PathDifferentiation varchar(50) NULL,
	PathExtraParenchymalInv varchar(50) NULL,
	PathVascularInv varchar(50) NULL,
	PathPerineuralInv varchar(50) NULL,
	PathPancreaticMargin varchar(50) NULL,
	PathAnteriorMargin varchar(50) NULL,
	PathPosteriorMargin varchar(50) NULL,
	PathDuodenalMargin varchar(50) NULL,
	PathGastricMargin varchar(50) NULL,
	PathBileDuctMargin varchar(50) NULL,
	PathAnteriorPeritonealInv varchar(50) NULL,
	PathPancreatitis varchar(50) NULL,
	PathFibrosis varchar(50) NULL,
	PathDuodenum varchar(50) NULL,
	PathStomach varchar(50) NULL,
	PathPanIn varchar(50) NULL,
	PathIPMN varchar(50) NULL,
	PathLymphaticInv varchar(50) NULL,
	PathEpitheliumType varchar(50) NULL,
	PathDysplasia varchar(50) NULL,
	PathCarcinoma varchar(50) NULL,
	PathCarcinomaType varchar(50) NULL,
	PathPercCarcinoma varchar(50) NULL,
	PathCarcinomaMaxDim varchar(50) NULL,
	PathNonneoplastic varchar(50) NULL,
	PathAddTissueMargin varchar(50) NULL,
	PathProximalMargin varchar(50) NULL,
	PathDistalMargin varchar(50) NULL,
	PathFocality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_PancreasPath SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.PancreasPath)
	 EXEC('INSERT INTO dbo.Tmp_PancreasPath (PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, PathEpitheliumType, PathDysplasia, PathCarcinoma, PathCarcinomaType, PathPercCarcinoma, PathCarcinomaMaxDim, PathNonneoplastic, PathAddTissueMargin, PathProximalMargin, PathDistalMargin, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, PathEpitheliumType, PathDysplasia, PathCarcinoma, PathCarcinomaType, PathPercCarcinoma, PathCarcinomaMaxDim, PathNonneoplastic, PathAddTissueMargin, PathProximalMargin, PathDistalMargin, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.PancreasPath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.PancreasPath
GO
EXECUTE sp_rename N'dbo.Tmp_PancreasPath', N'PancreasPath', 'OBJECT' 
GO
ALTER TABLE dbo.PancreasPath ADD CONSTRAINT
	PK_PancreasPath PRIMARY KEY CLUSTERED 
	(
	PathologyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.PancreasPath WITH NOCHECK ADD CONSTRAINT
	FK_PancreasPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
CREATE TRIGGER dbo.trgAuditPancreasPath_UD
ON dbo.PancreasPath FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_PancreasPath
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.PathologyId = Inserted.PathologyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_PancreasPath
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO

--69ModifyTableSpineProc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_SpineProc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
	ProcTumorResection varchar(50) NULL,
	ProcNumLaminectomyLevel varchar(50) NULL,
	ProcLaminectomyLevels varchar(50) NULL,
	ProcNumVertebrectomyLevels varchar(50) NULL,
	ProcVertebrectomyLevels varchar(50) NULL,
	ProcPercVertebralBodyRemoved varchar(50) NULL,
	ProcAnteriorReconstruction varchar(50) NULL,
	ProcAnteriorReconstructionType varchar(50) NULL,
	ProcNumPediclesRemoved varchar(50) NULL,
	ProcPediclesRemovedLevel varchar(50) NULL,
	ProcNumInstrumentedLevel varchar(50) NULL,
	ProcInstrumentedLevel varchar(50) NULL,
	ProcPreOpEmbolization varchar(50) NULL,
	ProcCementAugmentation varchar(50) NULL,
	ProcCementLevel varchar(50) NULL,
	ProcCementVolume varchar(50) NULL,
	ProcCementVolumeUnits varchar(50) NULL,
	ProcInflationPressure varchar(50) NULL,
	ProcInflationPressureUnits varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_SpineProc SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_SpineProc)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_SpineProc (LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcTumorResection, ProcNumLaminectomyLevel, ProcLaminectomyLevels, ProcNumVertebrectomyLevels, ProcVertebrectomyLevels, ProcPercVertebralBodyRemoved, ProcAnteriorReconstruction, ProcAnteriorReconstructionType, ProcNumPediclesRemoved, ProcPediclesRemovedLevel, ProcNumInstrumentedLevel, ProcInstrumentedLevel, ProcPreOpEmbolization, ProcCementAugmentation, ProcCementLevel, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcTumorResection, ProcNumLaminectomyLevel, ProcLaminectomyLevels, ProcNumVertebrectomyLevels, ProcVertebrectomyLevels, ProcPercVertebralBodyRemoved, ProcAnteriorReconstruction, ProcAnteriorReconstructionType, ProcNumPediclesRemoved, ProcPediclesRemovedLevel, ProcNumInstrumentedLevel, ProcInstrumentedLevel, ProcPreOpEmbolization, ProcCementAugmentation, ProcCementLevel, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_SpineProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_SpineProc
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_SpineProc', N'AuditLog_SpineProc', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SpineProc
	DROP CONSTRAINT FK_SpineProc_Procedures
GO
ALTER TABLE dbo.Procedures SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_SpineProc
	(
	ProcedureId int NOT NULL,
	ProcTumorResection varchar(50) NULL,
	ProcNumLaminectomyLevel varchar(50) NULL,
	ProcLaminectomyLevels varchar(50) NULL,
	ProcNumVertebrectomyLevels varchar(50) NULL,
	ProcVertebrectomyLevels varchar(50) NULL,
	ProcPercVertebralBodyRemoved varchar(50) NULL,
	ProcAnteriorReconstruction varchar(50) NULL,
	ProcAnteriorReconstructionType varchar(50) NULL,
	ProcNumPediclesRemoved varchar(50) NULL,
	ProcPediclesRemovedLevel varchar(50) NULL,
	ProcNumInstrumentedLevel varchar(50) NULL,
	ProcInstrumentedLevel varchar(50) NULL,
	ProcPreOpEmbolization varchar(50) NULL,
	ProcCementAugmentation varchar(50) NULL,
	ProcCementLevel varchar(50) NULL,
	ProcCementVolume varchar(50) NULL,
	ProcCementVolumeUnits varchar(50) NULL,
	ProcInflationPressure varchar(50) NULL,
	ProcInflationPressureUnits varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_SpineProc SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.SpineProc)
	 EXEC('INSERT INTO dbo.Tmp_SpineProc (ProcedureId, ProcTumorResection, ProcNumLaminectomyLevel, ProcLaminectomyLevels, ProcNumVertebrectomyLevels, ProcVertebrectomyLevels, ProcPercVertebralBodyRemoved, ProcAnteriorReconstruction, ProcAnteriorReconstructionType, ProcNumPediclesRemoved, ProcPediclesRemovedLevel, ProcNumInstrumentedLevel, ProcInstrumentedLevel, ProcPreOpEmbolization, ProcCementAugmentation, ProcCementLevel, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT ProcedureId, ProcTumorResection, ProcNumLaminectomyLevel, ProcLaminectomyLevels, ProcNumVertebrectomyLevels, ProcVertebrectomyLevels, ProcPercVertebralBodyRemoved, ProcAnteriorReconstruction, ProcAnteriorReconstructionType, ProcNumPediclesRemoved, ProcPediclesRemovedLevel, ProcNumInstrumentedLevel, ProcInstrumentedLevel, ProcPreOpEmbolization, ProcCementAugmentation, ProcCementLevel, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.SpineProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.SpineProc
GO
EXECUTE sp_rename N'dbo.Tmp_SpineProc', N'SpineProc', 'OBJECT' 
GO
ALTER TABLE dbo.SpineProc ADD CONSTRAINT
	PK_SpineProc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.SpineProc ADD CONSTRAINT
	FK_SpineProc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER [dbo].[trgAuditSpineProc_UD]
ON dbo.SpineProc FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_SpineProc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_SpineProc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditSpineProc_UD', N'last', N'update'
GO
COMMIT
GO

--70GynDebulkingProc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_GynDebulkingProc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
	ProcPercentTumorRemoved varchar(50) NULL,
	ProcAscitesAmount varchar(50) NULL,
	ProcDebulkingType varchar(50) NULL,
	ProcDebulkingStatus varchar(50) NULL,
	ProcDebulkingDetails varchar(2000) NULL,
	ProcIntraOpHIPEC varchar(50) NULL,
	ProcActualNumMassRemain varchar(50) NULL,
	ProcLocLargestMassRemain varchar(50) NULL,
	ProcLargestMassRemainMaxDiam varchar(50) NULL,
	ProcNumOfMassRemain varchar(50) NULL,
	ProcLocLargestMassFound varchar(50) NULL,
	ProcLargestMassFoundMaxDiam varchar(50) NULL,
	ProcSuboptimalReason varchar(255) NULL,
	ProcLargestVisibleMassFoundMaxDiam varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_GynDebulkingProc SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_GynDebulkingProc)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_GynDebulkingProc (LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcPercentTumorRemoved, ProcAscitesAmount, ProcDebulkingType, ProcDebulkingStatus, ProcDebulkingDetails, ProcIntraOpHIPEC, ProcActualNumMassRemain, ProcLocLargestMassRemain, ProcLargestMassRemainMaxDiam, ProcNumOfMassRemain, ProcLocLargestMassFound, ProcLargestMassFoundMaxDiam, ProcSuboptimalReason, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcPercentTumorRemoved, ProcAscitesAmount, ProcDebulkingType, ProcDebulkingStatus, ProcDebulkingDetails, ProcIntraOpHIPEC, ProcActualNumMassRemain, ProcLocLargestMassRemain, ProcLargestMassRemainMaxDiam, ProcNumOfMassRemain, ProcLocLargestMassFound, ProcLargestMassFoundMaxDiam, ProcSuboptimalReason, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_GynDebulkingProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_GynDebulkingProc
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_GynDebulkingProc', N'AuditLog_GynDebulkingProc', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.GynDebulkingProc
	DROP CONSTRAINT FK_GynDebulkingProc_Procedures
GO
ALTER TABLE dbo.Procedures SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_GynDebulkingProc
	(
	ProcedureId int NOT NULL,
	ProcPercentTumorRemoved varchar(50) NULL,
	ProcAscitesAmount varchar(50) NULL,
	ProcDebulkingType varchar(50) NULL,
	ProcDebulkingStatus varchar(50) NULL,
	ProcDebulkingDetails varchar(2000) NULL,
	ProcIntraOpHIPEC varchar(50) NULL,
	ProcActualNumMassRemain varchar(50) NULL,
	ProcLocLargestMassRemain varchar(50) NULL,
	ProcLargestMassRemainMaxDiam varchar(50) NULL,
	ProcNumOfMassRemain varchar(50) NULL,
	ProcLocLargestMassFound varchar(50) NULL,
	ProcLargestMassFoundMaxDiam varchar(50) NULL,
	ProcSuboptimalReason varchar(255) NULL,
	ProcLargestVisibleMassFoundMaxDiam varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_GynDebulkingProc SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.GynDebulkingProc)
	 EXEC('INSERT INTO dbo.Tmp_GynDebulkingProc (ProcedureId, ProcPercentTumorRemoved, ProcAscitesAmount, ProcDebulkingType, ProcDebulkingStatus, ProcDebulkingDetails, ProcIntraOpHIPEC, ProcActualNumMassRemain, ProcLocLargestMassRemain, ProcLargestMassRemainMaxDiam, ProcNumOfMassRemain, ProcLocLargestMassFound, ProcLargestMassFoundMaxDiam, ProcSuboptimalReason, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT ProcedureId, ProcPercentTumorRemoved, ProcAscitesAmount, ProcDebulkingType, ProcDebulkingStatus, ProcDebulkingDetails, ProcIntraOpHIPEC, ProcActualNumMassRemain, ProcLocLargestMassRemain, ProcLargestMassRemainMaxDiam, ProcNumOfMassRemain, ProcLocLargestMassFound, ProcLargestMassFoundMaxDiam, ProcSuboptimalReason, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.GynDebulkingProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.GynDebulkingProc
GO
EXECUTE sp_rename N'dbo.Tmp_GynDebulkingProc', N'GynDebulkingProc', 'OBJECT' 
GO
ALTER TABLE dbo.GynDebulkingProc ADD CONSTRAINT
	PK_GynDebulkingProc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.GynDebulkingProc ADD CONSTRAINT
	FK_GynDebulkingProc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER [dbo].[trgAuditGynDebulkingProc_UD]
ON dbo.GynDebulkingProc FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_GynDebulkingProc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_GynDebulkingProc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditGynDebulkingProc_UD', N'last', N'update'
GO
COMMIT
GO

--71ModifyTableSpecimenAccessions.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_SpecimenAccessions
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	SpecimenAccessionId int NULL,
	PatientId int NULL,
	PathologyReferenceNumber varchar(50) NULL,
	AccessionProcName varchar(50) NULL,
	AccessionDateText varchar(20) NULL,
	AccessionDate datetime NULL,
	AccessionInstitution varchar(50) NULL,
	AccessionDepartment varchar(50) NULL,
	AccessionTime varchar(10) NULL,
	PathologyLab varchar(50) NULL,
	DateBanked datetime NULL,
	TimeReceivedInLab varchar(10) NULL,
	TimeFrozen varchar(10) NULL,
	HoldingCondition varchar(20) NULL,
	NumberTubesEDTA varchar(10) NULL,
	NumberTubesClotted varchar(10) NULL,
	NumberTubesGel varchar(10) NULL,
	NumberTubesOther varchar(10) NULL,
	NumberTubesOtherType varchar(10) NULL,
	AccessionAnatomicSite varchar(50) NULL,
	AccessionVisitType varchar(50) NULL,
	AccessionProcInstrument varchar(50) NULL,
	AccessionProcInstrumentType varchar(50) NULL,
	AccessionNotes varchar(1000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_SpecimenAccessions SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_SpecimenAccessions)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_SpecimenAccessions (LoggedOperation, LoggedBy, LoggedTime, SpecimenAccessionId, PatientId, PathologyReferenceNumber, AccessionProcName, AccessionDateText, AccessionDate, AccessionInstitution, AccessionDepartment, AccessionTime, PathologyLab, DateBanked, TimeReceivedInLab, TimeFrozen, HoldingCondition, NumberTubesEDTA, NumberTubesClotted, NumberTubesGel, NumberTubesOther, NumberTubesOtherType, AccessionAnatomicSite, AccessionVisitType, AccessionProcInstrument, AccessionNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, SpecimenAccessionId, PatientId, PathologyReferenceNumber, AccessionProcName, AccessionDateText, AccessionDate, AccessionInstitution, AccessionDepartment, AccessionTime, PathologyLab, DateBanked, TimeReceivedInLab, TimeFrozen, HoldingCondition, NumberTubesEDTA, NumberTubesClotted, NumberTubesGel, NumberTubesOther, NumberTubesOtherType, AccessionAnatomicSite, AccessionVisitType, AccessionProcInstrument, AccessionNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_SpecimenAccessions WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_SpecimenAccessions
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_SpecimenAccessions', N'AuditLog_SpecimenAccessions', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_SpecimenAccessions
	(
	SpecimenAccessionId int NOT NULL IDENTITY (1, 1),
	PatientId int NULL,
	PathologyReferenceNumber varchar(50) NULL,
	AccessionProcName varchar(50) NULL,
	AccessionDateText varchar(20) NULL,
	AccessionDate datetime NULL,
	AccessionInstitution varchar(50) NULL,
	AccessionDepartment varchar(50) NULL,
	AccessionTime varchar(10) NULL,
	PathologyLab varchar(50) NULL,
	DateBanked datetime NULL,
	TimeReceivedInLab varchar(10) NULL,
	TimeFrozen varchar(10) NULL,
	HoldingCondition varchar(20) NULL,
	NumberTubesEDTA varchar(10) NULL,
	NumberTubesClotted varchar(10) NULL,
	NumberTubesGel varchar(10) NULL,
	NumberTubesOther varchar(10) NULL,
	NumberTubesOtherType varchar(10) NULL,
	AccessionAnatomicSite varchar(50) NULL,
	AccessionVisitType varchar(50) NULL,
	AccessionProcInstrument varchar(50) NULL,
	AccessionProcInstrumentType varchar(50) NULL,
	AccessionNotes varchar(1000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_SpecimenAccessions SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_SpecimenAccessions ON
GO
IF EXISTS(SELECT * FROM dbo.SpecimenAccessions)
	 EXEC('INSERT INTO dbo.Tmp_SpecimenAccessions (SpecimenAccessionId, PatientId, PathologyReferenceNumber, AccessionProcName, AccessionDateText, AccessionDate, AccessionInstitution, AccessionDepartment, AccessionTime, PathologyLab, DateBanked, TimeReceivedInLab, TimeFrozen, HoldingCondition, NumberTubesEDTA, NumberTubesClotted, NumberTubesGel, NumberTubesOther, NumberTubesOtherType, AccessionAnatomicSite, AccessionVisitType, AccessionProcInstrument, AccessionNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT SpecimenAccessionId, PatientId, PathologyReferenceNumber, AccessionProcName, AccessionDateText, AccessionDate, AccessionInstitution, AccessionDepartment, AccessionTime, PathologyLab, DateBanked, TimeReceivedInLab, TimeFrozen, HoldingCondition, NumberTubesEDTA, NumberTubesClotted, NumberTubesGel, NumberTubesOther, NumberTubesOtherType, AccessionAnatomicSite, AccessionVisitType, AccessionProcInstrument, AccessionNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.SpecimenAccessions WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_SpecimenAccessions OFF
GO
ALTER TABLE dbo.Specimens
	DROP CONSTRAINT FK_Specimens_SpecimenAccessions
GO
DROP TABLE dbo.SpecimenAccessions
GO
EXECUTE sp_rename N'dbo.Tmp_SpecimenAccessions', N'SpecimenAccessions', 'OBJECT' 
GO
ALTER TABLE dbo.SpecimenAccessions ADD CONSTRAINT
	PK_SpecimenAccessions PRIMARY KEY CLUSTERED 
	(
	SpecimenAccessionId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_SpecimenAccessions_PatientId ON dbo.SpecimenAccessions
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE TRIGGER dbo.trgAuditSpecimenAccessions_UD
ON dbo.SpecimenAccessions FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_SpecimenAccessions
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.SpecimenAccessionId = Inserted.SpecimenAccessionId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_SpecimenAccessions
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Specimens WITH NOCHECK ADD CONSTRAINT
	FK_Specimens_SpecimenAccessions FOREIGN KEY
	(
	SpecimenAccessionId
	) REFERENCES dbo.SpecimenAccessions
	(
	SpecimenAccessionId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Specimens SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO

--72ModifyTableMIS_Proc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_MIS_Proc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
	ProcIntent varchar(50) NULL,
	ProcInstrumentUsed varchar(50) NULL,
	ProcNumPorts varchar(50) NULL,
	ProcConversionReason varchar(255) NULL,
	ProcOpenConversion varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_MIS_Proc SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_MIS_Proc)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_MIS_Proc (LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcIntent, ProcInstrumentUsed, ProcNumPorts, ProcConversionReason, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcIntent, ProcInstrumentUsed, ProcNumPorts, ProcConversionReason, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_MIS_Proc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_MIS_Proc
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_MIS_Proc', N'AuditLog_MIS_Proc', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.MIS_Proc
	DROP CONSTRAINT FK_MIS_Proc_Procedures
GO
ALTER TABLE dbo.Procedures SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_MIS_Proc
	(
	ProcedureId int NOT NULL,
	ProcIntent varchar(50) NULL,
	ProcInstrumentUsed varchar(50) NULL,
	ProcNumPorts varchar(50) NULL,
	ProcConversionReason varchar(255) NULL,
	ProcOpenConversion varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_MIS_Proc SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.MIS_Proc)
	 EXEC('INSERT INTO dbo.Tmp_MIS_Proc (ProcedureId, ProcIntent, ProcInstrumentUsed, ProcNumPorts, ProcConversionReason, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT ProcedureId, ProcIntent, ProcInstrumentUsed, ProcNumPorts, ProcConversionReason, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.MIS_Proc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.MIS_Proc
GO
EXECUTE sp_rename N'dbo.Tmp_MIS_Proc', N'MIS_Proc', 'OBJECT' 
GO
ALTER TABLE dbo.MIS_Proc ADD CONSTRAINT
	PK_MIS_Proc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.MIS_Proc ADD CONSTRAINT
	FK_MIS_Proc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER [dbo].[trgAuditMIS_Proc_UD]
ON dbo.MIS_Proc FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_MIS_Proc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_MIS_Proc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditMIS_Proc_UD', N'last', N'update'
GO
COMMIT
GO

--73CreateTableToxAttribution.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.AuditLog_ToxAttribution
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ToxicityId int NULL,
	ToxAttributionId int NULL,
	ToxAttribution varchar(100) NULL,
	ToxAttributionProbability varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.AuditLog_ToxAttribution SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Toxicities SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.ToxAttribution
	(
	ToxicityId int NOT NULL,
	ToxAttributionId int NOT NULL IDENTITY (1, 1),
	ToxAttribution varchar(100) NULL,
	ToxAttributionProbability varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.ToxAttribution ADD CONSTRAINT
	PK_ToxAttribution PRIMARY KEY CLUSTERED 
	(
	ToxAttributionId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_ToxAttribution_ToxicityId ON dbo.ToxAttribution
	(
	ToxicityId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.ToxAttribution ADD CONSTRAINT
	FK_ToxAttribution_Toxicities FOREIGN KEY
	(
	ToxicityId
	) REFERENCES dbo.Toxicities
	(
	ToxicityId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
GO
ALTER TABLE dbo.ToxAttribution SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgAuditToxAttribution_UD]
ON [dbo].[ToxAttribution] FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_ToxAttribution
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ToxAttributionId = Inserted.ToxAttributionId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_ToxAttribution
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
EXEC sp_settriggerorder @triggername=N'[dbo].[trgAuditToxAttribution_UD]', @order=N'Last', @stmttype=N'UPDATE'
GO

--74CreateTableDentalImplantProc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.AuditLog_DentalImplantProc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
	ProcIntraOralSite varchar(255) NULL,
	ProcExtraoralAuricularSite varchar(255) NULL,
	ProcExtraoralNasalSite varchar(255) NULL,
	ProcExtraoralOrbitalSite varchar(255) NULL,
	ProcNumOfImplant varchar(50) NULL,
	ProcImplantSite varchar(50) NULL,
	ProcImplantBrand varchar(50) NULL,
	ProcImplantType varchar(50) NULL,
	ProcImplantDiameter varchar(50) NULL,
	ProcImplantLength varchar(50) NULL,
	ProcBone varchar(50) NULL,
	ProcBoneDescription varchar(255) NULL,
	ProcBoneClassification varchar(50) NULL,
	ProcProsthesis varchar(50) NULL,
	ProcIntraoralType varchar(50) NULL,
	ProcProsthesisDeliveryDate datetime NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.AuditLog_DentalImplantProc SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Procedures SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.DentalImplantProc
	(
	ProcedureId int NOT NULL,
	ProcIntraOralSite varchar(255) NULL,
	ProcExtraoralAuricularSite varchar(255) NULL,
	ProcExtraoralNasalSite varchar(255) NULL,
	ProcExtraoralOrbitalSite varchar(255) NULL,
	ProcNumOfImplant varchar(50) NULL,
	ProcImplantSite varchar(50) NULL,
	ProcImplantBrand varchar(50) NULL,
	ProcImplantType varchar(50) NULL,
	ProcImplantDiameter varchar(50) NULL,
	ProcImplantLength varchar(50) NULL,
	ProcBone varchar(50) NULL,
	ProcBoneDescription varchar(255) NULL,
	ProcBoneClassification varchar(50) NULL,
	ProcProsthesis varchar(50) NULL,
	ProcIntraoralType varchar(50) NULL,
	ProcProsthesisDeliveryDate datetime NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.DentalImplantProc ADD CONSTRAINT
	PK_DentalImplantProc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.DentalImplantProc ADD CONSTRAINT
	FK_DentalImplantProc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
GO
ALTER TABLE dbo.DentalImplantProc SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgAuditDentalImplantProc_UD]
ON [dbo].[DentalImplantProc] FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_DentalImplantProc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_DentalImplantProc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
EXEC sp_settriggerorder @triggername=N'[dbo].[trgAuditDentalImplantProc_UD]', @order=N'Last', @stmttype=N'UPDATE'
GO
--75ModifyTableSurveys.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_Surveys
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PatientId int NULL,
	SurveyId int NULL,
	SurveyDateText varchar(50) NULL,
	SurveyDate datetime NULL,
	SurveyType varchar(255) NULL,
	SurveyResult varchar(50) NULL,
	SurveyTotal varchar(50) NULL,
	SurveyVersion varchar(50) NULL,
	SurveyStatus varchar(50) NULL,
	SurveyNotes varchar(1000) NULL,
	SurveyDataSource varchar(100) NULL,
	SurveyQuality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_Surveys SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_Surveys)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_Surveys (LoggedOperation, LoggedBy, LoggedTime, PatientId, SurveyId, SurveyDateText, SurveyDate, SurveyType, SurveyResult, SurveyTotal, SurveyVersion, SurveyNotes, SurveyDataSource, SurveyQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PatientId, SurveyId, SurveyDateText, SurveyDate, SurveyType, SurveyResult, SurveyTotal, SurveyVersion, SurveyNotes, SurveyDataSource, SurveyQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_Surveys WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_Surveys
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_Surveys', N'AuditLog_Surveys', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Surveys
	DROP CONSTRAINT FK_Surveys_Patients
GO
ALTER TABLE dbo.Patients SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Surveys
	(
	PatientId int NOT NULL,
	SurveyId int NOT NULL IDENTITY (1, 1),
	SurveyDateText varchar(50) NULL,
	SurveyDate datetime NULL,
	SurveyType varchar(255) NULL,
	SurveyResult varchar(50) NULL,
	SurveyTotal varchar(50) NULL,
	SurveyVersion varchar(50) NULL,
	SurveyStatus varchar(50) NULL,
	SurveyNotes varchar(1000) NULL,
	SurveyDataSource varchar(100) NULL,
	SurveyQuality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Surveys SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Surveys ON
GO
IF EXISTS(SELECT * FROM dbo.Surveys)
	 EXEC('INSERT INTO dbo.Tmp_Surveys (PatientId, SurveyId, SurveyDateText, SurveyDate, SurveyType, SurveyResult, SurveyTotal, SurveyVersion, SurveyNotes, SurveyDataSource, SurveyQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PatientId, SurveyId, SurveyDateText, SurveyDate, SurveyType, SurveyResult, SurveyTotal, SurveyVersion, SurveyNotes, SurveyDataSource, SurveyQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.Surveys WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Surveys OFF
GO
ALTER TABLE dbo.SurveyItems
	DROP CONSTRAINT FK_SurveyItems_Surveys
GO
DROP TABLE dbo.Surveys
GO
EXECUTE sp_rename N'dbo.Tmp_Surveys', N'Surveys', 'OBJECT' 
GO
ALTER TABLE dbo.Surveys ADD CONSTRAINT
	PK_Surveys PRIMARY KEY CLUSTERED 
	(
	SurveyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_Surveys_PatientId ON dbo.Surveys
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.Surveys WITH NOCHECK ADD CONSTRAINT
	FK_Surveys_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditSurveys_UD
ON dbo.Surveys FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_Surveys
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.SurveyId = Inserted.SurveyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_Surveys
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditSurveys_UD', N'last', N'update'
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SurveyItems WITH NOCHECK ADD CONSTRAINT
	FK_SurveyItems_Surveys FOREIGN KEY
	(
	SurveyId
	) REFERENCES dbo.Surveys
	(
	SurveyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
GO
ALTER TABLE dbo.SurveyItems SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO

--76ModifyTableGynDebulkingProc.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_GynDebulkingProc
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
	ProcPercentTumorRemoved varchar(50) NULL,
	ProcAscitesAmount varchar(50) NULL,
	ProcDebulkingType varchar(50) NULL,
	ProcDebulkingStatus varchar(50) NULL,
	ProcDebulkingDetails varchar(2000) NULL,
	ProcIntraOpHIPEC varchar(50) NULL,
	ProcActualNumMassRemain varchar(50) NULL,
	ProcLocLargestMassRemain varchar(50) NULL,
	ProcLargestMassRemainMaxDiam varchar(50) NULL,
	ProcNumOfMassRemain varchar(50) NULL,
	ProcLocLargestMassFound varchar(50) NULL,
	ProcLargestMassFoundMaxDiam varchar(50) NULL,
	ProcSuboptimalReason varchar(255) NULL,
	ProcLargestVisibleMassFoundMaxDiam varchar(50) NULL,
	ProcBulkyUpperAbdDisease varchar(50) NULL,
	ProcCarcinomatosis varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_GynDebulkingProc SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_GynDebulkingProc)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_GynDebulkingProc (LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcPercentTumorRemoved, ProcAscitesAmount, ProcDebulkingType, ProcDebulkingStatus, ProcDebulkingDetails, ProcIntraOpHIPEC, ProcActualNumMassRemain, ProcLocLargestMassRemain, ProcLargestMassRemainMaxDiam, ProcNumOfMassRemain, ProcLocLargestMassFound, ProcLargestMassFoundMaxDiam, ProcSuboptimalReason, ProcLargestVisibleMassFoundMaxDiam, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcPercentTumorRemoved, ProcAscitesAmount, ProcDebulkingType, ProcDebulkingStatus, ProcDebulkingDetails, ProcIntraOpHIPEC, ProcActualNumMassRemain, ProcLocLargestMassRemain, ProcLargestMassRemainMaxDiam, ProcNumOfMassRemain, ProcLocLargestMassFound, ProcLargestMassFoundMaxDiam, ProcSuboptimalReason, ProcLargestVisibleMassFoundMaxDiam, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_GynDebulkingProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_GynDebulkingProc
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_GynDebulkingProc', N'AuditLog_GynDebulkingProc', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.GynDebulkingProc
	DROP CONSTRAINT FK_GynDebulkingProc_Procedures
GO
ALTER TABLE dbo.Procedures SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_GynDebulkingProc
	(
	ProcedureId int NOT NULL,
	ProcPercentTumorRemoved varchar(50) NULL,
	ProcAscitesAmount varchar(50) NULL,
	ProcDebulkingType varchar(50) NULL,
	ProcDebulkingStatus varchar(50) NULL,
	ProcDebulkingDetails varchar(2000) NULL,
	ProcIntraOpHIPEC varchar(50) NULL,
	ProcActualNumMassRemain varchar(50) NULL,
	ProcLocLargestMassRemain varchar(50) NULL,
	ProcLargestMassRemainMaxDiam varchar(50) NULL,
	ProcNumOfMassRemain varchar(50) NULL,
	ProcLocLargestMassFound varchar(50) NULL,
	ProcLargestMassFoundMaxDiam varchar(50) NULL,
	ProcSuboptimalReason varchar(255) NULL,
	ProcLargestVisibleMassFoundMaxDiam varchar(50) NULL,
	ProcBulkyUpperAbdDisease varchar(50) NULL,
	ProcCarcinomatosis varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_GynDebulkingProc SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.GynDebulkingProc)
	 EXEC('INSERT INTO dbo.Tmp_GynDebulkingProc (ProcedureId, ProcPercentTumorRemoved, ProcAscitesAmount, ProcDebulkingType, ProcDebulkingStatus, ProcDebulkingDetails, ProcIntraOpHIPEC, ProcActualNumMassRemain, ProcLocLargestMassRemain, ProcLargestMassRemainMaxDiam, ProcNumOfMassRemain, ProcLocLargestMassFound, ProcLargestMassFoundMaxDiam, ProcSuboptimalReason, ProcLargestVisibleMassFoundMaxDiam, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT ProcedureId, ProcPercentTumorRemoved, ProcAscitesAmount, ProcDebulkingType, ProcDebulkingStatus, ProcDebulkingDetails, ProcIntraOpHIPEC, ProcActualNumMassRemain, ProcLocLargestMassRemain, ProcLargestMassRemainMaxDiam, ProcNumOfMassRemain, ProcLocLargestMassFound, ProcLargestMassFoundMaxDiam, ProcSuboptimalReason, ProcLargestVisibleMassFoundMaxDiam, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.GynDebulkingProc WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.GynDebulkingProc
GO
EXECUTE sp_rename N'dbo.Tmp_GynDebulkingProc', N'GynDebulkingProc', 'OBJECT' 
GO
ALTER TABLE dbo.GynDebulkingProc ADD CONSTRAINT
	PK_GynDebulkingProc PRIMARY KEY CLUSTERED 
	(
	ProcedureId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.GynDebulkingProc ADD CONSTRAINT
	FK_GynDebulkingProc_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
GO
CREATE TRIGGER [dbo].[trgAuditGynDebulkingProc_UD]
ON dbo.GynDebulkingProc FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_GynDebulkingProc
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureId = Inserted.ProcedureId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_GynDebulkingProc
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditGynDebulkingProc_UD', N'last', N'update'
GO
COMMIT
GO

--78ModifyTableProtocolMgr_SchemaItems.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProtocolMgr_SchemaItems
	DROP CONSTRAINT FK_ProtocolMgr_SchemaItems_ProtocolMgr_ProtocolSchemas
GO
ALTER TABLE dbo.ProtocolMgr_ProtocolSchemas SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProtocolMgr_SchemaItems
	DROP CONSTRAINT DF_ProtocolMgr_SchemaItems_ItemIsTemplate
GO
CREATE TABLE dbo.Tmp_ProtocolMgr_SchemaItems
	(
	SchemaItemId int NOT NULL IDENTITY (1, 1),
	ProtocolSchemaId int NOT NULL,
	ItemIsTemplate bit NULL,
	ItemDescription varchar(255) NULL,
	ItemOrder int NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_ProtocolMgr_SchemaItems SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_ProtocolMgr_SchemaItems ADD CONSTRAINT
	DF_ProtocolMgr_SchemaItems_ItemIsTemplate DEFAULT ((0)) FOR ItemIsTemplate
GO
SET IDENTITY_INSERT dbo.Tmp_ProtocolMgr_SchemaItems ON
GO
IF EXISTS(SELECT * FROM dbo.ProtocolMgr_SchemaItems)
	 EXEC('INSERT INTO dbo.Tmp_ProtocolMgr_SchemaItems (SchemaItemId, ProtocolSchemaId, ItemIsTemplate, ItemDescription, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT SchemaItemId, ProtocolSchemaId, ItemIsTemplate, ItemDescription, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.ProtocolMgr_SchemaItems WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_ProtocolMgr_SchemaItems OFF
GO
ALTER TABLE dbo.ProtocolMgr_SchemaItemFields
	DROP CONSTRAINT FK_ProtocolMgr_SchemaItemFields_ProtocolMgr_SchemaItems
GO
ALTER TABLE dbo.ProtocolMgr_ItemTimeline
	DROP CONSTRAINT FK_ProtocolMgr_ItemTimeline_ProtocolMgr_SchemaItems
GO
DROP TABLE dbo.ProtocolMgr_SchemaItems
GO
EXECUTE sp_rename N'dbo.Tmp_ProtocolMgr_SchemaItems', N'ProtocolMgr_SchemaItems', 'OBJECT' 
GO
ALTER TABLE dbo.ProtocolMgr_SchemaItems ADD CONSTRAINT
	PK_ProtocolMgr_SchemaItems PRIMARY KEY CLUSTERED 
	(
	SchemaItemId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_ProtocolMgr_SchemaItems_ProtocolSchemaId ON dbo.ProtocolMgr_SchemaItems
	(
	ProtocolSchemaId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.ProtocolMgr_SchemaItems ADD CONSTRAINT
	FK_ProtocolMgr_SchemaItems_ProtocolMgr_ProtocolSchemas FOREIGN KEY
	(
	ProtocolSchemaId
	) REFERENCES dbo.ProtocolMgr_ProtocolSchemas
	(
	ProtocolSchemaId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProtocolMgr_ItemTimeline ADD CONSTRAINT
	FK_ProtocolMgr_ItemTimeline_ProtocolMgr_SchemaItems FOREIGN KEY
	(
	SchemaItemId
	) REFERENCES dbo.ProtocolMgr_SchemaItems
	(
	SchemaItemId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.ProtocolMgr_ItemTimeline SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProtocolMgr_SchemaItemFields ADD CONSTRAINT
	FK_ProtocolMgr_SchemaItemFields_ProtocolMgr_SchemaItems FOREIGN KEY
	(
	SchemaItemId
	) REFERENCES dbo.ProtocolMgr_SchemaItems
	(
	SchemaItemId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.ProtocolMgr_SchemaItemFields SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO

--79ModifyTableDxImageFindingsProstate.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_DxImageFindingsProstate
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	DiagnosticId int NULL,
	DxImageFindingProstateId int NULL,
	ImgFindSide varchar(50) NULL,
	ImgFindLevel varchar(50) NULL,
	ImgFindAP varchar(50) NULL,
	ImgFindZone varchar(50) NULL,
	ImgFindHeight varchar(50) NULL,
	ImgFindWidth varchar(50) NULL,
	ImgFindLength varchar(50) NULL,
	ImgFindResult varchar(50) NULL,
	ImgFindExtension varchar(50) NULL,
	ImgFindLaterality varchar(50) NULL,
	ImgFindStatus varchar(50) NULL,
	ImgFindDistanceToCortex decimal(4,1) NULL,
	ImgFindDistanceToSkin decimal(4,1) NULL,
	ImgFindBoneScanCorrelate varchar(50) NULL,
	ImgFindPETScanCorrelate varchar(50) NULL,
	ImgNotes varchar(1000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_DxImageFindingsProstate SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_DxImageFindingsProstate)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_DxImageFindingsProstate (LoggedOperation, LoggedBy, LoggedTime, DiagnosticId, DxImageFindingProstateId, ImgFindSide, ImgFindLevel, ImgFindAP, ImgFindZone, ImgFindHeight, ImgFindWidth, ImgFindLength, ImgFindResult, ImgFindExtension, ImgFindLaterality, ImgNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, DiagnosticId, DxImageFindingProstateId, ImgFindSide, ImgFindLevel, ImgFindAP, ImgFindZone, ImgFindHeight, ImgFindWidth, ImgFindLength, ImgFindResult, ImgFindExtension, ImgFindLaterality, ImgNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_DxImageFindingsProstate WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_DxImageFindingsProstate
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_DxImageFindingsProstate', N'AuditLog_DxImageFindingsProstate', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageFindingsProstate
	DROP CONSTRAINT FK_DxImageFindingsProstate_Diagnostics
GO
ALTER TABLE dbo.Diagnostics SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_DxImageFindingsProstate
	(
	DiagnosticId int NOT NULL,
	DxImageFindingProstateId int NOT NULL IDENTITY (1, 1),
	ImgFindSide varchar(50) NULL,
	ImgFindLevel varchar(50) NULL,
	ImgFindAP varchar(50) NULL,
	ImgFindZone varchar(50) NULL,
	ImgFindHeight varchar(50) NULL,
	ImgFindWidth varchar(50) NULL,
	ImgFindLength varchar(50) NULL,
	ImgFindResult varchar(50) NULL,
	ImgFindExtension varchar(50) NULL,
	ImgFindLaterality varchar(50) NULL,
	ImgFindStatus varchar(50) NULL,
	ImgFindDistanceToCortex decimal(4,1) NULL,
	ImgFindDistanceToSkin decimal(4,1) NULL,
	ImgFindBoneScanCorrelate varchar(50) NULL,
	ImgFindPETScanCorrelate varchar(50) NULL,
	ImgNotes varchar(1000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_DxImageFindingsProstate SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_DxImageFindingsProstate ON
GO
IF EXISTS(SELECT * FROM dbo.DxImageFindingsProstate)
	 EXEC('INSERT INTO dbo.Tmp_DxImageFindingsProstate (DiagnosticId, DxImageFindingProstateId, ImgFindSide, ImgFindLevel, ImgFindAP, ImgFindZone, ImgFindHeight, ImgFindWidth, ImgFindLength, ImgFindResult, ImgFindExtension, ImgFindLaterality, ImgNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT DiagnosticId, DxImageFindingProstateId, ImgFindSide, ImgFindLevel, ImgFindAP, ImgFindZone, ImgFindHeight, ImgFindWidth, ImgFindLength, ImgFindResult, ImgFindExtension, ImgFindLaterality, ImgNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.DxImageFindingsProstate WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_DxImageFindingsProstate OFF
GO
DROP TABLE dbo.DxImageFindingsProstate
GO
EXECUTE sp_rename N'dbo.Tmp_DxImageFindingsProstate', N'DxImageFindingsProstate', 'OBJECT' 
GO
ALTER TABLE dbo.DxImageFindingsProstate ADD CONSTRAINT
	PK_DxImageFindingsProstate PRIMARY KEY CLUSTERED 
	(
	DxImageFindingProstateId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_DxImageFindingsProstate_DiagnosticId ON dbo.DxImageFindingsProstate
	(
	DiagnosticId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.DxImageFindingsProstate WITH NOCHECK ADD CONSTRAINT
	FK_DxImageFindingsProstate_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditDxImageFindingsProstate_UD
ON dbo.DxImageFindingsProstate FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_DxImageFindingsProstate
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.DxImageFindingProstateId = Inserted.DxImageFindingProstateId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_DxImageFindingsProstate
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditDxImageFindingsProstate_UD', N'last', N'update'
GO
COMMIT
GO

--80ModifyTableSpineProc.sql
GO
EXEC sp_rename 'AuditLog_SpineProc.ProcCementVolumeUnits', 'ProcMISProcedure', 'COLUMN'
EXEC sp_rename 'AuditLog_SpineProc.ProcInflationPressureUnits', 'ProcGraftMaterialUsed', 'COLUMN'
GO
ALTER TABLE AuditLog_SpineProc ALTER COLUMN ProcGraftMaterialUsed varchar(255)
GO
EXEC sp_rename 'SpineProc.ProcCementVolumeUnits', 'ProcMISProcedure', 'COLUMN'
EXEC sp_rename 'SpineProc.ProcInflationPressureUnits', 'ProcGraftMaterialUsed', 'COLUMN'
GO
ALTER TABLE SpineProc ALTER COLUMN ProcGraftMaterialUsed varchar(255)
GO

--81ModifyTablePancreasProc.sql
GO
--resize column
ALTER TABLE AuditLog_PancreasProc ALTER COLUMN ProcLaparotomyIncision varchar(100)
ALTER TABLE PancreasProc ALTER COLUMN ProcLaparotomyIncision varchar(100)
GO

--82ModifyTableBreastPath.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_BreastPath
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PathologyId int NULL,
	PathMargin varchar(50) NULL,
	PathSuperiorMargin varchar(50) NULL,
	PathInferiorMargin varchar(50) NULL,
	PathAnteriorMargin varchar(50) NULL,
	PathPosteriorMargin varchar(50) NULL,
	PathIntraductal varchar(50) NULL,
	PathMultifocal varchar(50) NULL,
	PathLocation varchar(50) NULL,
	PathLocation2 varchar(50) NULL,
	PathExtension varchar(50) NULL,
	PathNumFociCancer varchar(50) NULL,
	PathNucPleo varchar(50) NULL,
	PathTubForm varchar(50) NULL,
	PathMitIdx varchar(50) NULL,
	PathTumorMaxDim varchar(50) NULL,
	PathAngloInv varchar(50) NULL,
	PathLymphaticInv varchar(50) NULL,
	PathVascularInv varchar(50) NULL,
	PathPerineuralInv varchar(50) NULL,
	PathAssInSitu varchar(50) NULL,
	PathExtentInSitu varchar(50) NULL,
	PathNuclearGrade varchar(50) NULL,
	PathInSituNecrosis varchar(50) NULL,
	PathCalcifications varchar(50) NULL,
	PathBenign varchar(50) NULL,
	PathNumReExcision varchar(50) NULL,
	PathNumPositiveMargins varchar(50) NULL,
	PathOverallGrade varchar(50) NULL,
	PathMulticentric varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_BreastPath SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_BreastPath)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_BreastPath (LoggedOperation, LoggedBy, LoggedTime, PathologyId, PathMargin, PathSuperiorMargin, PathInferiorMargin, PathAnteriorMargin, PathPosteriorMargin, PathIntraductal, PathMultifocal, PathLocation, PathLocation2, PathExtension, PathNumFociCancer, PathNucPleo, PathTubForm, PathMitIdx, PathTumorMaxDim, PathAngloInv, PathLymphaticInv, PathVascularInv, PathPerineuralInv, PathAssInSitu, PathExtentInSitu, PathNuclearGrade, PathInSituNecrosis, PathCalcifications, PathBenign, PathNumReExcision, PathNumPositiveMargins, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PathologyId, PathMargin, PathSuperiorMargin, PathInferiorMargin, PathAnteriorMargin, PathPosteriorMargin, PathIntraductal, PathMultifocal, PathLocation, PathLocation2, PathExtension, PathNumFociCancer, PathNucPleo, PathTubForm, PathMitIdx, PathTumorMaxDim, PathAngloInv, PathLymphaticInv, PathVascularInv, PathPerineuralInv, PathAssInSitu, PathExtentInSitu, PathNuclearGrade, PathInSituNecrosis, PathCalcifications, PathBenign, PathNumReExcision, PathNumPositiveMargins, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_BreastPath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_BreastPath
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_BreastPath', N'AuditLog_BreastPath', 'OBJECT' 
GO
COMMIT
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.BreastPath
	DROP CONSTRAINT FK_BreastPath_Pathology
GO
ALTER TABLE dbo.Pathology SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_BreastPath
	(
	PathologyId int NOT NULL,
	PathMargin varchar(50) NULL,
	PathSuperiorMargin varchar(50) NULL,
	PathInferiorMargin varchar(50) NULL,
	PathAnteriorMargin varchar(50) NULL,
	PathPosteriorMargin varchar(50) NULL,
	PathIntraductal varchar(50) NULL,
	PathMultifocal varchar(50) NULL,
	PathLocation varchar(50) NULL,
	PathLocation2 varchar(50) NULL,
	PathExtension varchar(50) NULL,
	PathNumFociCancer varchar(50) NULL,
	PathNucPleo varchar(50) NULL,
	PathTubForm varchar(50) NULL,
	PathMitIdx varchar(50) NULL,
	PathTumorMaxDim varchar(50) NULL,
	PathAngloInv varchar(50) NULL,
	PathLymphaticInv varchar(50) NULL,
	PathVascularInv varchar(50) NULL,
	PathPerineuralInv varchar(50) NULL,
	PathAssInSitu varchar(50) NULL,
	PathExtentInSitu varchar(50) NULL,
	PathNuclearGrade varchar(50) NULL,
	PathInSituNecrosis varchar(50) NULL,
	PathCalcifications varchar(50) NULL,
	PathBenign varchar(50) NULL,
	PathNumReExcision varchar(50) NULL,
	PathNumPositiveMargins varchar(50) NULL,
	PathOverallGrade varchar(50) NULL,
	PathMulticentric varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_BreastPath SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.BreastPath)
	 EXEC('INSERT INTO dbo.Tmp_BreastPath (PathologyId, PathMargin, PathSuperiorMargin, PathInferiorMargin, PathAnteriorMargin, PathPosteriorMargin, PathIntraductal, PathMultifocal, PathLocation, PathLocation2, PathExtension, PathNumFociCancer, PathNucPleo, PathTubForm, PathMitIdx, PathTumorMaxDim, PathAngloInv, PathLymphaticInv, PathVascularInv, PathPerineuralInv, PathAssInSitu, PathExtentInSitu, PathNuclearGrade, PathInSituNecrosis, PathCalcifications, PathBenign, PathNumReExcision, PathNumPositiveMargins, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT PathologyId, PathMargin, PathSuperiorMargin, PathInferiorMargin, PathAnteriorMargin, PathPosteriorMargin, PathIntraductal, PathMultifocal, PathLocation, PathLocation2, PathExtension, PathNumFociCancer, PathNucPleo, PathTubForm, PathMitIdx, PathTumorMaxDim, PathAngloInv, PathLymphaticInv, PathVascularInv, PathPerineuralInv, PathAssInSitu, PathExtentInSitu, PathNuclearGrade, PathInSituNecrosis, PathCalcifications, PathBenign, PathNumReExcision, PathNumPositiveMargins, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.BreastPath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.BreastPath
GO
EXECUTE sp_rename N'dbo.Tmp_BreastPath', N'BreastPath', 'OBJECT' 
GO
ALTER TABLE dbo.BreastPath ADD CONSTRAINT
	PK_BreastPath PRIMARY KEY CLUSTERED 
	(
	PathologyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.BreastPath WITH NOCHECK ADD CONSTRAINT
	FK_BreastPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
CREATE TRIGGER dbo.trgAuditBreastPath_UD
ON dbo.BreastPath FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_BreastPath
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.PathologyId = Inserted.PathologyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_BreastPath
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO
EXEC sp_settriggerorder @triggername=N'[dbo].[trgAuditBreastPath_UD]', @order=N'Last', @stmttype=N'UPDATE'
GO

--83ModifyTableSurveys.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_Surveys
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PatientId int NULL,
	SurveyId int NULL,
	SurveyDateText varchar(50) NULL,
	SurveyDate datetime NULL,
	SurveyType varchar(255) NULL,
	SurveyResult varchar(50) NULL,
	SurveyTotal varchar(50) NULL,
	SurveyVersion varchar(50) NULL,
	SurveyStatus varchar(50) NULL,
	SurveyClinician varchar(50) NULL,
	SurveyNotes varchar(1000) NULL,
	SurveyDataSource varchar(100) NULL,
	SurveyQuality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_Surveys SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_Surveys)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_Surveys (LoggedOperation, LoggedBy, LoggedTime, PatientId, SurveyId, SurveyDateText, SurveyDate, SurveyType, SurveyResult, SurveyTotal, SurveyVersion, SurveyStatus, SurveyNotes, SurveyDataSource, SurveyQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PatientId, SurveyId, SurveyDateText, SurveyDate, SurveyType, SurveyResult, SurveyTotal, SurveyVersion, SurveyStatus, SurveyNotes, SurveyDataSource, SurveyQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_Surveys WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_Surveys
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_Surveys', N'AuditLog_Surveys', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Surveys
	DROP CONSTRAINT FK_Surveys_Patients
GO
ALTER TABLE dbo.Patients SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Surveys
	(
	PatientId int NOT NULL,
	SurveyId int NOT NULL IDENTITY (1, 1),
	SurveyDateText varchar(50) NULL,
	SurveyDate datetime NULL,
	SurveyType varchar(255) NULL,
	SurveyResult varchar(50) NULL,
	SurveyTotal varchar(50) NULL,
	SurveyVersion varchar(50) NULL,
	SurveyStatus varchar(50) NULL,
	SurveyClinician varchar(50) NULL,
	SurveyNotes varchar(1000) NULL,
	SurveyDataSource varchar(100) NULL,
	SurveyQuality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Surveys SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Surveys ON
GO
IF EXISTS(SELECT * FROM dbo.Surveys)
	 EXEC('INSERT INTO dbo.Tmp_Surveys (PatientId, SurveyId, SurveyDateText, SurveyDate, SurveyType, SurveyResult, SurveyTotal, SurveyVersion, SurveyStatus, SurveyNotes, SurveyDataSource, SurveyQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PatientId, SurveyId, SurveyDateText, SurveyDate, SurveyType, SurveyResult, SurveyTotal, SurveyVersion, SurveyStatus, SurveyNotes, SurveyDataSource, SurveyQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.Surveys WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Surveys OFF
GO
ALTER TABLE dbo.SurveyItems
	DROP CONSTRAINT FK_SurveyItems_Surveys
GO
DROP TABLE dbo.Surveys
GO
EXECUTE sp_rename N'dbo.Tmp_Surveys', N'Surveys', 'OBJECT' 
GO
ALTER TABLE dbo.Surveys ADD CONSTRAINT
	PK_Surveys PRIMARY KEY CLUSTERED 
	(
	SurveyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_Surveys_PatientId ON dbo.Surveys
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.Surveys WITH NOCHECK ADD CONSTRAINT
	FK_Surveys_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditSurveys_UD
ON dbo.Surveys FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_Surveys
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.SurveyId = Inserted.SurveyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_Surveys
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditSurveys_UD', N'last', N'update'
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SurveyItems WITH NOCHECK ADD CONSTRAINT
	FK_SurveyItems_Surveys FOREIGN KEY
	(
	SurveyId
	) REFERENCES dbo.Surveys
	(
	SurveyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 	
GO
ALTER TABLE dbo.SurveyItems SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO

--84ModifyTableLabTests.sql
GO
--Add column
ALTER TABLE AuditLog_LabTests ADD LabClinicalSignificance varchar(50)
ALTER TABLE LabTests ADD LabClinicalSignificance varchar(50)
GO

--85ModifyspGetPatientHPI.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spGetPatientHPI]
   @PatientId int = NULL,
   @NomogramResults bit = 0,  --retired
   @NomogramValues bit = 0,   --retired
   @EForm bit = 0,
   @Rowcount int = NULL OUTPUT
AS
--Procedure returns HPI as a select statement instead of output parameter for flexibility
SET NOCOUNT ON

--These variables are for debuging / testing speed
DECLARE @starttime datetime
DECLARE @stoptime datetime
Declare @strDebug varchar(8000)
--End of Debug variables

DECLARE @strPatientHPI     varchar(500)
DECLARE @strDate           varchar(50)
DECLARE @strStopDate       varchar(50)
DECLARE @dteDate           datetime
DECLARE @strVariable       varchar(50)
DECLARE @strValue          varchar(255)
DECLARE @strDataQuality    varchar(50)
DECLARE @intPrimaryKey     int
DECLARE @strTableName      varchar(50)
DECLARE @i                 int
DECLARE @blnPreTx          bit
DECLARE @blnValidPSA       bit
DECLARE @sngTime           float(24) --VBA single float(53) double
DECLARE @BiopsyDate        datetime
DECLARE @BiopsyDays        float(24) -- number of days after prostate biopsy that PSA is invalid
DECLARE @strOutPut         varchar(500)

--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'
SET @BiopsyDate = @MISSING_DATE
SET @BiopsyDays = 21

--Clinical states constants (must be ordered)
DECLARE @NO_PROSTATE_CANCER_DIAGNOSIS smallint
DECLARE @LOCALIZED                    smallint
DECLARE @RISING_PSA_NON_CASTRATE      smallint
DECLARE @RISING_PSA_CASTRATE          smallint
DECLARE @NON_CASTRATE_METS            smallint
DECLARE @CASTRATE_METS                smallint
DECLARE @DEAD                         smallint
SET @NO_PROSTATE_CANCER_DIAGNOSIS = 0
SET @LOCALIZED = 1
SET @RISING_PSA_NON_CASTRATE = 2
SET @RISING_PSA_CASTRATE = 3
SET @NON_CASTRATE_METS = 4   
SET @CASTRATE_METS = 5  
SET @DEAD = 6

--This is used to determine castrate clinical states
DECLARE @CASTRATE_TESTOSTERONE_LEVEL smallint
SET @CASTRATE_TESTOSTERONE_LEVEL = 50

DECLARE @ClinStateDate    datetime        --date of last clinical state transition
DECLARE @ClinStateDteText varchar(50)     --datetext of last clinical state transition
DECLARE @ClinState        int             --current clinical state (0 to 5)
DECLARE @Castrate         bit             --castrate levels of testosterone (<50)
DECLARE @DxBiopsyID       int             --primary key for diagnostic biopsy record
DECLARE @DxBxDate         datetime        --date of diagnostic (first positive) biopsy
DECLARE @DxBxDateText     varchar(50)     --datetext of diagnostic (first positive) biopsy
DECLARE @DxBxType         varchar(50)     --diagnostic biopsy type: TURP or needle
DECLARE @DxBxSummary      varchar(50)     --pathologic summary of diagnostic biopsy: eg. 3+4
DECLARE @DxBxQuality      varchar(50)     --data quality for diagnostic biopsy
DECLARE @PreTxPSA         float(24)       --valid PSA before any "curative" treatment (XRT or RP)
DECLARE @PreTxPSADate     datetime 
DECLARE @ClinStageDate	  datetime 
DECLARE @ClinStageSystem  varchar(50)     --UICC TNM staging system used
DECLARE @ClinStageT       varchar(50)     --pre-treatment UICC Tumor Stage
DECLARE @ClinStageN       varchar(50)     --pre-treatment UICC Nodes Stage
DECLARE @ClinStageM       varchar(50)     --pre-treatment UICC Metastatis Stage
DECLARE @ClinStageQuality varchar(50)     --data quality of clinical staging data
DECLARE @NeoAdjHormTx     varchar(50)     --patient has had neo-adjuvant hormone therapy
DECLARE @NeoAdjHormTxDate datetime        --date of first hormone therapy (all PSAs after this are invalid?)
DECLARE @NeoAdjRadTx      varchar(50)     --patient has had neo-adjuvant radiation therapy
DECLARE @NeoAdjRadTxDate  datetime        --date of last neo-adjuvant radiation therapy (all following pre-tx PSAs are invalid)
DECLARE @NeoAdjChemoTx    varchar(50)     --patient has had neo-adjuvant chemotherapy
DECLARE @NeoAdjChemoDate  datetime        --date of last neo-adjuvant chemotherapy
--DECLARE @Prostatectomy    bit           --patient had prostatectomy (means he will always use RP PSA recurrence methods)
--DECLARE @ActiveSurId      int           --primary key of Active Surveillance status record

DECLARE @TxDate           datetime        --date of first "curative" treatment
DECLARE @TxType           varchar(50)     --curative treatment type
DECLARE @AdjHormTx        varchar(50)
DECLARE @AdjChemoTx       varchar(50)
--DECLARE @NumPSAs          int --number of PSAs after curative treatment
DECLARE @EOD              varchar(50)     --last extent of disease 
DECLARE @LastPSA_Value    varchar(50)
DECLARE @LastPSA_Date     datetime   

DECLARE @HormEvent        varchar(50)
DECLARE @HormTxDate       datetime
DECLARE @MetsEvent        varchar(50)
DECLARE @ChemoTxDate      datetime

--used for eform
DECLARE @strTableNames     varchar(200)
DECLARE @strPrimaryKeys    varchar(50)
DECLARE @strVarDelimited   varchar(500)
DECLARE @ClinStageID       int             --primary key for diagnostic clinical stage record
DECLARE @PreTxPSAID        int             --primary key for pre prostatectomy psa record
DECLARE @ClinStateID       int             --primary key for clin state record
DECLARE @ClinStateTable    varchar(50)     --table name where clin state obtained from
DECLARE @blnHadRP          bit             --patient had prostatectomy
DECLARE @ProstatePathId    int             --primary key for ProstatectomyPath record
DECLARE @PLNDProcId        int             --primary key for Procedure PLND record


--used for eform
SET @strTableNames    = ''
SET @strPrimaryKeys   = ''
SET @strVarDelimited  = ''

SET @ClinStateDate    = @MISSING_DATE
SET @ClinStateDteText = ''
SET @ClinState        = @NO_PROSTATE_CANCER_DIAGNOSIS
SET @Castrate         = 0
SET @DxBxDate         = @MISSING_DATE
SET @DxBxDateText     = ''
SET @DxBxType         = ''
SET @DxBxSummary      = ''
SET @DxBxQuality      = ''
SET @PreTxPSA         = @MISSING_NUMBER
SET @PreTxPSADate     = @MISSING_DATE
SET @ClinStageDate    = @MISSING_DATE
SET @ClinStageSystem  = ''
SET @ClinStageT       = ''
SET @ClinStageN       = ''
SET @ClinStageM       = ''
SET @ClinStageQuality = ''
SET @NeoAdjHormTx     = 0
SET @NeoAdjHormTxDate = @MISSING_DATE
SET @NeoAdjRadTx      = 0
SET @NeoAdjRadTxDate  = @MISSING_DATE
SET @NeoAdjChemoTx    = 0
SET @NeoAdjChemoDate  = @MISSING_DATE
SET @HormTxDate       = @MISSING_DATE
SET @ChemoTxDate      = @MISSING_DATE
SET @blnHadRP         = 0
SET @TxDate           = @MISSING_DATE
SET @TxType           = ''
--SET @NumPSAs          = 0
SET @EOD              = ''
SET @LastPSA_Value    = @MISSING_NUMBER
SET @LastPSA_Date     = @MISSING_DATE
SET @MetsEvent        = ''
SET @HormEvent        = ''
 
DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate              datetime NULL,
   VarString             varchar(500) NULL,
   VarDelimited          varchar(500) NULL,
   TableNames            varchar(200) NULL,
   PrimaryKeys           varchar(50) NULL
   )

DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarValue
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarValue     varchar(255) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   VarStopDate  varchar(50) NULL,
   TableName    varchar(50) NULL,
   PrimaryKey   int NOT NULL
   )

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, CAST(dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) as varchar(255)), ISNULL(PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN ProstateBiopsyPath ON Pathology.PathologyId=ProstateBiopsyPath.PathologyId
WHERE Procedures.PatientId = @PatientId AND 
      ProcSite='Prostate' AND ProcName IN('TURP','TRUS Biopsy','Biopsy','Needle Biopsy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ClinStageDateText, ClinStageSystem, ClinStageT, ClinStageQuality, ClinStageDate, 'ClinicalStages', ClinicalStageId
FROM ClinicalStages
WHERE (ClinicalStages.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT DxDateText, DxType, DxResult, DxQuality, DxDate,  'Diagnostics', DiagnosticId
FROM Diagnostics
WHERE (Diagnostics.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT LabDateText, LabTest, LabResult, LabQuality, LabDate, 'LabTests', LabTestId
FROM LabTests
WHERE (LabTests.PatientId = @PatientId AND LabTest IN ('PSA','PSAUS','TEST') AND LabResult IS NOT NULL)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT MedTxDateText, MedTxType, MedTxAgent, MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId
FROM MedicalTherapy
WHERE (MedicalTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy'), LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy'), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName = 'Orchiectomy'

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'Nephrectomy', ISNULL(ProcName,'Nephrectomy') + ISNULL(' '+ProcSide,''), ProcQuality, ProcDate, 'Procedures',Procedures.ProcedureId
FROM Procedures
WHERE PatientId = @PatientId AND ProcName IN('Nephrectomy','Partial Nephrectomy','Laparoscopic Nephroureterectomy','Partial for Horshoe Kidney','Laparoscopic Partial Nephrectomy','Nephroureterectomy','Laparoscopic Radical Nephrectomy','Radical Nephrectomy','Exploratory Laparotomy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'RPLND', RTRIM('RPLND ' + ISNULL(ProcApproach,'')), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName = 'RPLND'

--Added Rank in case need to use top 1 clause to return only the best row version
INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, RPSummary, DataQuality, ProcDate, TableName, ProcedureId
FROM 
(
SELECT ProcDateText, ISNULL(ProcName,'Prostatectomy') ProcName,
       dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(PathQuality,ProcQuality)) + ' (' + 
       dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(PathQuality,ProcQuality))+ ')' + ' (' + ISNULL(PathQuality,ProcQuality) + ')' RPSummary, 
       ISNULL(PathQuality,ProcQuality) DataQuality, ProcDate,  'Procedures' TableName, Procedures.ProcedureId,
       CASE PathQuality WHEN 'OUT' THEN 1 
                        WHEN 'REV' THEN 2
                        WHEN 'STD' THEN 3
                        WHEN 'RR' THEN 4
                        ELSE 0
       END RP_RANK
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN ProstatectomyPath ON ProstatectomyPath.PathologyId = Pathology.PathologyId
WHERE Procedures.PatientId = @PatientId AND ProcName IN('CP','LP','LP_CONV','PP','RALP','RP','SalvCP','SalvLP','SalvRP')
) a 
ORDER BY ProcDate DESC, RP_RANK DESC

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,'Cystectomy', ISNULL(ProcName,'Cystectomy'),ProcQuality,ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName IN('Cystectomy','CP','Cysto-Prostatectomy','Partial Cystectomy','Radical Cystectomy','Salvage Radical Cystectomy')
      AND Procedures.ProcedureId NOT IN (SELECT PrimaryKey FROM @ChronoTable WHERE TableName='Procedures')

--procedures not in the current list
INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, NULL, ProcQuality, ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN 
                (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT RadTxDateText, RadTxType, RadTxTotalDose, RadTxQuality, RadTxDate,RadTxStopDateText, 'RadiationTherapy', RadiationTherapyId
FROM RadiationTherapy
WHERE (RadiationTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT BrachyDateText,'Brachytherapy',BrachyIsotope,BrachyQuality,BrachyDate,'BrachyTherapy',PatientId
FROM BrachyTherapy
WHERE (BrachyTherapy.PatientId = @PatientId AND ISNULL(BrachyPending,0)=0)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT StatusDateText, 'Status', status, statusQuality, statusDate, 'Status', statusId
FROM Status
WHERE (Status.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT PtDeathDateText, 'Status', PtDeathType, Null, PtDeathDate, 'Patients', PatientID
FROM Patients
WHERE (PtDeathDate IS NOT NULL) AND (PatientID=@PatientID)

--Clean up local variables for each record fetched
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarValue = ''
WHERE VarValue IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarValue = dbo.fnPacManStr(VarValue)
WHERE TableName = 'LabTests' AND ISNUMERIC(VarValue)=0
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL

--SELECT * FROM @ChronoTable ORDER BY SortDate
SET @strOutPut = ''
SET @strPatientHPI = ''
DECLARE tables_cursor CURSOR LOCAL FAST_FORWARD
   FOR
   SELECT VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,PrimaryKey,TableName
   FROM @ChronoTable
   ORDER BY SortDate ASC
OPEN tables_cursor
IF CURSOR_STATUS ('local','tables_cursor') = 1
BEGIN
   --SET @starttime= GETDATE()
   --SET @strDebug= 'START ' + CAST(@starttime as varchar)
   FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@intPrimaryKey,@strTableName
   WHILE (@@FETCH_STATUS <> -1)
   BEGIN  
      --DETERMINE if record is pre-treatment assume record is not pre-treatment
      SET @blnPreTx = 0
      IF @dteDate IS NULL 
         SET @blnPreTx = 1
      ELSE IF @TxDate = @MISSING_DATE
         SET @blnPreTx = 1
      ELSE IF @dteDate = @TxDate
         SET @blnPreTx = 1     

      -- PSA
      IF @strVariable IN('PSA','PSAUS')
      BEGIN
         --accomodate <,>, <=, >=
         --SET @strValue = dbo.fnPacManStr(@strValue) --not need cause of update statement        
         IF ISNUMERIC(@strValue) = 1
         BEGIN
            SET @blnValidPSA = 1
            -- PSA invalid if patient on hormone therapy
            IF (@blnPreTx = 1 AND @NeoAdjHormTx <> '') OR (@AdjHormTx <> '') OR (@HormEvent <> '')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@HormTxDate = @MISSING_DATE) OR (@dteDate > @HormTxDate)
                     SET @blnValidPSA = 0

            -- PSA invalid if patient on chemotherapy
            IF (@blnPreTx = 1 AND @NeoAdjChemoTx <> '') OR (@AdjChemoTx <> '') OR (@MetsEvent LIKE '%CHEMO%')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@ChemoTxDate = @MISSING_DATE) OR (@dteDate > @ChemoTxDate)
                     SET @blnValidPSA = 0

            -- PSAs invalid within specified days after prostate biopsy
            IF @BiopsyDate <> @MISSING_DATE AND @dteDate IS NOT NULL
               IF @dteDate > @BiopsyDate
                  IF (@dteDate - @BiopsyDate) < @BiopsyDays
                     SET @blnValidPSA = 0

            -- find valid pre-treatment PSA 
            IF @blnValidPSA = 1   
               IF @blnPreTx = 1
               BEGIN
                  IF NOT (@dteDate IS NULL AND @PreTxPSA <> @MISSING_NUMBER AND @PreTxPSA > CAST(@strValue AS float(24)))
                     BEGIN
                        SET @PreTxPSA = CAST(@strValue AS float(24))
                        IF @EForm=1
                           SET @PreTxPSAID = @intPrimaryKey --used for eform
                     END 
                  IF @dteDate IS NOT NULL
                     SET @PreTxPSADate = @dteDate
               END
               ELSE
                  SET @LastPSA_Value = @strValue
               IF @dteDate IS NOT NULL
                  SET @LastPSA_Date = @dteDate
         END 
      END
      ELSE
      -- Prostate Biopsy
      IF @strVariable IN('NEEDLE BIOPSY','BIOPSY','TURP','TRUS Biopsy') --dbo.fnIsBiopsyProstate (@strVariable)= 1
      BEGIN
         -- which biopsy is the diagnostic biopsy?
         -- save date to check for PSAs within 3 weeks of biopsy
         IF @blnPreTx = 1
            IF @dteDate IS NOT NULL
            BEGIN
               SET @BiopsyDate = @dteDate
               -- diagnostic biopsy is first positive biopsy
               -- but if ther are later pre-tx grades, use them
               IF @strValue <> '' AND @strValue NOT IN('NEG','PIN','ASAP','Negative') --dbo.fnIsAbnormalBiopsyProstate (@strValue) = 1
                  IF @DxBxDate = @MISSING_DATE OR 
                                 (@strDataQuality='RR' AND @DxBxQuality <> 'RR' AND @DxBxDate = @dteDate) OR 
                                 (@strDataQuality IN('STD','REV') AND @DxBxQuality = 'OUT' AND @DxBxDate = @dteDate)
                  BEGIN
                     SET @DxBxType = @strVariable
                     SET @DxBxDate = @dteDate
                     SET @DxBxDateText = @strDate
                     SET @DxBxSummary = @strValue + ' (' + @strDataQuality + ')'
                     SET @DxBxQuality = @strDataQuality
	                  SET @DxBiopsyID = @intPrimaryKey --for paper form
                     -- move the clinical state forward
                     IF @ClinState < @LOCALIZED
                     BEGIN
                        SET @ClinState = @LOCALIZED
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                        IF @EForm=1
                           BEGIN
                              SET @ClinStateID = @intPrimaryKey
                              SET @ClinStateTable = @strTableName
                           END                           
                     END
                  END
            END         
      END   -- does not deal with post-curative treatment (RP, XRT) biopsies
      ELSE
      -- UICC/AJCC Clinical Tumor Stage
      IF @strVariable IN('UICC_92','UICC_97','UICC_02')
      BEGIN
         IF @blnPreTx = 1 AND @strValue <> ''
            If @strDataQuality = 'RR' OR @ClinStageQuality <> 'RR'
            BEGIN
               IF @dteDate IS NOT NULL
               BEGIN
	               SET @ClinStageDate = @dteDate            
	               SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
	               SET @ClinStageQuality = @strDataQuality
                  SELECT @ClinStageN = ClinStageN, @ClinStageM = ClinStageM
                  FROM ClinicalStages WHERE ClinicalStageId = @intPrimaryKey
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey --used for eform
	            END
	            ELSE IF @strValue > @ClinStageT
	            BEGIN
		            -- don't need to copy date b/c all nulls sort to top
         		   SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
	               SET @ClinStageQuality = @strDataQuality
                  SELECT @ClinStageN = ClinStageN, @ClinStageM = ClinStageM
                  FROM ClinicalStages WHERE ClinicalStageId = @intPrimaryKey
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey --used for eform
               END
            END       
      END
      ELSE
      BEGIN   
         -- Chemotherapy (NOT AN ELSE b/c of combination therapies)
         IF (@strVariable LIKE '%CHEMO%') AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @ChemoTxDate = @MISSING_DATE
                  SET @ChemoTxDate = @dteDate
   
            IF @blnPreTx = 1
               SET @NeoAdjChemoTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjChemoTx = @strVariable
               -- assumes any chemo after treatment indicates metastasis
               SET @MetsEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' ' 
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               IF @EForm=1
                  INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
               ELSE
                  INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
               SET @strOutput = ''   
         END
         -- Hormone Therapy (NOT AN ELSE b/c of combination therapies)
         IF ((@strVariable LIKE '%HORM%')
            OR (@strVariable = 'ORCH')
            OR (@strVariable ='Bilateral Orchiectomy')
            OR (@strVariable LIKE 'ORCH_BIL%')
            OR (@strVariable LIKE '%LHRH%')
            OR (@strVariable LIKE '%AA%')
            OR (@strVariable LIKE '%ESTROGEN%')
            OR (@strVariable LIKE '%PROGEST%'))
            AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @HormTxDate = @MISSING_DATE
                  SET @HormTxDate = @dteDate
            IF @blnPreTx = 1
               SET @NeoAdjHormTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjHormTx = @strVariable
               SET @HormEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' '  
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               --prevent the same record from being inserted again need a better way
               IF NOT EXISTS(SELECT SortDate FROM @SortTable WHERE SortDate=@dteDate AND VarString=@strOutput)
                  BEGIN
                     IF @EForm=1                  
                        INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
                     ELSE
                        INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)                        
                  END
               SET @strOutput = ''   
         END 
      END    
      --Testosterone
      IF @strVariable LIKE 'TEST%' 
      --look for castrate levels of testosterone
      BEGIN 
        IF ISNUMERIC(@strValue) = 1
           IF CAST(@strValue As float(24)) < @CASTRATE_TESTOSTERONE_LEVEL
              SET @Castrate = 1     
      END
      --check if castrated
      IF @strVariable IN ('ORCH_BIL','Bilateral Orchiectomy')
         SET @Castrate = 1
      --Diagnostics Imaging
      --these should be positive diagnostics for metastasis
      --what exactly is positive?
      --should it require specifying extent of disease?
      --should CT and MRI be confirmed by LN_BX?
      --should BS or PET be confirmed by BONE_BX?
      --add target latter so can use other scan types?
      IF @strVariable IN('BS','Bone Scan','BONE_BX','LN_BX') --('PET','PET Scan','XRAY','X-RAY','RADIOGRPH',)  
            --OR @strVariable LIKE 'CT%' OR @strVariable LIKE '%MRI%'--dbo.fnIsDiagnostic(@strVariable) = 1
      BEGIN
         IF @strValue LIKE 'POS%' OR 
            @strValue LIKE 'ABN_P%' OR 
            @strValue LIKE 'ABN_MAL%' OR
            @strValue='Abnormal Malignant' OR
            @strValue='Abnormal'	OR
            @strValue='Abnormal Prostate'--dbo.fnIsAbnormalDiagnostic(@strValue) = 1
            IF @ClinState < @NON_CASTRATE_METS
            BEGIN
               IF @Castrate = 1
                  BEGIN
                     SET @ClinState = @CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                  END
               ELSE
                  BEGIN
                     SET @ClinState = @NON_CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                  END
               IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
            END
      END
      ELSE
      -- Radiation Therapy
      IF @strVariable IN('XRT','EBRT','RT','COMBO','BRACHY','COMBO','RADIOISOTOPE','SEED'
                        ,'IMPLANT','Brachytherapy',
                        'External Beam','Radiation Therapy, Unspecified','External Beam, IMRT',
                        'High-Dose Rate Brachytherapy','External Beam, 3D Conventional',
                        'External Beam, 3D Conformal') --dbo.fnIsRadiationtherapy(@strVariable) = 1 OR dbo.fnIsBrachytherapy(@strVariable)= 1
      BEGIN
         IF @ClinState < @LOCALIZED
         BEGIN
            SET @ClinState = @LOCALIZED
            IF @EForm=1
               BEGIN
                  SET @ClinStateID = @intPrimaryKey
                  SET @ClinStateTable = @strTableName
               END   
            IF @dteDate IS NOT NULL
               BEGIN
                  SET @ClinStateDate = @dteDate
                  SET @ClinStateDteText = @strDate
               END
         END
         IF @blnPreTx = 1
            BEGIN 
               SET @NeoAdjRadTx = @strVariable
               IF @dteDate IS NOT NULL
                  SET @TxDate = @dteDate
            END
         SET @strOutput = @strOutput + @strDate + ' '
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         SET @strOutput = @strOutput + @strVariable + ' ' + @strValue
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''     
      END
      ELSE
      -- Other Medical Therapy
      IF @strVariable IN('BIO_TX','IMMUNO','CLIN_TRIAL','STEROID','OTHER','GENE_TX')
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' 
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         IF @strValue <> ''
            SET @strOutput = @strOutput +  @strValue
         ELSE
            SET @strOutput = @strOutput + @strVariable
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)            
         SET @strOutput = ''   
      END
      ELSE
      -- Extent of Disease
      IF @strVariable = 'EOD'
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' + @strVariable + ' ' + @strValue -- + @CharLineFeed
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''   
      END
      ELSE
      -- Radical Prostatectomy
      IF @strVariable LIKE 'R[RCPL]P' OR @strVariable LIKE '[RCPL]P' OR @strVariable LIKE 'Salv[RCPL]P' OR @strVariable='RALP' OR @strVariable = 'LP_CONV' --dbo.fnIsRadicalProstatectomy(@strVariable) = 1
      BEGIN
         SET @blnHadRP = 1
         IF @ClinState < @LOCALIZED
         BEGIN
           SET @ClinState = @LOCALIZED
           IF @EForm=1
              BEGIN
                 SET @ClinStateID = @intPrimaryKey
                 SET @ClinStateTable = @strTableName
              END   
           IF @dteDate IS NOT NULL
              BEGIN
                 SET @ClinStateDate = @dteDate
                 SET @ClinStateDteText = @strDate
              END                                         
         END
         IF @blnPreTx = 1 
            IF @dteDate IS NOT NULL
               SET @TxDate = @dteDate
         SET @strOutput = @strOutput + @strDate + ' ' + @strVariable + ' ' + @strValue -- + @CharLineFeed
         IF @EForm=1
            BEGIN
            	SET @strTableNames = 'ProstatectomyProc'
               SET @strPrimaryKeys = CAST(@intPrimaryKey as varchar(50))
               SET @strVarDelimited = '__'+ @strDate + ' ' + @strVariable + '|'
               IF @strValue <> ''
                  BEGIN
                     SELECT TOP 1 @ProstatePathId=ProstatectomyPath.PathologyId 
                     FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId=Pathology.ProcedureId
                                     INNER JOIN ProstatectomyPath ON Pathology.PathologyId=ProstatectomyPath.PathologyId
                     WHERE Procedures.ProcedureId=@intPrimaryKey
                     IF @ProstatePathId IS NOT NULL
                        BEGIN
                           SET @strTableNames = @strTableNames + ',ProstatectomyPath'
                           SET @strPrimaryKeys =  @strPrimaryKeys + ',' + CAST(@ProstatePathId as varchar(50))
                           SET @strVarDelimited = @strVarDelimited + '__' + @strValue + '|'
                        END
                     ELSE
                        SET @strVarDelimited = @strVarDelimited + '__' + @strValue + '|'

                     SELECT TOP 1 @PLNDProcId=Procedures.ProcedureId 
                     FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId=Pathology.ProcedureId
                     WHERE Procedures.OperatingRoomDetailId IN
                           (SELECT OperatingRoomDetailId FROM Procedures WHERE ProcedureId=@intPrimaryKey) AND 
                           Procedures.PatientId=@PatientId AND ProcName='PLND' AND PathResult IS NOT NULL
                     IF @PLNDProcId IS NOT NULL
                        BEGIN
                           SET @strTableNames = @strTableNames + ',Procedures'
                           SELECT @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@PLNDProcId as varchar(50))
                           IF @ProstatePathId IS NOT NULL
                              SET @strVarDelimited = REPLACE(@strVarDelimited,'LNI','|__LNI')
                        END
                  END
               INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,@strVarDelimited,@strTableNames,@strPrimaryKeys)
               SET @strTableNames = ''
               SET @strPrimaryKeys = ''
               SET @strVarDelimited = ''
            END
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''   
      END      
      ELSE
      -- Display all these other surgeries
      IF (@strVariable LIKE '%Orchiectomy') OR @strVariable IN('Nephrectomy','RPLND','Cystectomy')
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' + @strValue
         IF @EForm=1     
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE 
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''
      END
      ELSE
      -- Status    
      IF @strVariable = 'Status'
      BEGIN

      -- Extent of Disease
         IF @strValue IN('Localized','LCR','Local Recurrence')
            BEGIN
               IF @ClinState < @LOCALIZED                   BEGIN
                        SET @ClinState = @LOCALIZED
                        IF @EForm=1
                           BEGIN
                              SET @ClinStateID = @intPrimaryKey
                              SET @ClinStateTable = @strTableName
                           END   
                        IF @dteDate IS NOT NULL
                           BEGIN
                              SET @ClinStateDate = @dteDate
                              SET @ClinStateDteText = @strDate
                           END
                  END
            END
         ELSE
            IF @strValue IN('BCR','Biochemical Recurrence')
            BEGIN
               IF @Castrate = 1 AND @ClinState < @RISING_PSA_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_CASTRATE
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
               ELSE IF @ClinState < @RISING_PSA_NON_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_NON_CASTRATE
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         ELSE
            IF @strValue IN('RisingPSA_Castrate','Rising PSA Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('RisingPSA_NonCastrate','Rising PSA Non-Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_NON_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_NON_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsNonCastrate','Non-Castrate Mets','Clinical Mets Non-Castrate')
            BEGIN
               IF @ClinState < @NON_CASTRATE_METS
               BEGIN
                  SET @ClinState = @NON_CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsCastrate','Castrate Mets','Clinical Mets Castrate')
            BEGIN
               IF @ClinState < @CASTRATE_METS
               BEGIN
                  SET @ClinState = @CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('METS','Distant Metastasis')
            BEGIN
               IF @ClinState < @CASTRATE_METS AND @Castrate = 1
                  BEGIN
                     SET @ClinState = @CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
               ELSE IF @ClinState < @NON_CASTRATE_METS
                  BEGIN
                     SET @ClinState = @NON_CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         ELSE
            IF @strValue IN('DOD','DOC','DUC','Dead','Death from Prostate Cancer','Death from Other Cause',
                            'Death from Unknown Causes')
            BEGIN
               If @ClinState < @DEAD 
                  BEGIN
                     SET @ClinState = @DEAD
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         --Active Surveillance detection removed due to inaccuracy, code based detection algorithm built
         /*
         ELSE
            IF @strValue = 'Active Surveillance'
               BEGIN
                  IF @ActiveSurId IS NULL
                     BEGIN 
                        SELECT @ActiveSurId=StatusId
                        FROM Status 
                        WHERE Status = 'Active Surveillance' AND
                              StatusDisease IN('Prostate','Prostate Cancer') AND
                              StatusDate IS NOT NULL AND
                              StatusId = @intPrimaryKey

                        IF @ActiveSurId IS NOT NULL
                           BEGIN 
                              SET @strOutput = @strDate + ' Started ' + @strValue
                              IF @EForm=1
                                 INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
                              ELSE
                                 INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
                              SET @strOutput = ''
                           END
                     END
               END
         */
      END
      --PRINT @strDate + ' ' + @strVariable + ' ' + @strValue + ' ' + @strDataQuality
      --SET @stoptime= GETDATE()
      --SET @strdebug = @strdebug + char(10) + @strVariable + ' ' + @stoptime --Cast to text
      --SELECT @stoptime - @starttime
      FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@intPrimaryKey,@strTableName
      --SET @starttime= GETDATE()
   END
   DEALLOCATE tables_cursor
   --PRINT @strdebug
END      
   
   -- assembles diagnosis date, stage, grade, pre tx psa line
   IF @EForm=1
      BEGIN
         IF @DxBxDate <> @MISSING_DATE
            BEGIN
               SET @strPatientHPI = @DxBxDateText + ' '
            	SET @strTableNames = 'Procedures'
               SET @strPrimaryKeys = CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = '__' + @DxBxDateText + '|'
            END 
         IF @ClinStageT <> ''
            BEGIN
               SET @strPatientHPI = @strPatientHPI + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ') '
               SET @strTableNames = @strTableNames + ',ClinicalStages'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@ClinStageID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ')|'
            END
         IF @DxBxType <> ''
            BEGIN 
               SET @strPatientHPI =  @strPatientHPI + @DxBxType + ' ' + @DxBxSummary + ' '
               SET @strTableNames = @strTableNames + ',Procedures'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @DxBxType + ' ' + @DxBxSummary + '|'
            END
         IF @PreTxPSA <> @MISSING_NUMBER AND @blnHadRP =1
            BEGIN
               SET @strPatientHPI = @strPatientHPI + ' PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + ' '
               SET @strTableNames = @strTableNames + ',LabTests'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@PreTxPSAID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + '|'
            END
         --strip leading comma from TableNames and PrimaryKeys concatenation
         IF LEFT(@strTableNames,1) = ','
            SET @strTableNames = RIGHT(@strTableNames,LEN(@strTableNames)-1)
         IF LEFT(@strPrimaryKeys,1) = ','
            SET @strPrimaryKeys = RIGHT(@strPrimaryKeys,LEN(@strPrimaryKeys)-1)
         INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@strPrimaryKeys)
         SET @strTableNames = ''
         SET @strPrimaryKeys = ''
         SET @strVarDelimited = ''
      END 
   ELSE
      BEGIN
         IF @DxBxDate <> @MISSING_DATE
            SET @strPatientHPI = @DxBxDateText + ' '
         IF @ClinStageT <> ''
            SET @strPatientHPI = @strPatientHPI + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ') '
         IF @DxBxType <> ''
            SET @strPatientHPI =  @strPatientHPI + @DxBxType + ' ' + @DxBxSummary + ' ' 
         IF @PreTxPSA <> @MISSING_NUMBER AND @blnHadRP =1
            SET @strPatientHPI = @strPatientHPI + ' PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + ' '
         INSERT @SortTable (SortDate,VarString) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI)
      END
   SET @strPatientHPI = ''   -- make sure this is set to '' by default

   --adds pre diagnosis biopsy psa to HPI
   IF @EForm=1
      INSERT INTO @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys)
      SELECT TOP 1 SortDate, VarDate + ' PreDx Biopsy PSA: ' + VarValue,'__'+VarDate + ' PreDx Biopsy PSA: ' + VarValue+'|',TableName,PrimaryKey
      FROM @ChronoTable 
      WHERE TableName='LabTests' AND VarName IN('PSA','PSAUS') AND VarValue<>'' AND SortDate<=@DxBxDate
      ORDER BY SortDate DESC
   ELSE
      INSERT INTO  @SortTable (SortDate,VarString)
      SELECT TOP 1 SortDate, VarDate + ' PreDx Biopsy PSA: ' + VarValue
      FROM @ChronoTable 
      WHERE TableName='LabTests' AND VarName IN('PSA','PSAUS') AND VarValue<>'' AND SortDate<=@DxBxDate
      ORDER BY SortDate DESC

   -- assemble clinical state / status line
   IF @ClinStateDate <> @MISSING_DATE
      BEGIN
         SET @strPatientHPI = @strPatientHPI + @ClinStateDteText + ' '
         -- decode numeric clinical states back into text for display
         --IF @ClinState = @NO_PROSTATE_CANCER_DIAGNOSIS
         --   SET @strPatientHPI = @strPatientHPI + '' --Removed 'No Prostate Cancer Diagnosis '
         IF @ClinState = @LOCALIZED
            SET @strPatientHPI = @strPatientHPI + 'Localized'
         IF @ClinState = @RISING_PSA_NON_CASTRATE
            SET @strPatientHPI = @strPatientHPI + 'Rising PSA Non-Castrate'
         IF @ClinState = @RISING_PSA_CASTRATE
            SET @strPatientHPI = @strPatientHPI + 'Rising PSA Castrate'
         IF @ClinState = @NON_CASTRATE_METS
            SET @strPatientHPI = @strPatientHPI + 'Non-Castrate Mets'
         IF @ClinState = @CASTRATE_METS
            SET @strPatientHPI = @strPatientHPI + 'Castrate Mets'
         IF @ClinState = @DEAD
            SET @strPatientHPI = @strPatientHPI + 'Dead'
         IF @EForm=1
            BEGIN
               SET @strVarDelimited = '__' + @strPatientHPI + '|'
               SET @strTableNames = @ClinStateTable
               SET @strPrimaryKeys = CAST(@ClinstateID as varchar(50))
               INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@strPrimaryKeys)
               SET @strTableNames = ''
               SET @strPrimaryKeys = ''
               SET @strVarDelimited = ''
            END
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI)
      END     
   SET @strPatientHPI = ''   
  
   IF @EForm=1
      BEGIN
         SELECT VarString AS PatientHPI,VarDelimited AS PatientHPIDelimited,TableNames,PrimaryKeys
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   ELSE
      BEGIN
         SELECT VarString AS PatientHPI 
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   --SELECT * FROM @ChronoTable
  
   SELECT @DxBiopsyID AS DxBiopsyId, NULL AS PreRPNomo,NULL AS PreRPError, 
          NULL AS PreXRTNomo, NULL AS PreXRTError, NULL AS PreBrachyNomo,
          NULL AS PreBrachyError,NULL AS PostRP2yrNomo,NULL AS PostRP5yrNomo,
          NULL AS PostRP7yrNomo,NULL PostRPError

   --Retired, used to view the parameters used to calculate nomogram scores
   IF @NomogramValues = 1 
      SELECT NULL AS PreTxPSA ,NULL AS ClinStage, NULL AS ClinStageSystem, 
             NULL AS ClinStage92, NULL AS ClinStage97, NULL AS BxGG1, 
             NULL AS BxGG2,NULL AS NeoAdjHormTx,NULL AS NeoAdjRadTx,
             @DxBiopsyID AS DxBiopsyId,NULL AS BxGGS, NULL AS XRTDose,NULL AS RP_GGS,
             NULL as RP_ECE,NULL AS RP_MarginStatus,NULL AS RP_SVI,NULL AS RP_LNI

--86ModifyTableDiagnostics.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_Diagnostics
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PatientId int NULL,
	DiagnosticId int NULL,
	DxPending bit NULL,
	DxDateText varchar(50) NULL,
	DxDate datetime NULL,
	DxType varchar(50) NULL,
	DxDisease varchar(50) NULL,
	DxIndication varchar(50) NULL,
	DxSummary varchar(255) NULL,
	DxSide varchar(50) NULL,
	DxTarget varchar(50) NULL,
	DxSite varchar(50) NULL,
	DxResult varchar(50) NULL,
	DxPhysician varchar(50) NULL,
	DxInstitution varchar(50) NULL,
	ImgReviewed varchar(50) NULL,
	ImgCompared varchar(50) NULL,
	ImgDigitized varchar(50) NULL,
	ImgContrast varchar(50) NULL,
	ImgBaseline varchar(50) NULL,
	DxConfidence varchar(50) NULL,
	DxStatus varchar(50) NULL,
	DxTotalNumTumors varchar(50) NULL,
	DxNumNewTumors varchar(50) NULL,
	DxClinicalSignificance varchar(50) NULL,
	DxNotes varchar(2000) NULL,
	DxDataSource varchar(100) NULL,
	DxQuality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_Diagnostics SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_Diagnostics)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_Diagnostics (LoggedOperation, LoggedBy, LoggedTime, PatientId, DiagnosticId, DxPending, DxDateText, DxDate, DxType, DxDisease, DxIndication, DxSummary, DxSide, DxTarget, DxSite, DxResult, DxPhysician, DxInstitution, ImgReviewed, ImgCompared, ImgDigitized, ImgContrast, ImgBaseline, DxConfidence, DxStatus, DxTotalNumTumors, DxNumNewTumors, DxNotes, DxDataSource, DxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PatientId, DiagnosticId, DxPending, DxDateText, DxDate, DxType, DxDisease, DxIndication, DxSummary, DxSide, DxTarget, DxSite, DxResult, DxPhysician, DxInstitution, ImgReviewed, ImgCompared, ImgDigitized, ImgContrast, ImgBaseline, DxConfidence, DxStatus, DxTotalNumTumors, DxNumNewTumors, DxNotes, DxDataSource, DxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_Diagnostics WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_Diagnostics
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_Diagnostics', N'AuditLog_Diagnostics', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Diagnostics
	DROP CONSTRAINT FK_Diagnostics_Patients
GO
ALTER TABLE dbo.Patients SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Diagnostics
	DROP CONSTRAINT DF_Diagnostics_DxPending
GO
CREATE TABLE dbo.Tmp_Diagnostics
	(
	PatientId int NOT NULL,
	DiagnosticId int NOT NULL IDENTITY (1, 1),
	DxPending bit NULL,
	DxDateText varchar(50) NULL,
	DxDate datetime NULL,
	DxType varchar(50) NOT NULL,
	DxDisease varchar(50) NULL,
	DxIndication varchar(50) NULL,
	DxSummary varchar(255) NULL,
	DxSide varchar(50) NULL,
	DxTarget varchar(50) NULL,
	DxSite varchar(50) NULL,
	DxResult varchar(50) NULL,
	DxPhysician varchar(50) NULL,
	DxInstitution varchar(50) NULL,
	ImgReviewed varchar(50) NULL,
	ImgCompared varchar(50) NULL,
	ImgDigitized varchar(50) NULL,
	ImgContrast varchar(50) NULL,
	ImgBaseline varchar(50) NULL,
	DxConfidence varchar(50) NULL,
	DxStatus varchar(50) NULL,
	DxTotalNumTumors varchar(50) NULL,
	DxNumNewTumors varchar(50) NULL,
	DxClinicalSignificance varchar(50) NULL,
	DxNotes varchar(2000) NULL,
	DxDataSource varchar(100) NULL,
	DxQuality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Diagnostics SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Diagnostics ADD CONSTRAINT
	DF_Diagnostics_DxPending DEFAULT ((0)) FOR DxPending
GO
SET IDENTITY_INSERT dbo.Tmp_Diagnostics ON
GO
IF EXISTS(SELECT * FROM dbo.Diagnostics)
	 EXEC('INSERT INTO dbo.Tmp_Diagnostics (PatientId, DiagnosticId, DxPending, DxDateText, DxDate, DxType, DxDisease, DxIndication, DxSummary, DxSide, DxTarget, DxSite, DxResult, DxPhysician, DxInstitution, ImgReviewed, ImgCompared, ImgDigitized, ImgContrast, ImgBaseline, DxConfidence, DxStatus, DxTotalNumTumors, DxNumNewTumors, DxNotes, DxDataSource, DxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PatientId, DiagnosticId, DxPending, DxDateText, DxDate, DxType, DxDisease, DxIndication, DxSummary, DxSide, DxTarget, DxSite, DxResult, DxPhysician, DxInstitution, ImgReviewed, ImgCompared, ImgDigitized, ImgContrast, ImgBaseline, DxConfidence, DxStatus, DxTotalNumTumors, DxNumNewTumors, DxNotes, DxDataSource, DxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.Diagnostics WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Diagnostics OFF
GO
ALTER TABLE dbo.DxImagePancreas
	DROP CONSTRAINT FK_DxImagePancreas_Diagnostics
GO
ALTER TABLE dbo.DxImageFindingsProstate
	DROP CONSTRAINT FK_DxImageFindingsProstate_Diagnostics
GO
ALTER TABLE dbo.DxImageThyroid
	DROP CONSTRAINT FK_DxImageThyroid_Diagnostics
GO
ALTER TABLE dbo.DxImageEndorectalUltrasound
	DROP CONSTRAINT FK_DxImageEndorectalUltrasound_Diagnostics
GO
ALTER TABLE dbo.DxImageProstate
	DROP CONSTRAINT FK_DxImageProstate_Diagnostics
GO
ALTER TABLE dbo.DxImageThyroidUltrasound
	DROP CONSTRAINT FK_DxImageThyroidUltrasound_Diagnostics
GO
ALTER TABLE dbo.DxPulmonaryTest
	DROP CONSTRAINT FK_DxPulmonaryTest_Diagnostics
GO
ALTER TABLE dbo.DxImageFindings
	DROP CONSTRAINT FK_DxImageFindings_Diagnostics
GO
ALTER TABLE dbo.DxImageFindingsKidney
	DROP CONSTRAINT FK_DxImageFindingsKidney_Diagnostics
GO
DROP TABLE dbo.Diagnostics
GO
EXECUTE sp_rename N'dbo.Tmp_Diagnostics', N'Diagnostics', 'OBJECT' 
GO
ALTER TABLE dbo.Diagnostics ADD CONSTRAINT
	PK_Diagnostics PRIMARY KEY CLUSTERED 
	(
	DiagnosticId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_Diagnostics_PatientId ON dbo.Diagnostics
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.Diagnostics WITH NOCHECK ADD CONSTRAINT
	FK_Diagnostics_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditDiagnostics_UD
ON dbo.Diagnostics FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_Diagnostics
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.DiagnosticId = Inserted.DiagnosticId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_Diagnostics
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditDiagnostics_UD', N'last', N'update'
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageFindingsKidney WITH NOCHECK ADD CONSTRAINT
	FK_DxImageFindingsKidney_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.DxImageFindingsKidney SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageFindings WITH NOCHECK ADD CONSTRAINT
	FK_DxImageFindings_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.DxImageFindings SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxPulmonaryTest WITH NOCHECK ADD CONSTRAINT
	FK_DxPulmonaryTest_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.DxPulmonaryTest SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageThyroidUltrasound WITH NOCHECK ADD CONSTRAINT
	FK_DxImageThyroidUltrasound_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
ALTER TABLE dbo.DxImageThyroidUltrasound SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageProstate WITH NOCHECK ADD CONSTRAINT
	FK_DxImageProstate_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.DxImageProstate SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageEndorectalUltrasound WITH NOCHECK ADD CONSTRAINT
	FK_DxImageEndorectalUltrasound_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.DxImageEndorectalUltrasound SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageThyroid WITH NOCHECK ADD CONSTRAINT
	FK_DxImageThyroid_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
ALTER TABLE dbo.DxImageThyroid SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageFindingsProstate WITH NOCHECK ADD CONSTRAINT
	FK_DxImageFindingsProstate_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.DxImageFindingsProstate SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImagePancreas ADD CONSTRAINT
	FK_DxImagePancreas_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.DxImagePancreas SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO

--87ModifyTableComorbidities.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_Comorbidities
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PatientId int NULL,
	ComorbidityId int NULL,
	ComorbDateText varchar(50) NULL,
	ComorbDate datetime NULL,
	ComorbStopDateText varchar(50) NULL,
	ComorbStopDate datetime NULL,
	ComorbSystem varchar(50) NULL,
	Comorbidity varchar(50) NULL,
	ComorbICD9_Code varchar(50) NULL,
	ComorbICD0_Code varchar(50) NULL,
	ComorbTreatment varchar(50) NULL,
	ComorbGrade varchar(50) NULL,
	ComorbStatus varchar(50) NULL,
	ComorbDuration varchar(50) NULL,
	ComorbNotes varchar(1000) NULL,
	ComorbDataSource varchar(100) NULL,
	ComorbQuality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_Comorbidities SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_Comorbidities)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_Comorbidities (LoggedOperation, LoggedBy, LoggedTime, PatientId, ComorbidityId, ComorbDateText, ComorbDate, ComorbSystem, Comorbidity, ComorbICD9_Code, ComorbICD0_Code, ComorbTreatment, ComorbGrade, ComorbStatus, ComorbDuration, ComorbNotes, ComorbDataSource, ComorbQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PatientId, ComorbidityId, ComorbDateText, ComorbDate, ComorbSystem, Comorbidity, ComorbICD9_Code, ComorbICD0_Code, ComorbTreatment, ComorbGrade, ComorbStatus, ComorbDuration, ComorbNotes, ComorbDataSource, ComorbQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_Comorbidities WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_Comorbidities
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_Comorbidities', N'AuditLog_Comorbidities', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Comorbidities
	DROP CONSTRAINT FK_Comorbidities_Patients
GO
ALTER TABLE dbo.Patients SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_Comorbidities
	(
	PatientId int NOT NULL,
	ComorbidityId int NOT NULL IDENTITY (1, 1),
	ComorbDateText varchar(50) NULL,
	ComorbDate datetime NULL,
	ComorbStopDateText varchar(50) NULL,
	ComorbStopDate datetime NULL,
	ComorbSystem varchar(50) NULL,
	Comorbidity varchar(50) NOT NULL,
	ComorbICD9_Code varchar(50) NULL,
	ComorbICD0_Code varchar(50) NULL,
	ComorbTreatment varchar(50) NULL,
	ComorbGrade varchar(50) NULL,
	ComorbStatus varchar(50) NULL,
	ComorbDuration varchar(50) NULL,
	ComorbNotes varchar(1000) NULL,
	ComorbDataSource varchar(100) NULL,
	ComorbQuality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Comorbidities SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_Comorbidities ON
GO
IF EXISTS(SELECT * FROM dbo.Comorbidities)
	 EXEC('INSERT INTO dbo.Tmp_Comorbidities (PatientId, ComorbidityId, ComorbDateText, ComorbDate, ComorbSystem, Comorbidity, ComorbICD9_Code, ComorbICD0_Code, ComorbTreatment, ComorbGrade, ComorbStatus, ComorbDuration, ComorbNotes, ComorbDataSource, ComorbQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PatientId, ComorbidityId, ComorbDateText, ComorbDate, ComorbSystem, Comorbidity, ComorbICD9_Code, ComorbICD0_Code, ComorbTreatment, ComorbGrade, ComorbStatus, ComorbDuration, ComorbNotes, ComorbDataSource, ComorbQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.Comorbidities WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Comorbidities OFF
GO
DROP TABLE dbo.Comorbidities
GO
EXECUTE sp_rename N'dbo.Tmp_Comorbidities', N'Comorbidities', 'OBJECT' 
GO
ALTER TABLE dbo.Comorbidities ADD CONSTRAINT
	PK_Comorbidities PRIMARY KEY CLUSTERED 
	(
	ComorbidityId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_Comorbidities_PatientId ON dbo.Comorbidities
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.Comorbidities WITH NOCHECK ADD CONSTRAINT
	FK_Comorbidities_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditComorbidities_UD
ON dbo.Comorbidities FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_Comorbidities
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ComorbidityId = Inserted.ComorbidityId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_Comorbidities
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditComorbidities_UD', N'last', N'update'
GO
COMMIT
GO

--89ModifyTableDiagnostics.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_Diagnostics
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PatientId int NULL,
	DiagnosticId int NULL,
	DxPending bit NULL,
	DxDateText varchar(50) NULL,
	DxDate datetime NULL,
	DxType varchar(50) NULL,
	DxDisease varchar(50) NULL,
	DxIndication varchar(50) NULL,
	DxSummary varchar(255) NULL,
	DxSide varchar(50) NULL,
	DxTarget varchar(50) NULL,
	DxSite varchar(50) NULL,
	DxResult varchar(50) NULL,
	DxPhysician varchar(50) NULL,
	DxInstitution varchar(50) NULL,
	ImgReviewed varchar(50) NULL,
	ImgCompared varchar(50) NULL,
	ImgDigitized varchar(50) NULL,
	ImgContrast varchar(50) NULL,
	ImgBaseline varchar(50) NULL,
	DxConfidence varchar(50) NULL,
	DxStatus varchar(50) NULL,
	DxTotalNumTumors varchar(50) NULL,
	DxNumNewTumors varchar(50) NULL,
	DxClinicalSignificance varchar(50) NULL,
	DxTracer bit NULL,
	DxNotes varchar(2000) NULL,
	DxDataSource varchar(100) NULL,
	DxQuality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_Diagnostics SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_Diagnostics)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_Diagnostics (LoggedOperation, LoggedBy, LoggedTime, PatientId, DiagnosticId, DxPending, DxDateText, DxDate, DxType, DxDisease, DxIndication, DxSummary, DxSide, DxTarget, DxSite, DxResult, DxPhysician, DxInstitution, ImgReviewed, ImgCompared, ImgDigitized, ImgContrast, ImgBaseline, DxConfidence, DxStatus, DxTotalNumTumors, DxNumNewTumors, DxClinicalSignificance, DxNotes, DxDataSource, DxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PatientId, DiagnosticId, DxPending, DxDateText, DxDate, DxType, DxDisease, DxIndication, DxSummary, DxSide, DxTarget, DxSite, DxResult, DxPhysician, DxInstitution, ImgReviewed, ImgCompared, ImgDigitized, ImgContrast, ImgBaseline, DxConfidence, DxStatus, DxTotalNumTumors, DxNumNewTumors, DxClinicalSignificance, DxNotes, DxDataSource, DxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_Diagnostics WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_Diagnostics
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_Diagnostics', N'AuditLog_Diagnostics', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Diagnostics
	DROP CONSTRAINT FK_Diagnostics_Patients
GO
ALTER TABLE dbo.Patients SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Diagnostics
	DROP CONSTRAINT DF_Diagnostics_DxPending
GO
CREATE TABLE dbo.Tmp_Diagnostics
	(
	PatientId int NOT NULL,
	DiagnosticId int NOT NULL IDENTITY (1, 1),
	DxPending bit NULL,
	DxDateText varchar(50) NULL,
	DxDate datetime NULL,
	DxType varchar(50) NOT NULL,
	DxDisease varchar(50) NULL,
	DxIndication varchar(50) NULL,
	DxSummary varchar(255) NULL,
	DxSide varchar(50) NULL,
	DxTarget varchar(50) NULL,
	DxSite varchar(50) NULL,
	DxResult varchar(50) NULL,
	DxPhysician varchar(50) NULL,
	DxInstitution varchar(50) NULL,
	ImgReviewed varchar(50) NULL,
	ImgCompared varchar(50) NULL,
	ImgDigitized varchar(50) NULL,
	ImgContrast varchar(50) NULL,
	ImgBaseline varchar(50) NULL,
	DxConfidence varchar(50) NULL,
	DxStatus varchar(50) NULL,
	DxTotalNumTumors varchar(50) NULL,
	DxNumNewTumors varchar(50) NULL,
	DxClinicalSignificance varchar(50) NULL,
	DxTracer bit NULL,
	DxNotes varchar(2000) NULL,
	DxDataSource varchar(100) NULL,
	DxQuality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Diagnostics SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Diagnostics ADD CONSTRAINT
	DF_Diagnostics_DxPending DEFAULT ((0)) FOR DxPending
GO
SET IDENTITY_INSERT dbo.Tmp_Diagnostics ON
GO
IF EXISTS(SELECT * FROM dbo.Diagnostics)
	 EXEC('INSERT INTO dbo.Tmp_Diagnostics (PatientId, DiagnosticId, DxPending, DxDateText, DxDate, DxType, DxDisease, DxIndication, DxSummary, DxSide, DxTarget, DxSite, DxResult, DxPhysician, DxInstitution, ImgReviewed, ImgCompared, ImgDigitized, ImgContrast, ImgBaseline, DxConfidence, DxStatus, DxTotalNumTumors, DxNumNewTumors, DxClinicalSignificance, DxNotes, DxDataSource, DxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PatientId, DiagnosticId, DxPending, DxDateText, DxDate, DxType, DxDisease, DxIndication, DxSummary, DxSide, DxTarget, DxSite, DxResult, DxPhysician, DxInstitution, ImgReviewed, ImgCompared, ImgDigitized, ImgContrast, ImgBaseline, DxConfidence, DxStatus, DxTotalNumTumors, DxNumNewTumors, DxClinicalSignificance, DxNotes, DxDataSource, DxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.Diagnostics WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Diagnostics OFF
GO
ALTER TABLE dbo.DxImageFindingsKidney
	DROP CONSTRAINT FK_DxImageFindingsKidney_Diagnostics
GO
ALTER TABLE dbo.DxImageFindings
	DROP CONSTRAINT FK_DxImageFindings_Diagnostics
GO
ALTER TABLE dbo.DxPulmonaryTest
	DROP CONSTRAINT FK_DxPulmonaryTest_Diagnostics
GO
ALTER TABLE dbo.DxImageThyroidUltrasound
	DROP CONSTRAINT FK_DxImageThyroidUltrasound_Diagnostics
GO
ALTER TABLE dbo.DxImageProstate
	DROP CONSTRAINT FK_DxImageProstate_Diagnostics
GO
ALTER TABLE dbo.DxImageEndorectalUltrasound
	DROP CONSTRAINT FK_DxImageEndorectalUltrasound_Diagnostics
GO
ALTER TABLE dbo.DxImageThyroid
	DROP CONSTRAINT FK_DxImageThyroid_Diagnostics
GO
ALTER TABLE dbo.DxImageFindingsProstate
	DROP CONSTRAINT FK_DxImageFindingsProstate_Diagnostics
GO
ALTER TABLE dbo.DxImagePancreas
	DROP CONSTRAINT FK_DxImagePancreas_Diagnostics
GO
DROP TABLE dbo.Diagnostics
GO
EXECUTE sp_rename N'dbo.Tmp_Diagnostics', N'Diagnostics', 'OBJECT' 
GO
ALTER TABLE dbo.Diagnostics ADD CONSTRAINT
	PK_Diagnostics PRIMARY KEY CLUSTERED 
	(
	DiagnosticId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_Diagnostics_PatientId ON dbo.Diagnostics
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.Diagnostics WITH NOCHECK ADD CONSTRAINT
	FK_Diagnostics_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditDiagnostics_UD
ON dbo.Diagnostics FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_Diagnostics
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.DiagnosticId = Inserted.DiagnosticId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_Diagnostics
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditDiagnostics_UD', N'last', N'update'
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImagePancreas ADD CONSTRAINT
	FK_DxImagePancreas_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.DxImagePancreas SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageFindingsProstate WITH NOCHECK ADD CONSTRAINT
	FK_DxImageFindingsProstate_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.DxImageFindingsProstate SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageThyroid WITH NOCHECK ADD CONSTRAINT
	FK_DxImageThyroid_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
ALTER TABLE dbo.DxImageThyroid SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageEndorectalUltrasound WITH NOCHECK ADD CONSTRAINT
	FK_DxImageEndorectalUltrasound_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.DxImageEndorectalUltrasound SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageProstate WITH NOCHECK ADD CONSTRAINT
	FK_DxImageProstate_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.DxImageProstate SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageThyroidUltrasound WITH NOCHECK ADD CONSTRAINT
	FK_DxImageThyroidUltrasound_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
ALTER TABLE dbo.DxImageThyroidUltrasound SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxPulmonaryTest WITH NOCHECK ADD CONSTRAINT
	FK_DxPulmonaryTest_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.DxPulmonaryTest SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageFindings WITH NOCHECK ADD CONSTRAINT
	FK_DxImageFindings_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.DxImageFindings SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.DxImageFindingsKidney WITH NOCHECK ADD CONSTRAINT
	FK_DxImageFindingsKidney_Diagnostics FOREIGN KEY
	(
	DiagnosticId
	) REFERENCES dbo.Diagnostics
	(
	DiagnosticId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.DxImageFindingsKidney SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO

--90ModifyTableToxicities.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_Toxicities
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PatientId int NULL,
	OperatingRoomDetailId int NULL,
	ToxicityId int NULL,
	ToxDateText varchar(50) NULL,
	ToxDate datetime NULL,
	ToxName varchar(100) NULL,
	ToxScale varchar(50) NULL,
	ToxClass varchar(50) NULL,
	ToxCategory varchar(255) NULL,
	ToxGrade varchar(50) NULL,
	ToxGradeCriteria varchar(255) NULL,
	ToxRelatedTo varchar(50) NULL,
	ToxProbability varchar(50) NULL,
	ToxIntervention varchar(50) NULL,
	ToxStopDateText varchar(50) NULL,
	ToxStopDate datetime NULL,
	ToxExpected bit NULL,
	ToxDiscontinueTherapy bit NULL,
	ToxBaseLine bit NULL,
	ToxSAE bit NULL,
	ToxOngoing bit NULL,
	ToxNotes varchar(1000) NULL,
	ToxDataSource varchar(100) NULL,
	ToxQuality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_Toxicities SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_Toxicities)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_Toxicities (LoggedOperation, LoggedBy, LoggedTime, PatientId, OperatingRoomDetailId, ToxicityId, ToxDateText, ToxDate, ToxName, ToxScale, ToxClass, ToxCategory, ToxGrade, ToxGradeCriteria, ToxRelatedTo, ToxProbability, ToxIntervention, ToxStopDateText, ToxStopDate, ToxExpected, ToxDiscontinueTherapy, ToxBaseLine, ToxSAE, ToxNotes, ToxDataSource, ToxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PatientId, OperatingRoomDetailId, ToxicityId, ToxDateText, ToxDate, ToxName, ToxScale, ToxClass, ToxCategory, ToxGrade, ToxGradeCriteria, ToxRelatedTo, ToxProbability, ToxIntervention, ToxStopDateText, ToxStopDate, ToxExpected, ToxDiscontinueTherapy, ToxBaseLine, ToxSAE, ToxNotes, ToxDataSource, ToxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.AuditLog_Toxicities WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_Toxicities
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_Toxicities', N'AuditLog_Toxicities', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Toxicities
	DROP CONSTRAINT FK_Toxicities_Patients
GO
ALTER TABLE dbo.Patients SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Toxicities
	DROP CONSTRAINT DF_Toxicities_ToxExpected
GO
ALTER TABLE dbo.Toxicities
	DROP CONSTRAINT DF_Toxicities_ToxDiscontinueTherapy
GO
ALTER TABLE dbo.Toxicities
	DROP CONSTRAINT DF_Toxicities_ToxBaseLine
GO
ALTER TABLE dbo.Toxicities
	DROP CONSTRAINT DF_Toxicities_ToxSAE
GO
CREATE TABLE dbo.Tmp_Toxicities
	(
	PatientId int NOT NULL,
	OperatingRoomDetailId int NULL,
	ToxicityId int NOT NULL IDENTITY (1, 1),
	ToxDateText varchar(50) NULL,
	ToxDate datetime NULL,
	ToxName varchar(100) NULL,
	ToxScale varchar(50) NULL,
	ToxClass varchar(50) NULL,
	ToxCategory varchar(255) NULL,
	ToxGrade varchar(50) NULL,
	ToxGradeCriteria varchar(255) NULL,
	ToxRelatedTo varchar(50) NULL,
	ToxProbability varchar(50) NULL,
	ToxIntervention varchar(50) NULL,
	ToxStopDateText varchar(50) NULL,
	ToxStopDate datetime NULL,
	ToxExpected bit NULL,
	ToxDiscontinueTherapy bit NULL,
	ToxBaseLine bit NULL,
	ToxSAE bit NULL,
	ToxOngoing bit NULL,
	ToxNotes varchar(1000) NULL,
	ToxDataSource varchar(100) NULL,
	ToxQuality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL,
	LockedBy varchar(50) NULL,
	LockedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Toxicities SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Toxicities ADD CONSTRAINT
	DF_Toxicities_ToxExpected DEFAULT ((0)) FOR ToxExpected
GO
ALTER TABLE dbo.Tmp_Toxicities ADD CONSTRAINT
	DF_Toxicities_ToxDiscontinueTherapy DEFAULT ((0)) FOR ToxDiscontinueTherapy
GO
ALTER TABLE dbo.Tmp_Toxicities ADD CONSTRAINT
	DF_Toxicities_ToxBaseLine DEFAULT ((0)) FOR ToxBaseLine
GO
ALTER TABLE dbo.Tmp_Toxicities ADD CONSTRAINT
	DF_Toxicities_ToxSAE DEFAULT ((0)) FOR ToxSAE
GO
SET IDENTITY_INSERT dbo.Tmp_Toxicities ON
GO
IF EXISTS(SELECT * FROM dbo.Toxicities)
	 EXEC('INSERT INTO dbo.Tmp_Toxicities (PatientId, OperatingRoomDetailId, ToxicityId, ToxDateText, ToxDate, ToxName, ToxScale, ToxClass, ToxCategory, ToxGrade, ToxGradeCriteria, ToxRelatedTo, ToxProbability, ToxIntervention, ToxStopDateText, ToxStopDate, ToxExpected, ToxDiscontinueTherapy, ToxBaseLine, ToxSAE, ToxNotes, ToxDataSource, ToxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime)
		SELECT PatientId, OperatingRoomDetailId, ToxicityId, ToxDateText, ToxDate, ToxName, ToxScale, ToxClass, ToxCategory, ToxGrade, ToxGradeCriteria, ToxRelatedTo, ToxProbability, ToxIntervention, ToxStopDateText, ToxStopDate, ToxExpected, ToxDiscontinueTherapy, ToxBaseLine, ToxSAE, ToxNotes, ToxDataSource, ToxQuality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime, LockedBy, LockedTime FROM dbo.Toxicities WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Toxicities OFF
GO
ALTER TABLE dbo.ToxAttribution
	DROP CONSTRAINT FK_ToxAttribution_Toxicities
GO
ALTER TABLE dbo.SeriousAdverseEvents
	DROP CONSTRAINT FK_SeriousAdverseEvents_Toxicities
GO
DROP TABLE dbo.Toxicities
GO
EXECUTE sp_rename N'dbo.Tmp_Toxicities', N'Toxicities', 'OBJECT' 
GO
ALTER TABLE dbo.Toxicities ADD CONSTRAINT
	PK_Toxicities PRIMARY KEY CLUSTERED 
	(
	ToxicityId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_Toxicities_PatientId ON dbo.Toxicities
	(
	PatientId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.Toxicities WITH NOCHECK ADD CONSTRAINT
	FK_Toxicities_Patients FOREIGN KEY
	(
	PatientId
	) REFERENCES dbo.Patients
	(
	PatientId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditToxicities_UD
ON dbo.Toxicities FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_Toxicities
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ToxicityId = Inserted.ToxicityId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_Toxicities
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditToxicities_UD', N'last', N'update'
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SeriousAdverseEvents ADD CONSTRAINT
	FK_SeriousAdverseEvents_Toxicities FOREIGN KEY
	(
	ToxicityId
	) REFERENCES dbo.Toxicities
	(
	ToxicityId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.SeriousAdverseEvents SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ToxAttribution ADD CONSTRAINT
	FK_ToxAttribution_Toxicities FOREIGN KEY
	(
	ToxicityId
	) REFERENCES dbo.Toxicities
	(
	ToxicityId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.ToxAttribution SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO

--91ModifyTableToxAttribution.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_ToxAttribution
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ToxicityId int NULL,
	ToxAttributionId int NULL,
	ToxAttribution varchar(100) NULL,
	ToxAttributionProbability varchar(50) NULL,
	ToxAttributionAction varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_ToxAttribution SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_ToxAttribution)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_ToxAttribution (LoggedOperation, LoggedBy, LoggedTime, ToxicityId, ToxAttributionId, ToxAttribution, ToxAttributionProbability, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, ToxicityId, ToxAttributionId, ToxAttribution, ToxAttributionProbability, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_ToxAttribution WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_ToxAttribution
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_ToxAttribution', N'AuditLog_ToxAttribution', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ToxAttribution
	DROP CONSTRAINT FK_ToxAttribution_Toxicities
GO
ALTER TABLE dbo.Toxicities SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_ToxAttribution
	(
	ToxicityId int NOT NULL,
	ToxAttributionId int NOT NULL IDENTITY (1, 1),
	ToxAttribution varchar(100) NULL,
	ToxAttributionProbability varchar(50) NULL,
	ToxAttributionAction varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_ToxAttribution SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_ToxAttribution ON
GO
IF EXISTS(SELECT * FROM dbo.ToxAttribution)
	 EXEC('INSERT INTO dbo.Tmp_ToxAttribution (ToxicityId, ToxAttributionId, ToxAttribution, ToxAttributionProbability, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT ToxicityId, ToxAttributionId, ToxAttribution, ToxAttributionProbability, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.ToxAttribution WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_ToxAttribution OFF
GO
DROP TABLE dbo.ToxAttribution
GO
EXECUTE sp_rename N'dbo.Tmp_ToxAttribution', N'ToxAttribution', 'OBJECT' 
GO
ALTER TABLE dbo.ToxAttribution ADD CONSTRAINT
	PK_ToxAttribution PRIMARY KEY CLUSTERED 
	(
	ToxAttributionId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_ToxAttribution_ToxicityId ON dbo.ToxAttribution
	(
	ToxicityId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.ToxAttribution ADD CONSTRAINT
	FK_ToxAttribution_Toxicities FOREIGN KEY
	(
	ToxicityId
	) REFERENCES dbo.Toxicities
	(
	ToxicityId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER [dbo].[trgAuditToxAttribution_UD]
ON dbo.ToxAttribution FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_ToxAttribution
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ToxAttributionId = Inserted.ToxAttributionId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_ToxAttribution
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditToxAttribution_UD', N'last', N'update'
GO
COMMIT
GO

--92ModifyTableSeriousAdverseEvents.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_SeriousAdverseEvents
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ToxicityId int NULL,
	ContactId int NULL,
	SAE_Age varchar(50) NULL,
	SAE_AttributedOutcome varchar(50) NULL,
	SAE_ReportDateText varchar(50) NULL,
	SAE_ReportDate datetime NULL,
	SAE_EventDescription varchar(1000) NULL,
	SAE_RelevantTestData varchar(50) NULL,
	SAE_OtherRelevantHistory varchar(1000) NULL,
	SAE_ConcommitantMeds varchar(1000) NULL,
	SAE_NDC_Number varchar(50) NULL,
	SAE_EventAbated1 varchar(50) NULL,
	SAE_EventAbated2 varchar(50) NULL,
	SAE_EventReappeared1 varchar(50) NULL,
	SAE_EventReappeared2 varchar(50) NULL,
	SAE_ReportingIndividual varchar(50) NULL,
	SAE_ReportFDA_DateText varchar(50) NULL,
	SAE_ReportFDA_Date datetime NULL,
	SAE_ReportFDA_Status varchar(50) NULL,
	SAE_Sequelae varchar(1000) NULL,
	SAE_ReportedToIRB varchar(50) NULL,
	SAE_Death bit NULL,
	SAE_LifeThreatening bit NULL,
	SAE_Hospitalization bit NULL,
	SAE_Disability bit NULL,
	SAE_Congenital bit NULL,
	SAE_MIE bit NULL,
	SAE_SignedDate datetime NULL,
	SAE_Investigator varchar(50) NULL,
	SAE_Notes varchar(1000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_SeriousAdverseEvents SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_SeriousAdverseEvents)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_SeriousAdverseEvents (LoggedOperation, LoggedBy, LoggedTime, ToxicityId, ContactId, SAE_Age, SAE_AttributedOutcome, SAE_ReportDateText, SAE_ReportDate, SAE_EventDescription, SAE_RelevantTestData, SAE_OtherRelevantHistory, SAE_ConcommitantMeds, SAE_NDC_Number, SAE_EventAbated1, SAE_EventAbated2, SAE_EventReappeared1, SAE_EventReappeared2, SAE_ReportingIndividual, SAE_ReportFDA_DateText, SAE_ReportFDA_Date, SAE_ReportFDA_Status, SAE_Sequelae, SAE_ReportedToIRB, SAE_Notes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, ToxicityId, ContactId, SAE_Age, SAE_AttributedOutcome, SAE_ReportDateText, SAE_ReportDate, SAE_EventDescription, SAE_RelevantTestData, SAE_OtherRelevantHistory, SAE_ConcommitantMeds, SAE_NDC_Number, SAE_EventAbated1, SAE_EventAbated2, SAE_EventReappeared1, SAE_EventReappeared2, SAE_ReportingIndividual, SAE_ReportFDA_DateText, SAE_ReportFDA_Date, SAE_ReportFDA_Status, SAE_Sequelae, SAE_ReportedToIRB, SAE_Notes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_SeriousAdverseEvents WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_SeriousAdverseEvents
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_SeriousAdverseEvents', N'AuditLog_SeriousAdverseEvents', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SeriousAdverseEvents
	DROP CONSTRAINT FK_SeriousAdverseEvents_Toxicities
GO
ALTER TABLE dbo.Toxicities SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_SeriousAdverseEvents
	(
	ToxicityId int NOT NULL,
	ContactId int NULL,
	SAE_Age varchar(50) NULL,
	SAE_AttributedOutcome varchar(50) NULL,
	SAE_ReportDateText varchar(50) NULL,
	SAE_ReportDate datetime NULL,
	SAE_EventDescription varchar(1000) NULL,
	SAE_RelevantTestData varchar(50) NULL,
	SAE_OtherRelevantHistory varchar(1000) NULL,
	SAE_ConcommitantMeds varchar(1000) NULL,
	SAE_NDC_Number varchar(50) NULL,
	SAE_EventAbated1 varchar(50) NULL,
	SAE_EventAbated2 varchar(50) NULL,
	SAE_EventReappeared1 varchar(50) NULL,
	SAE_EventReappeared2 varchar(50) NULL,
	SAE_ReportingIndividual varchar(50) NULL,
	SAE_ReportFDA_DateText varchar(50) NULL,
	SAE_ReportFDA_Date datetime NULL,
	SAE_ReportFDA_Status varchar(50) NULL,
	SAE_Sequelae varchar(1000) NULL,
	SAE_ReportedToIRB varchar(50) NULL,
	SAE_Death bit NULL,
	SAE_LifeThreatening bit NULL,
	SAE_Hospitalization bit NULL,
	SAE_Disability bit NULL,
	SAE_Congenital bit NULL,
	SAE_MIE bit NULL,
	SAE_SignedDate datetime NULL,
	SAE_Investigator varchar(50) NULL,
	SAE_Notes varchar(1000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_SeriousAdverseEvents SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.SeriousAdverseEvents)
	 EXEC('INSERT INTO dbo.Tmp_SeriousAdverseEvents (ToxicityId, ContactId, SAE_Age, SAE_AttributedOutcome, SAE_ReportDateText, SAE_ReportDate, SAE_EventDescription, SAE_RelevantTestData, SAE_OtherRelevantHistory, SAE_ConcommitantMeds, SAE_NDC_Number, SAE_EventAbated1, SAE_EventAbated2, SAE_EventReappeared1, SAE_EventReappeared2, SAE_ReportingIndividual, SAE_ReportFDA_DateText, SAE_ReportFDA_Date, SAE_ReportFDA_Status, SAE_Sequelae, SAE_ReportedToIRB, SAE_Notes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT ToxicityId, ContactId, SAE_Age, SAE_AttributedOutcome, SAE_ReportDateText, SAE_ReportDate, SAE_EventDescription, SAE_RelevantTestData, SAE_OtherRelevantHistory, SAE_ConcommitantMeds, SAE_NDC_Number, SAE_EventAbated1, SAE_EventAbated2, SAE_EventReappeared1, SAE_EventReappeared2, SAE_ReportingIndividual, SAE_ReportFDA_DateText, SAE_ReportFDA_Date, SAE_ReportFDA_Status, SAE_Sequelae, SAE_ReportedToIRB, SAE_Notes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.SeriousAdverseEvents WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.SeriousAdverseEvents
GO
EXECUTE sp_rename N'dbo.Tmp_SeriousAdverseEvents', N'SeriousAdverseEvents', 'OBJECT' 
GO
ALTER TABLE dbo.SeriousAdverseEvents ADD CONSTRAINT
	PK_SeriousAdverseEvents PRIMARY KEY CLUSTERED 
	(
	ToxicityId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_SeriousAdverseEvents_ContactId ON dbo.SeriousAdverseEvents
	(
	ContactId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.SeriousAdverseEvents ADD CONSTRAINT
	FK_SeriousAdverseEvents_Toxicities FOREIGN KEY
	(
	ToxicityId
	) REFERENCES dbo.Toxicities
	(
	ToxicityId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER [dbo].[trgSeriousAdverseEvents_UD]
ON dbo.SeriousAdverseEvents FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_SeriousAdverseEvents
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ToxicityId = Inserted.ToxicityId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_SeriousAdverseEvents
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgSeriousAdverseEvents_UD', N'last', N'update'
GO
COMMIT
GO

--93ModifyTablePancreasPath.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_PancreasPath
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PathologyId int NULL,
	PathDifferentiation varchar(50) NULL,
	PathExtraParenchymalInv varchar(50) NULL,
	PathExtraParenchymalInv2 varchar(50) NULL,
	PathVascularInv varchar(50) NULL,
	PathPerineuralInv varchar(50) NULL,
	PathPancreaticMargin varchar(50) NULL,
	PathAnteriorMargin varchar(50) NULL,
	PathPosteriorMargin varchar(50) NULL,
	PathDuodenalMargin varchar(50) NULL,
	PathGastricMargin varchar(50) NULL,
	PathBileDuctMargin varchar(50) NULL,
	PathAnteriorPeritonealInv varchar(50) NULL,
	PathPancreatitis varchar(50) NULL,
	PathFibrosis varchar(50) NULL,
	PathDuodenum varchar(50) NULL,
	PathStomach varchar(50) NULL,
	PathPanIn varchar(50) NULL,
	PathIPMN varchar(50) NULL,
	PathLymphaticInv varchar(50) NULL,
	PathEpitheliumType varchar(50) NULL,
	PathDysplasia varchar(50) NULL,
	PathCarcinoma varchar(50) NULL,
	PathCarcinomaType varchar(50) NULL,
	PathPercCarcinoma varchar(50) NULL,
	PathCarcinomaMaxDim varchar(50) NULL,
	PathNonneoplastic varchar(50) NULL,
	PathAddTissueMargin varchar(50) NULL,
	PathProximalMargin varchar(50) NULL,
	PathDistalMargin varchar(50) NULL,
	PathFocality varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_PancreasPath SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_PancreasPath)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_PancreasPath (LoggedOperation, LoggedBy, LoggedTime, PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, PathEpitheliumType, PathDysplasia, PathCarcinoma, PathCarcinomaType, PathPercCarcinoma, PathCarcinomaMaxDim, PathNonneoplastic, PathAddTissueMargin, PathProximalMargin, PathDistalMargin, PathFocality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, PathEpitheliumType, PathDysplasia, PathCarcinoma, PathCarcinomaType, PathPercCarcinoma, PathCarcinomaMaxDim, PathNonneoplastic, PathAddTissueMargin, PathProximalMargin, PathDistalMargin, PathFocality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_PancreasPath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_PancreasPath
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_PancreasPath', N'AuditLog_PancreasPath', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PancreasPath
	DROP CONSTRAINT FK_PancreasPath_Pathology
GO
ALTER TABLE dbo.Pathology SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_PancreasPath
	(
	PathologyId int NOT NULL,
	PathDifferentiation varchar(50) NULL,
	PathExtraParenchymalInv varchar(50) NULL,
	PathExtraParenchymalInv2 varchar(50) NULL,
	PathVascularInv varchar(50) NULL,
	PathPerineuralInv varchar(50) NULL,
	PathPancreaticMargin varchar(50) NULL,
	PathAnteriorMargin varchar(50) NULL,
	PathPosteriorMargin varchar(50) NULL,
	PathDuodenalMargin varchar(50) NULL,
	PathGastricMargin varchar(50) NULL,
	PathBileDuctMargin varchar(50) NULL,
	PathAnteriorPeritonealInv varchar(50) NULL,
	PathPancreatitis varchar(50) NULL,
	PathFibrosis varchar(50) NULL,
	PathDuodenum varchar(50) NULL,
	PathStomach varchar(50) NULL,
	PathPanIn varchar(50) NULL,
	PathIPMN varchar(50) NULL,
	PathLymphaticInv varchar(50) NULL,
	PathEpitheliumType varchar(50) NULL,
	PathDysplasia varchar(50) NULL,
	PathCarcinoma varchar(50) NULL,
	PathCarcinomaType varchar(50) NULL,
	PathPercCarcinoma varchar(50) NULL,
	PathCarcinomaMaxDim varchar(50) NULL,
	PathNonneoplastic varchar(50) NULL,
	PathAddTissueMargin varchar(50) NULL,
	PathProximalMargin varchar(50) NULL,
	PathDistalMargin varchar(50) NULL,
	PathFocality varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_PancreasPath SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.PancreasPath)
	 EXEC('INSERT INTO dbo.Tmp_PancreasPath (PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, PathEpitheliumType, PathDysplasia, PathCarcinoma, PathCarcinomaType, PathPercCarcinoma, PathCarcinomaMaxDim, PathNonneoplastic, PathAddTissueMargin, PathProximalMargin, PathDistalMargin, PathFocality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, PathEpitheliumType, PathDysplasia, PathCarcinoma, PathCarcinomaType, PathPercCarcinoma, PathCarcinomaMaxDim, PathNonneoplastic, PathAddTissueMargin, PathProximalMargin, PathDistalMargin, PathFocality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.PancreasPath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.PancreasPath
GO
EXECUTE sp_rename N'dbo.Tmp_PancreasPath', N'PancreasPath', 'OBJECT' 
GO
ALTER TABLE dbo.PancreasPath ADD CONSTRAINT
	PK_PancreasPath PRIMARY KEY CLUSTERED 
	(
	PathologyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.PancreasPath WITH NOCHECK ADD CONSTRAINT
	FK_PancreasPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
CREATE TRIGGER dbo.trgAuditPancreasPath_UD
ON dbo.PancreasPath FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_PancreasPath
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.PathologyId = Inserted.PathologyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_PancreasPath
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO

--94ModfyspGetPatientHPI.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spGetPatientHPI]
   @PatientId int = NULL,
   @NomogramResults bit = 0,  --retired
   @NomogramValues bit = 0,   --retired
   @EForm bit = 0,
   @Rowcount int = NULL OUTPUT
AS
--Procedure returns HPI as a select statement instead of output parameter for flexibility
SET NOCOUNT ON

--These variables are for debuging / testing speed
DECLARE @starttime datetime
DECLARE @stoptime datetime
Declare @strDebug varchar(8000)
--End of Debug variables

DECLARE @strPatientHPI     varchar(500)
DECLARE @strDate           varchar(50)
DECLARE @strStopDate       varchar(50)
DECLARE @dteDate           datetime
DECLARE @strVariable       varchar(50)
DECLARE @strValue          varchar(255)
DECLARE @strDataQuality    varchar(50)
DECLARE @intPrimaryKey     int
DECLARE @strTableName      varchar(50)
DECLARE @i                 int
DECLARE @blnPreTx          bit
DECLARE @blnValidPSA       bit
DECLARE @sngTime           float(24) --VBA single float(53) double
DECLARE @BiopsyDate        datetime
DECLARE @BiopsyDays        float(24) -- number of days after prostate biopsy that PSA is invalid
DECLARE @strOutPut         varchar(500)

--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'
SET @BiopsyDate = @MISSING_DATE
SET @BiopsyDays = 21

--Clinical states constants (must be ordered)
DECLARE @NO_PROSTATE_CANCER_DIAGNOSIS smallint
DECLARE @LOCALIZED                    smallint
DECLARE @RISING_PSA_NON_CASTRATE      smallint
DECLARE @RISING_PSA_CASTRATE          smallint
DECLARE @NON_CASTRATE_METS            smallint
DECLARE @CASTRATE_METS                smallint
DECLARE @DEAD                         smallint
SET @NO_PROSTATE_CANCER_DIAGNOSIS = 0
SET @LOCALIZED = 1
SET @RISING_PSA_NON_CASTRATE = 2
SET @RISING_PSA_CASTRATE = 3
SET @NON_CASTRATE_METS = 4   
SET @CASTRATE_METS = 5  
SET @DEAD = 6

--This is used to determine castrate clinical states
DECLARE @CASTRATE_TESTOSTERONE_LEVEL smallint
SET @CASTRATE_TESTOSTERONE_LEVEL = 50

DECLARE @ClinStateDate    datetime        --date of last clinical state transition
DECLARE @ClinStateDteText varchar(50)     --datetext of last clinical state transition
DECLARE @ClinState        int             --current clinical state (0 to 5)
DECLARE @Castrate         bit             --castrate levels of testosterone (<50)
DECLARE @DxBiopsyID       int             --primary key for diagnostic biopsy record
DECLARE @DxBxDate         datetime        --date of diagnostic (first positive) biopsy
DECLARE @DxBxDateText     varchar(50)     --datetext of diagnostic (first positive) biopsy
DECLARE @DxBxType         varchar(50)     --diagnostic biopsy type: TURP or needle
DECLARE @DxBxSummary      varchar(50)     --pathologic summary of diagnostic biopsy: eg. 3+4
DECLARE @DxBxQuality      varchar(50)     --data quality for diagnostic biopsy
DECLARE @PreTxPSA         float(24)       --valid PSA before any "curative" treatment (XRT or RP)
DECLARE @PreTxPSADate     datetime 
DECLARE @ClinStageDate	  datetime 
DECLARE @ClinStageSystem  varchar(50)     --UICC TNM staging system used
DECLARE @ClinStageT       varchar(50)     --pre-treatment UICC Tumor Stage
DECLARE @ClinStageN       varchar(50)     --pre-treatment UICC Nodes Stage
DECLARE @ClinStageM       varchar(50)     --pre-treatment UICC Metastatis Stage
DECLARE @ClinStageQuality varchar(50)     --data quality of clinical staging data
DECLARE @NeoAdjHormTx     varchar(50)     --patient has had neo-adjuvant hormone therapy
DECLARE @NeoAdjHormTxDate datetime        --date of first hormone therapy (all PSAs after this are invalid?)
DECLARE @NeoAdjRadTx      varchar(50)     --patient has had neo-adjuvant radiation therapy
DECLARE @NeoAdjRadTxDate  datetime        --date of last neo-adjuvant radiation therapy (all following pre-tx PSAs are invalid)
DECLARE @NeoAdjChemoTx    varchar(50)     --patient has had neo-adjuvant chemotherapy
DECLARE @NeoAdjChemoDate  datetime        --date of last neo-adjuvant chemotherapy
--DECLARE @Prostatectomy    bit           --patient had prostatectomy (means he will always use RP PSA recurrence methods)
--DECLARE @ActiveSurId      int           --primary key of Active Surveillance status record

DECLARE @TxDate           datetime        --date of first "curative" treatment
DECLARE @TxType           varchar(50)     --curative treatment type
DECLARE @AdjHormTx        varchar(50)
DECLARE @AdjChemoTx       varchar(50)
--DECLARE @NumPSAs          int --number of PSAs after curative treatment
DECLARE @EOD              varchar(50)     --last extent of disease 
DECLARE @LastPSA_Value    varchar(50)
DECLARE @LastPSA_Date     datetime   

DECLARE @HormEvent        varchar(50)
DECLARE @HormTxDate       datetime
DECLARE @MetsEvent        varchar(50)
DECLARE @ChemoTxDate      datetime

--used for eform
DECLARE @strTableNames     varchar(200)
DECLARE @strPrimaryKeys    varchar(50)
DECLARE @strVarDelimited   varchar(500)
DECLARE @ClinStageID       int             --primary key for diagnostic clinical stage record
DECLARE @PreTxPSAID        int             --primary key for pre prostatectomy psa record
DECLARE @ClinStateID       int             --primary key for clin state record
DECLARE @ClinStateTable    varchar(50)     --table name where clin state obtained from
DECLARE @blnHadRP          bit             --patient had prostatectomy
DECLARE @ProstatePathId    int             --primary key for ProstatectomyPath record
DECLARE @PLNDProcId        int             --primary key for Procedure PLND record


--used for eform
SET @strTableNames    = ''
SET @strPrimaryKeys   = ''
SET @strVarDelimited  = ''

SET @ClinStateDate    = @MISSING_DATE
SET @ClinStateDteText = ''
SET @ClinState        = @NO_PROSTATE_CANCER_DIAGNOSIS
SET @Castrate         = 0
SET @DxBxDate         = @MISSING_DATE
SET @DxBxDateText     = ''
SET @DxBxType         = ''
SET @DxBxSummary      = ''
SET @DxBxQuality      = ''
SET @PreTxPSA         = @MISSING_NUMBER
SET @PreTxPSADate     = @MISSING_DATE
SET @ClinStageDate    = @MISSING_DATE
SET @ClinStageSystem  = ''
SET @ClinStageT       = ''
SET @ClinStageN       = ''
SET @ClinStageM       = ''
SET @ClinStageQuality = ''
SET @NeoAdjHormTx     = 0
SET @NeoAdjHormTxDate = @MISSING_DATE
SET @NeoAdjRadTx      = 0
SET @NeoAdjRadTxDate  = @MISSING_DATE
SET @NeoAdjChemoTx    = 0
SET @NeoAdjChemoDate  = @MISSING_DATE
SET @HormTxDate       = @MISSING_DATE
SET @ChemoTxDate      = @MISSING_DATE
SET @blnHadRP         = 0
SET @TxDate           = @MISSING_DATE
SET @TxType           = ''
--SET @NumPSAs          = 0
SET @EOD              = ''
SET @LastPSA_Value    = @MISSING_NUMBER
SET @LastPSA_Date     = @MISSING_DATE
SET @MetsEvent        = ''
SET @HormEvent        = ''
 
DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate              datetime NULL,
   VarString             varchar(500) NULL,
   VarDelimited          varchar(500) NULL,
   TableNames            varchar(200) NULL,
   PrimaryKeys           varchar(50) NULL
   )

DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarValue
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarValue     varchar(255) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   VarStopDate  varchar(50) NULL,
   TableName    varchar(50) NULL,
   PrimaryKey   int NOT NULL
   )

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, CAST(dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) as varchar(255)), ISNULL(PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN ProstateBiopsyPath ON Pathology.PathologyId=ProstateBiopsyPath.PathologyId
WHERE Procedures.PatientId = @PatientId AND 
      ProcSite='Prostate' AND ProcName IN('TURP','TRUS Biopsy','Biopsy','Needle Biopsy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ClinStageDateText, ClinStageSystem, ClinStageT, ClinStageQuality, ClinStageDate, 'ClinicalStages', ClinicalStageId
FROM ClinicalStages
WHERE (ClinicalStages.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT DxDateText, DxType, DxResult, DxQuality, DxDate,  'Diagnostics', DiagnosticId
FROM Diagnostics
WHERE (Diagnostics.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT LabDateText, LabTest, LabResult, LabQuality, LabDate, 'LabTests', LabTestId
FROM LabTests
WHERE (LabTests.PatientId = @PatientId AND LabTest IN ('PSA','PSAUS','TEST') AND LabResult IS NOT NULL)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT MedTxDateText, MedTxType, MedTxAgent, MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId
FROM MedicalTherapy
WHERE (MedicalTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy'), LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy'), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName = 'Orchiectomy'

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'Nephrectomy', ISNULL(ProcName,'Nephrectomy') + ISNULL(' '+ProcSide,''), ProcQuality, ProcDate, 'Procedures',Procedures.ProcedureId
FROM Procedures
WHERE PatientId = @PatientId AND ProcName IN('Nephrectomy','Partial Nephrectomy','Laparoscopic Nephroureterectomy','Partial for Horshoe Kidney','Laparoscopic Partial Nephrectomy','Nephroureterectomy','Laparoscopic Radical Nephrectomy','Radical Nephrectomy','Exploratory Laparotomy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'RPLND', RTRIM('RPLND ' + ISNULL(ProcApproach,'')), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName = 'RPLND'

--Added Rank in case need to use top 1 clause to return only the best row version
INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, RPSummary, DataQuality, ProcDate, TableName, ProcedureId
FROM 
(
SELECT ProcDateText, ISNULL(ProcName,'Prostatectomy') ProcName,
       dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(PathQuality,ProcQuality)) + ' (' + 
       dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(PathQuality,ProcQuality))+ ')' + ' (' + ISNULL(PathQuality,ProcQuality) + ')' RPSummary, 
       ISNULL(PathQuality,ProcQuality) DataQuality, ProcDate,  'Procedures' TableName, Procedures.ProcedureId,
       CASE PathQuality WHEN 'OUT' THEN 1 
                        WHEN 'REV' THEN 2
                        WHEN 'STD' THEN 3
                        WHEN 'RR' THEN 4
                        ELSE 0
       END RP_RANK
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN ProstatectomyPath ON ProstatectomyPath.PathologyId = Pathology.PathologyId
WHERE Procedures.PatientId = @PatientId AND ProcName IN('CP','LP','LP_CONV','PP','RALP','RP','SalvCP','SalvLP','SalvRP')
) a 
ORDER BY ProcDate DESC, RP_RANK DESC

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,'Cystectomy', ISNULL(ProcName,'Cystectomy'),ProcQuality,ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName IN('Cystectomy','CP','Cysto-Prostatectomy','Partial Cystectomy','Radical Cystectomy','Salvage Radical Cystectomy')
      AND Procedures.ProcedureId NOT IN (SELECT PrimaryKey FROM @ChronoTable WHERE TableName='Procedures')

--procedures not in the current list
INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, LTRIM(ISNULL(ProcSide + ' ','') + ISNULL(ProcSite,'')), ProcQuality, ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN 
                (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT RadTxDateText, RadTxType, RadTxTotalDose, RadTxQuality, RadTxDate,RadTxStopDateText, 'RadiationTherapy', RadiationTherapyId
FROM RadiationTherapy
WHERE (RadiationTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT BrachyDateText,'Brachytherapy',BrachyIsotope,BrachyQuality,BrachyDate,'BrachyTherapy',PatientId
FROM BrachyTherapy
WHERE (BrachyTherapy.PatientId = @PatientId AND ISNULL(BrachyPending,0)=0)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT StatusDateText, 'Status', status, statusQuality, statusDate, 'Status', statusId
FROM Status
WHERE (Status.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT PtDeathDateText, 'Status', PtDeathType, Null, PtDeathDate, 'Patients', PatientID
FROM Patients
WHERE (PtDeathDate IS NOT NULL) AND (PatientID=@PatientID)

--Clean up local variables for each record fetched
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarValue = ''
WHERE VarValue IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarValue = dbo.fnPacManStr(VarValue)
WHERE TableName = 'LabTests' AND ISNUMERIC(VarValue)=0
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL

--SELECT * FROM @ChronoTable ORDER BY SortDate
SET @strOutPut = ''
SET @strPatientHPI = ''
DECLARE tables_cursor CURSOR LOCAL FAST_FORWARD
   FOR
   SELECT VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,PrimaryKey,TableName
   FROM @ChronoTable
   ORDER BY SortDate ASC
OPEN tables_cursor
IF CURSOR_STATUS ('local','tables_cursor') = 1
BEGIN
   --SET @starttime= GETDATE()
   --SET @strDebug= 'START ' + CAST(@starttime as varchar)
   FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@intPrimaryKey,@strTableName
   WHILE (@@FETCH_STATUS <> -1)
   BEGIN  
      --DETERMINE if record is pre-treatment assume record is not pre-treatment
      SET @blnPreTx = 0
      IF @dteDate IS NULL 
         SET @blnPreTx = 1
      ELSE IF @TxDate = @MISSING_DATE
         SET @blnPreTx = 1
      ELSE IF @dteDate = @TxDate
         SET @blnPreTx = 1     

      -- PSA
      IF @strVariable IN('PSA','PSAUS')
      BEGIN
         --accomodate <,>, <=, >=
         --SET @strValue = dbo.fnPacManStr(@strValue) --not need cause of update statement        
         IF ISNUMERIC(@strValue) = 1
         BEGIN
            SET @blnValidPSA = 1
            -- PSA invalid if patient on hormone therapy
            IF (@blnPreTx = 1 AND @NeoAdjHormTx <> '') OR (@AdjHormTx <> '') OR (@HormEvent <> '')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@HormTxDate = @MISSING_DATE) OR (@dteDate > @HormTxDate)
                     SET @blnValidPSA = 0

            -- PSA invalid if patient on chemotherapy
            IF (@blnPreTx = 1 AND @NeoAdjChemoTx <> '') OR (@AdjChemoTx <> '') OR (@MetsEvent LIKE '%CHEMO%')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@ChemoTxDate = @MISSING_DATE) OR (@dteDate > @ChemoTxDate)
                     SET @blnValidPSA = 0

            -- PSAs invalid within specified days after prostate biopsy
            IF @BiopsyDate <> @MISSING_DATE AND @dteDate IS NOT NULL
               IF @dteDate > @BiopsyDate
                  IF (@dteDate - @BiopsyDate) < @BiopsyDays
                     SET @blnValidPSA = 0

            -- find valid pre-treatment PSA 
            IF @blnValidPSA = 1   
               IF @blnPreTx = 1
               BEGIN
                  IF NOT (@dteDate IS NULL AND @PreTxPSA <> @MISSING_NUMBER AND @PreTxPSA > CAST(@strValue AS float(24)))
                     BEGIN
                        SET @PreTxPSA = CAST(@strValue AS float(24))
                        IF @EForm=1
                           SET @PreTxPSAID = @intPrimaryKey --used for eform
                     END 
                  IF @dteDate IS NOT NULL
                     SET @PreTxPSADate = @dteDate
               END
               ELSE
                  SET @LastPSA_Value = @strValue
               IF @dteDate IS NOT NULL
                  SET @LastPSA_Date = @dteDate
         END 
      END
      ELSE
      -- Prostate Biopsy
      IF @strVariable IN('NEEDLE BIOPSY','BIOPSY','TURP','TRUS Biopsy') --dbo.fnIsBiopsyProstate (@strVariable)= 1
      BEGIN
         -- which biopsy is the diagnostic biopsy?
         -- save date to check for PSAs within 3 weeks of biopsy
         IF @blnPreTx = 1
            IF @dteDate IS NOT NULL
            BEGIN
               SET @BiopsyDate = @dteDate
               -- diagnostic biopsy is first positive biopsy
               -- but if ther are later pre-tx grades, use them
               IF @strValue <> '' AND @strValue NOT IN('NEG','PIN','ASAP','Negative') --dbo.fnIsAbnormalBiopsyProstate (@strValue) = 1
                  IF @DxBxDate = @MISSING_DATE OR 
                                 (@strDataQuality='RR' AND @DxBxQuality <> 'RR' AND @DxBxDate = @dteDate) OR 
                                 (@strDataQuality IN('STD','REV') AND @DxBxQuality = 'OUT' AND @DxBxDate = @dteDate)
                  BEGIN
                     SET @DxBxType = @strVariable
                     SET @DxBxDate = @dteDate
                     SET @DxBxDateText = @strDate
                     SET @DxBxSummary = @strValue + ' (' + @strDataQuality + ')'
                     SET @DxBxQuality = @strDataQuality
	                  SET @DxBiopsyID = @intPrimaryKey --for paper form
                     -- move the clinical state forward
                     IF @ClinState < @LOCALIZED
                     BEGIN
                        SET @ClinState = @LOCALIZED
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                        IF @EForm=1
                           BEGIN
                              SET @ClinStateID = @intPrimaryKey
                              SET @ClinStateTable = @strTableName
                           END                           
                     END
                  END
            END         
      END   -- does not deal with post-curative treatment (RP, XRT) biopsies
      ELSE
      -- UICC/AJCC Clinical Tumor Stage
      IF @strVariable IN('UICC_92','UICC_97','UICC_02')
      BEGIN
         IF @blnPreTx = 1 AND @strValue <> ''
            If @strDataQuality = 'RR' OR @ClinStageQuality <> 'RR'
            BEGIN
               IF @dteDate IS NOT NULL
               BEGIN
	               SET @ClinStageDate = @dteDate            
	               SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
	               SET @ClinStageQuality = @strDataQuality
                  SELECT @ClinStageN = ClinStageN, @ClinStageM = ClinStageM
                  FROM ClinicalStages WHERE ClinicalStageId = @intPrimaryKey
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey --used for eform
	            END
	            ELSE IF @strValue > @ClinStageT
	            BEGIN
		            -- don't need to copy date b/c all nulls sort to top
         		   SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
	               SET @ClinStageQuality = @strDataQuality
                  SELECT @ClinStageN = ClinStageN, @ClinStageM = ClinStageM
                  FROM ClinicalStages WHERE ClinicalStageId = @intPrimaryKey
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey --used for eform
               END
            END       
      END
      ELSE
      BEGIN   
         -- Chemotherapy (NOT AN ELSE b/c of combination therapies)
         IF (@strVariable LIKE '%CHEMO%') AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @ChemoTxDate = @MISSING_DATE
                  SET @ChemoTxDate = @dteDate
   
            IF @blnPreTx = 1
               SET @NeoAdjChemoTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjChemoTx = @strVariable
               -- assumes any chemo after treatment indicates metastasis
               SET @MetsEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' ' 
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               IF @EForm=1
                  INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
               ELSE
                  INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
               SET @strOutput = ''   
         END
         -- Hormone Therapy (NOT AN ELSE b/c of combination therapies)
         IF ((@strVariable LIKE '%HORM%')
            OR (@strVariable = 'ORCH')
            OR (@strVariable ='Bilateral Orchiectomy')
            OR (@strVariable LIKE 'ORCH_BIL%')
            OR (@strVariable LIKE '%LHRH%')
            OR (@strVariable LIKE '%AA%')
            OR (@strVariable LIKE '%ESTROGEN%')
            OR (@strVariable LIKE '%PROGEST%'))
            AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @HormTxDate = @MISSING_DATE
                  SET @HormTxDate = @dteDate
            IF @blnPreTx = 1
               SET @NeoAdjHormTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjHormTx = @strVariable
               SET @HormEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' '  
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               --prevent the same record from being inserted again need a better way
               IF NOT EXISTS(SELECT SortDate FROM @SortTable WHERE SortDate=@dteDate AND VarString=@strOutput)
                  BEGIN
                     IF @EForm=1                  
                        INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
                     ELSE
                        INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)                        
                  END
               SET @strOutput = ''   
         END 
      END    
      --Testosterone
      IF @strVariable LIKE 'TEST%' 
      --look for castrate levels of testosterone
      BEGIN 
        IF ISNUMERIC(@strValue) = 1
           IF CAST(@strValue As float(24)) < @CASTRATE_TESTOSTERONE_LEVEL
              SET @Castrate = 1     
      END
      --check if castrated
      IF @strVariable IN ('ORCH_BIL','Bilateral Orchiectomy')
         SET @Castrate = 1
      --Diagnostics Imaging
      --these should be positive diagnostics for metastasis
      --what exactly is positive?
      --should it require specifying extent of disease?
      --should CT and MRI be confirmed by LN_BX?
      --should BS or PET be confirmed by BONE_BX?
      --add target latter so can use other scan types?
      IF @strVariable IN('BS','Bone Scan','BONE_BX','LN_BX') --('PET','PET Scan','XRAY','X-RAY','RADIOGRPH',)  
            --OR @strVariable LIKE 'CT%' OR @strVariable LIKE '%MRI%'--dbo.fnIsDiagnostic(@strVariable) = 1
      BEGIN
         IF @strValue LIKE 'POS%' OR 
            @strValue LIKE 'ABN_P%' OR 
            @strValue LIKE 'ABN_MAL%' OR
            @strValue='Abnormal Malignant' OR
            @strValue='Abnormal'	OR
            @strValue='Abnormal Prostate'--dbo.fnIsAbnormalDiagnostic(@strValue) = 1
            IF @ClinState < @NON_CASTRATE_METS
            BEGIN
               IF @Castrate = 1
                  BEGIN
                     SET @ClinState = @CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                  END
               ELSE
                  BEGIN
                     SET @ClinState = @NON_CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                  END
               IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
            END
      END
      ELSE
      -- Radiation Therapy
      IF @strVariable IN('XRT','EBRT','RT','COMBO','BRACHY','COMBO','RADIOISOTOPE','SEED'
                        ,'IMPLANT','Brachytherapy',
                        'External Beam','Radiation Therapy, Unspecified','External Beam, IMRT',
                        'High-Dose Rate Brachytherapy','External Beam, 3D Conventional',
                        'External Beam, 3D Conformal') --dbo.fnIsRadiationtherapy(@strVariable) = 1 OR dbo.fnIsBrachytherapy(@strVariable)= 1
      BEGIN
         IF @ClinState < @LOCALIZED
         BEGIN
            SET @ClinState = @LOCALIZED
            IF @EForm=1
               BEGIN
                  SET @ClinStateID = @intPrimaryKey
                  SET @ClinStateTable = @strTableName
               END   
            IF @dteDate IS NOT NULL
               BEGIN
                  SET @ClinStateDate = @dteDate
                  SET @ClinStateDteText = @strDate
               END
         END
         IF @blnPreTx = 1
            BEGIN 
               SET @NeoAdjRadTx = @strVariable
               IF @dteDate IS NOT NULL
                  SET @TxDate = @dteDate
            END
         SET @strOutput = @strOutput + @strDate + ' '
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         SET @strOutput = @strOutput + @strVariable + ' ' + @strValue
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''     
      END
      ELSE
      -- Other Medical Therapy
      IF @strVariable IN('BIO_TX','IMMUNO','CLIN_TRIAL','STEROID','OTHER','GENE_TX')
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' 
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         IF @strValue <> ''
            SET @strOutput = @strOutput +  @strValue
         ELSE
            SET @strOutput = @strOutput + @strVariable
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)            
         SET @strOutput = ''   
      END
      ELSE
      -- Extent of Disease
      IF @strVariable = 'EOD'
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' + @strVariable + ' ' + @strValue -- + @CharLineFeed
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''   
      END
      ELSE
      -- Radical Prostatectomy
      IF @strVariable LIKE 'R[RCPL]P' OR @strVariable LIKE '[RCPL]P' OR @strVariable LIKE 'Salv[RCPL]P' OR @strVariable='RALP' OR @strVariable = 'LP_CONV' --dbo.fnIsRadicalProstatectomy(@strVariable) = 1
      BEGIN
         SET @blnHadRP = 1
         IF @ClinState < @LOCALIZED
         BEGIN
           SET @ClinState = @LOCALIZED
           IF @EForm=1
              BEGIN
                 SET @ClinStateID = @intPrimaryKey
                 SET @ClinStateTable = @strTableName
              END   
           IF @dteDate IS NOT NULL
              BEGIN
                 SET @ClinStateDate = @dteDate
                 SET @ClinStateDteText = @strDate
              END                                         
         END
         IF @blnPreTx = 1 
            IF @dteDate IS NOT NULL
               SET @TxDate = @dteDate
         SET @strOutput = @strOutput + @strDate + ' ' + @strVariable + ' ' + @strValue -- + @CharLineFeed
         IF @EForm=1
            BEGIN
            	SET @strTableNames = 'ProstatectomyProc'
               SET @strPrimaryKeys = CAST(@intPrimaryKey as varchar(50))
               SET @strVarDelimited = '__'+ @strDate + ' ' + @strVariable + '|'
               IF @strValue <> ''
                  BEGIN
                     SELECT TOP 1 @ProstatePathId=ProstatectomyPath.PathologyId 
                     FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId=Pathology.ProcedureId
                                     INNER JOIN ProstatectomyPath ON Pathology.PathologyId=ProstatectomyPath.PathologyId
                     WHERE Procedures.ProcedureId=@intPrimaryKey
                     IF @ProstatePathId IS NOT NULL
                        BEGIN
                           SET @strTableNames = @strTableNames + ',ProstatectomyPath'
                           SET @strPrimaryKeys =  @strPrimaryKeys + ',' + CAST(@ProstatePathId as varchar(50))
                           SET @strVarDelimited = @strVarDelimited + '__' + @strValue + '|'
                        END
                     ELSE
                        SET @strVarDelimited = @strVarDelimited + '__' + @strValue + '|'

                     SELECT TOP 1 @PLNDProcId=Procedures.ProcedureId 
                     FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId=Pathology.ProcedureId
                     WHERE Procedures.OperatingRoomDetailId IN
                           (SELECT OperatingRoomDetailId FROM Procedures WHERE ProcedureId=@intPrimaryKey) AND 
                           Procedures.PatientId=@PatientId AND ProcName='PLND' AND PathResult IS NOT NULL
                     IF @PLNDProcId IS NOT NULL
                        BEGIN
                           SET @strTableNames = @strTableNames + ',Procedures'
                           SELECT @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@PLNDProcId as varchar(50))
                           IF @ProstatePathId IS NOT NULL
                              SET @strVarDelimited = REPLACE(@strVarDelimited,'LNI','|__LNI')
                        END
                  END
               INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,@strVarDelimited,@strTableNames,@strPrimaryKeys)
               SET @strTableNames = ''
               SET @strPrimaryKeys = ''
               SET @strVarDelimited = ''
            END
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''   
      END      
      ELSE
      -- Display all these other surgeries
      IF (@strVariable LIKE '%Orchiectomy') OR @strVariable IN('Nephrectomy','RPLND','Cystectomy')
      BEGIN
         SET @strOutput = @strOutput +  @strDate + ' ' + @strVariable + ' ' +  @strValue
         IF @EForm=1     
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE 
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''
      END
      ELSE
      -- Status    
      IF @strVariable = 'Status'
      BEGIN

      -- Extent of Disease
         IF @strValue IN('Localized','LCR','Local Recurrence')
            BEGIN
               IF @ClinState < @LOCALIZED                   BEGIN
                        SET @ClinState = @LOCALIZED
                        IF @EForm=1
                           BEGIN
                              SET @ClinStateID = @intPrimaryKey
                              SET @ClinStateTable = @strTableName
                           END   
                        IF @dteDate IS NOT NULL
                           BEGIN
                              SET @ClinStateDate = @dteDate
                              SET @ClinStateDteText = @strDate
                           END
                  END
            END
         ELSE
            IF @strValue IN('BCR','Biochemical Recurrence')
            BEGIN
               IF @Castrate = 1 AND @ClinState < @RISING_PSA_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_CASTRATE
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
               ELSE IF @ClinState < @RISING_PSA_NON_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_NON_CASTRATE
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         ELSE
            IF @strValue IN('RisingPSA_Castrate','Rising PSA Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('RisingPSA_NonCastrate','Rising PSA Non-Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_NON_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_NON_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsNonCastrate','Non-Castrate Mets','Clinical Mets Non-Castrate')
            BEGIN
               IF @ClinState < @NON_CASTRATE_METS
               BEGIN
                  SET @ClinState = @NON_CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsCastrate','Castrate Mets','Clinical Mets Castrate')
            BEGIN
               IF @ClinState < @CASTRATE_METS
               BEGIN
                  SET @ClinState = @CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('METS','Distant Metastasis')
            BEGIN
               IF @ClinState < @CASTRATE_METS AND @Castrate = 1
                  BEGIN
                     SET @ClinState = @CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
               ELSE IF @ClinState < @NON_CASTRATE_METS
                  BEGIN
                     SET @ClinState = @NON_CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         ELSE
            IF @strValue IN('DOD','DOC','DUC','Dead','Death from Prostate Cancer','Death from Other Cause',
                            'Death from Unknown Causes')
            BEGIN
               If @ClinState < @DEAD 
                  BEGIN
                     SET @ClinState = @DEAD
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         --Active Surveillance detection removed due to inaccuracy, code based detection algorithm built
         /*
         ELSE
            IF @strValue = 'Active Surveillance'
               BEGIN
                  IF @ActiveSurId IS NULL
                     BEGIN 
                        SELECT @ActiveSurId=StatusId
                        FROM Status 
                        WHERE Status = 'Active Surveillance' AND
                              StatusDisease IN('Prostate','Prostate Cancer') AND
                              StatusDate IS NOT NULL AND
                              StatusId = @intPrimaryKey

                        IF @ActiveSurId IS NOT NULL
                           BEGIN 
                              SET @strOutput = @strDate + ' Started ' + @strValue
                              IF @EForm=1
                                 INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
                              ELSE
                                 INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
                              SET @strOutput = ''
                           END
                     END
               END
         */
      END
      --PRINT @strDate + ' ' + @strVariable + ' ' + @strValue + ' ' + @strDataQuality
      --SET @stoptime= GETDATE()
      --SET @strdebug = @strdebug + char(10) + @strVariable + ' ' + @stoptime --Cast to text
      --SELECT @stoptime - @starttime
      FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@intPrimaryKey,@strTableName
      --SET @starttime= GETDATE()
   END
   DEALLOCATE tables_cursor
   --PRINT @strdebug
END      
   
   -- assembles diagnosis date, stage, grade, pre tx psa line
   IF @EForm=1
      BEGIN
         IF @DxBxDate <> @MISSING_DATE
            BEGIN
               SET @strPatientHPI = @DxBxDateText + ' '
            	SET @strTableNames = 'Procedures'
               SET @strPrimaryKeys = CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = '__' + @DxBxDateText + '|'
            END 
         IF @ClinStageT <> ''
            BEGIN
               SET @strPatientHPI = @strPatientHPI + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ') '
               SET @strTableNames = @strTableNames + ',ClinicalStages'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@ClinStageID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ')|'
            END
         IF @DxBxType <> ''
            BEGIN 
               SET @strPatientHPI =  @strPatientHPI + @DxBxType + ' ' + @DxBxSummary + ' '
               SET @strTableNames = @strTableNames + ',Procedures'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @DxBxType + ' ' + @DxBxSummary + '|'
            END
         IF @PreTxPSA <> @MISSING_NUMBER AND @blnHadRP =1
            BEGIN
               SET @strPatientHPI = @strPatientHPI + ' PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + ' '
               SET @strTableNames = @strTableNames + ',LabTests'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@PreTxPSAID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + '|'
            END
         --strip leading comma from TableNames and PrimaryKeys concatenation
         IF LEFT(@strTableNames,1) = ','
            SET @strTableNames = RIGHT(@strTableNames,LEN(@strTableNames)-1)
         IF LEFT(@strPrimaryKeys,1) = ','
            SET @strPrimaryKeys = RIGHT(@strPrimaryKeys,LEN(@strPrimaryKeys)-1)
         INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@strPrimaryKeys)
         SET @strTableNames = ''
         SET @strPrimaryKeys = ''
         SET @strVarDelimited = ''
      END 
   ELSE
      BEGIN
         IF @DxBxDate <> @MISSING_DATE
            SET @strPatientHPI = @DxBxDateText + ' '
         IF @ClinStageT <> ''
            SET @strPatientHPI = @strPatientHPI + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ') '
         IF @DxBxType <> ''
            SET @strPatientHPI =  @strPatientHPI + @DxBxType + ' ' + @DxBxSummary + ' ' 
         IF @PreTxPSA <> @MISSING_NUMBER AND @blnHadRP =1
            SET @strPatientHPI = @strPatientHPI + ' PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + ' '
         INSERT @SortTable (SortDate,VarString) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI)
      END
   SET @strPatientHPI = ''   -- make sure this is set to '' by default

   --adds pre diagnosis biopsy psa to HPI
   IF @EForm=1
      INSERT INTO @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys)
      SELECT TOP 1 SortDate, VarDate + ' PreDx Biopsy PSA: ' + VarValue,'__'+VarDate + ' PreDx Biopsy PSA: ' + VarValue+'|',TableName,PrimaryKey
      FROM @ChronoTable 
      WHERE TableName='LabTests' AND VarName IN('PSA','PSAUS') AND VarValue<>'' AND SortDate<=@DxBxDate
      ORDER BY SortDate DESC
   ELSE
      INSERT INTO  @SortTable (SortDate,VarString)
      SELECT TOP 1 SortDate, VarDate + ' PreDx Biopsy PSA: ' + VarValue
      FROM @ChronoTable 
      WHERE TableName='LabTests' AND VarName IN('PSA','PSAUS') AND VarValue<>'' AND SortDate<=@DxBxDate
      ORDER BY SortDate DESC

   -- assemble clinical state / status line
   IF @ClinStateDate <> @MISSING_DATE
      BEGIN
         SET @strPatientHPI = @strPatientHPI + @ClinStateDteText + ' '
         -- decode numeric clinical states back into text for display
         --IF @ClinState = @NO_PROSTATE_CANCER_DIAGNOSIS
         --   SET @strPatientHPI = @strPatientHPI + '' --Removed 'No Prostate Cancer Diagnosis '
         IF @ClinState = @LOCALIZED
            SET @strPatientHPI = @strPatientHPI + 'Localized'
         IF @ClinState = @RISING_PSA_NON_CASTRATE
            SET @strPatientHPI = @strPatientHPI + 'Rising PSA Non-Castrate'
         IF @ClinState = @RISING_PSA_CASTRATE
            SET @strPatientHPI = @strPatientHPI + 'Rising PSA Castrate'
         IF @ClinState = @NON_CASTRATE_METS
            SET @strPatientHPI = @strPatientHPI + 'Non-Castrate Mets'
         IF @ClinState = @CASTRATE_METS
            SET @strPatientHPI = @strPatientHPI + 'Castrate Mets'
         IF @ClinState = @DEAD
            SET @strPatientHPI = @strPatientHPI + 'Dead'
         IF @EForm=1
            BEGIN
               SET @strVarDelimited = '__' + @strPatientHPI + '|'
               SET @strTableNames = @ClinStateTable
               SET @strPrimaryKeys = CAST(@ClinstateID as varchar(50))
               INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@strPrimaryKeys)
               SET @strTableNames = ''
               SET @strPrimaryKeys = ''
               SET @strVarDelimited = ''
            END
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI)
      END     
   SET @strPatientHPI = ''   
  
   IF @EForm=1
      BEGIN
         SELECT VarString AS PatientHPI,VarDelimited AS PatientHPIDelimited,TableNames,PrimaryKeys
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   ELSE
      BEGIN
         SELECT VarString AS PatientHPI 
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   --SELECT * FROM @ChronoTable
  
   SELECT @DxBiopsyID AS DxBiopsyId, NULL AS PreRPNomo,NULL AS PreRPError, 
          NULL AS PreXRTNomo, NULL AS PreXRTError, NULL AS PreBrachyNomo,
          NULL AS PreBrachyError,NULL AS PostRP2yrNomo,NULL AS PostRP5yrNomo,
          NULL AS PostRP7yrNomo,NULL PostRPError

   --Retired, used to view the parameters used to calculate nomogram scores
   IF @NomogramValues = 1 
      SELECT NULL AS PreTxPSA ,NULL AS ClinStage, NULL AS ClinStageSystem, 
             NULL AS ClinStage92, NULL AS ClinStage97, NULL AS BxGG1, 
             NULL AS BxGG2,NULL AS NeoAdjHormTx,NULL AS NeoAdjRadTx,
             @DxBiopsyID AS DxBiopsyId,NULL AS BxGGS, NULL AS XRTDose,NULL AS RP_GGS,
             NULL as RP_ECE,NULL AS RP_MarginStatus,NULL AS RP_SVI,NULL AS RP_LNI

--95ModfyTableToxAttribution.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_ToxAttribution
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ToxicityId int NULL,
	ToxAttributionId int NULL,
	ToxAttribution varchar(100) NULL,
	ToxAttributionProbability varchar(50) NULL,
	ToxAttributionAction varchar(50) NULL,
	ToxEventAbated varchar(50) NULL,
	ToxEventReappeared varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_ToxAttribution SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_ToxAttribution)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_ToxAttribution (LoggedOperation, LoggedBy, LoggedTime, ToxicityId, ToxAttributionId, ToxAttribution, ToxAttributionProbability, ToxAttributionAction, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, ToxicityId, ToxAttributionId, ToxAttribution, ToxAttributionProbability, ToxAttributionAction, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_ToxAttribution WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_ToxAttribution
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_ToxAttribution', N'AuditLog_ToxAttribution', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ToxAttribution
	DROP CONSTRAINT FK_ToxAttribution_Toxicities
GO
ALTER TABLE dbo.Toxicities SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_ToxAttribution
	(
	ToxicityId int NOT NULL,
	ToxAttributionId int NOT NULL IDENTITY (1, 1),
	ToxAttribution varchar(100) NULL,
	ToxAttributionProbability varchar(50) NULL,
	ToxAttributionAction varchar(50) NULL,
	ToxEventAbated varchar(50) NULL,
	ToxEventReappeared varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_ToxAttribution SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_ToxAttribution ON
GO
IF EXISTS(SELECT * FROM dbo.ToxAttribution)
	 EXEC('INSERT INTO dbo.Tmp_ToxAttribution (ToxicityId, ToxAttributionId, ToxAttribution, ToxAttributionProbability, ToxAttributionAction, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT ToxicityId, ToxAttributionId, ToxAttribution, ToxAttributionProbability, ToxAttributionAction, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.ToxAttribution WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_ToxAttribution OFF
GO
DROP TABLE dbo.ToxAttribution
GO
EXECUTE sp_rename N'dbo.Tmp_ToxAttribution', N'ToxAttribution', 'OBJECT' 
GO
ALTER TABLE dbo.ToxAttribution ADD CONSTRAINT
	PK_ToxAttribution PRIMARY KEY CLUSTERED 
	(
	ToxAttributionId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_ToxAttribution_ToxicityId ON dbo.ToxAttribution
	(
	ToxicityId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.ToxAttribution ADD CONSTRAINT
	FK_ToxAttribution_Toxicities FOREIGN KEY
	(
	ToxicityId
	) REFERENCES dbo.Toxicities
	(
	ToxicityId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER [dbo].[trgAuditToxAttribution_UD]
ON dbo.ToxAttribution FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_ToxAttribution
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ToxAttributionId = Inserted.ToxAttributionId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_ToxAttribution
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditToxAttribution_UD', N'last', N'update'
GO
COMMIT
GO

--96CreateTableEncHeadNeckCranialNerveExam.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.AuditLog_EncHeadNeckCranialNerveExam
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	EncounterId int NULL,
	EncHeadNeckCranialNerveExamId int NULL,
	EncSide varchar(50) NULL,
	EncCranialNerveII varchar(50) NULL,
	EncCranialNerveIII_IV_VI varchar(50) NULL,
	EncSupraorbitalV1 varchar(50) NULL,
	EncSupratrochlearV1 varchar(50) NULL,
	EncInfraorbitalV2 varchar(50) NULL,
	EnclingualV3 varchar(50) NULL,
	EncMentalV3 varchar(50) NULL,
	EncInfAlveolarV3 varchar(50) NULL,
	EncMasseterAtrophyV3 varchar(50) NULL,
	EncTemporalVII varchar(50) NULL,
	EncZygomaticVII varchar(50) NULL,
	EncBuccalVII varchar(50) NULL,
	EncMarginalVII varchar(50) NULL,
	EncHouseBrackmannScore varchar(50) NULL,
	EncVagusX varchar(50) NULL,
	EncVocalCord varchar(50) NULL,
	EncAccessoryXI varchar(50) NULL,
	EncHypoglossalXII varchar(50) NULL,
	EncOtherNamedNerve varchar(50) NULL,
	EncOtherNamedNerveResult varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.AuditLog_EncHeadNeckCranialNerveExam SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Encounters SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.EncHeadNeckCranialNerveExam
	(
	EncounterId int NOT NULL,
	EncHeadNeckCranialNerveExamId int NOT NULL IDENTITY (1, 1),
	EncSide varchar(50) NULL,
	EncCranialNerveII varchar(50) NULL,
	EncCranialNerveIII_IV_VI varchar(50) NULL,
	EncSupraorbitalV1 varchar(50) NULL,
	EncSupratrochlearV1 varchar(50) NULL,
	EncInfraorbitalV2 varchar(50) NULL,
	EnclingualV3 varchar(50) NULL,
	EncMentalV3 varchar(50) NULL,
	EncInfAlveolarV3 varchar(50) NULL,
	EncMasseterAtrophyV3 varchar(50) NULL,
	EncTemporalVII varchar(50) NULL,
	EncZygomaticVII varchar(50) NULL,
	EncBuccalVII varchar(50) NULL,
	EncMarginalVII varchar(50) NULL,
	EncHouseBrackmannScore varchar(50) NULL,
	EncVagusX varchar(50) NULL,
	EncVocalCord varchar(50) NULL,
	EncAccessoryXI varchar(50) NULL,
	EncHypoglossalXII varchar(50) NULL,
	EncOtherNamedNerve varchar(50) NULL,
	EncOtherNamedNerveResult varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.EncHeadNeckCranialNerveExam ADD CONSTRAINT
	PK_EncHeadNeckCranialNerveExam PRIMARY KEY CLUSTERED 
	(
	EncHeadNeckCranialNerveExamId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX I_EncHeadNeckCranialNerveExam_EncounterId ON dbo.EncHeadNeckCranialNerveExam
	(
	EncounterId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE dbo.EncHeadNeckCranialNerveExam ADD CONSTRAINT
	FK_EncHeadNeckCranialNerveExam_Encounters FOREIGN KEY
	(
	EncounterId
	) REFERENCES dbo.Encounters
	(
	EncounterId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
ALTER TABLE dbo.EncHeadNeckCranialNerveExam SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
GO

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[trgAuditEncHeadNeckCranialNerveExam_UD]
ON [dbo].[EncHeadNeckCranialNerveExam] FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_EncHeadNeckCranialNerveExam
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.EncHeadNeckCranialNerveExamId = Inserted.EncHeadNeckCranialNerveExamId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_EncHeadNeckCranialNerveExam
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted

GO
EXEC sp_settriggerorder @triggername=N'[dbo].[trgAuditEncHeadNeckCranialNerveExam_UD]', @order=N'Last', @stmttype=N'UPDATE'
GO

--97ModifyspGetPatientHPI.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spGetPatientHPI]
   @PatientId int = NULL,
   @NomogramResults bit = 0,  --retired
   @NomogramValues bit = 0,   --retired
   @EForm bit = 0,
   @Rowcount int = NULL OUTPUT
AS
--Procedure returns HPI as a select statement instead of output parameter for flexibility
SET NOCOUNT ON

--These variables are for debuging / testing speed
DECLARE @starttime datetime
DECLARE @stoptime datetime
Declare @strDebug varchar(8000)
--End of Debug variables

DECLARE @strPatientHPI     varchar(500)
DECLARE @strDate           varchar(50)
DECLARE @strStopDate       varchar(50)
DECLARE @dteDate           datetime
DECLARE @strVariable       varchar(50)
DECLARE @strValue          varchar(255)
DECLARE @strDataQuality    varchar(50)
DECLARE @intPrimaryKey     int
DECLARE @strTableName      varchar(50)
DECLARE @i                 int
DECLARE @blnPreTx          bit
DECLARE @blnValidPSA       bit
DECLARE @sngTime           float(24) --VBA single float(53) double
DECLARE @BiopsyDate        datetime
DECLARE @BiopsyDays        float(24) -- number of days after prostate biopsy that PSA is invalid
DECLARE @strOutPut         varchar(500)

--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'
SET @BiopsyDate = @MISSING_DATE
SET @BiopsyDays = 21

--Clinical states constants (must be ordered)
DECLARE @NO_PROSTATE_CANCER_DIAGNOSIS smallint
DECLARE @LOCALIZED                    smallint
DECLARE @RISING_PSA_NON_CASTRATE      smallint
DECLARE @RISING_PSA_CASTRATE          smallint
DECLARE @NON_CASTRATE_METS            smallint
DECLARE @CASTRATE_METS                smallint
DECLARE @DEAD                         smallint
SET @NO_PROSTATE_CANCER_DIAGNOSIS = 0
SET @LOCALIZED = 1
SET @RISING_PSA_NON_CASTRATE = 2
SET @RISING_PSA_CASTRATE = 3
SET @NON_CASTRATE_METS = 4   
SET @CASTRATE_METS = 5  
SET @DEAD = 6

--This is used to determine castrate clinical states
DECLARE @CASTRATE_TESTOSTERONE_LEVEL smallint
SET @CASTRATE_TESTOSTERONE_LEVEL = 50

DECLARE @ClinStateDate    datetime        --date of last clinical state transition
DECLARE @ClinStateDteText varchar(50)     --datetext of last clinical state transition
DECLARE @ClinState        int             --current clinical state (0 to 5)
DECLARE @Castrate         bit             --castrate levels of testosterone (<50)
DECLARE @DxBiopsyID       int             --primary key for diagnostic biopsy record
DECLARE @DxBxDate         datetime        --date of diagnostic (first positive) biopsy
DECLARE @DxBxDateText     varchar(50)     --datetext of diagnostic (first positive) biopsy
DECLARE @DxBxType         varchar(50)     --diagnostic biopsy type: TURP or needle
DECLARE @DxBxSummary      varchar(50)     --pathologic summary of diagnostic biopsy: eg. 3+4
DECLARE @DxBxQuality      varchar(50)     --data quality for diagnostic biopsy
DECLARE @PreTxPSA         float(24)       --valid PSA before any "curative" treatment (XRT or RP)
DECLARE @PreTxPSADate     datetime 
DECLARE @ClinStageDate	  datetime 
DECLARE @ClinStageSystem  varchar(50)     --UICC TNM staging system used
DECLARE @ClinStageT       varchar(50)     --pre-treatment UICC Tumor Stage
DECLARE @ClinStageN       varchar(50)     --pre-treatment UICC Nodes Stage
DECLARE @ClinStageM       varchar(50)     --pre-treatment UICC Metastatis Stage
DECLARE @ClinStageQuality varchar(50)     --data quality of clinical staging data
DECLARE @NeoAdjHormTx     varchar(50)     --patient has had neo-adjuvant hormone therapy
DECLARE @NeoAdjHormTxDate datetime        --date of first hormone therapy (all PSAs after this are invalid?)
DECLARE @NeoAdjRadTx      varchar(50)     --patient has had neo-adjuvant radiation therapy
DECLARE @NeoAdjRadTxDate  datetime        --date of last neo-adjuvant radiation therapy (all following pre-tx PSAs are invalid)
DECLARE @NeoAdjChemoTx    varchar(50)     --patient has had neo-adjuvant chemotherapy
DECLARE @NeoAdjChemoDate  datetime        --date of last neo-adjuvant chemotherapy
--DECLARE @Prostatectomy    bit           --patient had prostatectomy (means he will always use RP PSA recurrence methods)
--DECLARE @ActiveSurId      int           --primary key of Active Surveillance status record

DECLARE @TxDate           datetime        --date of first "curative" treatment
DECLARE @TxType           varchar(50)     --curative treatment type
DECLARE @AdjHormTx        varchar(50)
DECLARE @AdjChemoTx       varchar(50)
--DECLARE @NumPSAs          int --number of PSAs after curative treatment
DECLARE @EOD              varchar(50)     --last extent of disease 
DECLARE @LastPSA_Value    varchar(50)
DECLARE @LastPSA_Date     datetime   

DECLARE @HormEvent        varchar(50)
DECLARE @HormTxDate       datetime
DECLARE @MetsEvent        varchar(50)
DECLARE @ChemoTxDate      datetime

--used for eform
DECLARE @strTableNames     varchar(200)
DECLARE @strPrimaryKeys    varchar(50)
DECLARE @strVarDelimited   varchar(500)
DECLARE @ClinStageID       int             --primary key for diagnostic clinical stage record
DECLARE @PreTxPSAID        int             --primary key for pre prostatectomy psa record
DECLARE @ClinStateID       int             --primary key for clin state record
DECLARE @ClinStateTable    varchar(50)     --table name where clin state obtained from
DECLARE @blnHadRP          bit             --patient had prostatectomy
DECLARE @ProstatePathId    int             --primary key for ProstatectomyPath record
DECLARE @PLNDProcId        int             --primary key for Procedure PLND record


--used for eform
SET @strTableNames    = ''
SET @strPrimaryKeys   = ''
SET @strVarDelimited  = ''

SET @ClinStateDate    = @MISSING_DATE
SET @ClinStateDteText = ''
SET @ClinState        = @NO_PROSTATE_CANCER_DIAGNOSIS
SET @Castrate         = 0
SET @DxBxDate         = @MISSING_DATE
SET @DxBxDateText     = ''
SET @DxBxType         = ''
SET @DxBxSummary      = ''
SET @DxBxQuality      = ''
SET @PreTxPSA         = @MISSING_NUMBER
SET @PreTxPSADate     = @MISSING_DATE
SET @ClinStageDate    = @MISSING_DATE
SET @ClinStageSystem  = ''
SET @ClinStageT       = ''
SET @ClinStageN       = ''
SET @ClinStageM       = ''
SET @ClinStageQuality = ''
SET @NeoAdjHormTx     = 0
SET @NeoAdjHormTxDate = @MISSING_DATE
SET @NeoAdjRadTx      = 0
SET @NeoAdjRadTxDate  = @MISSING_DATE
SET @NeoAdjChemoTx    = 0
SET @NeoAdjChemoDate  = @MISSING_DATE
SET @HormTxDate       = @MISSING_DATE
SET @ChemoTxDate      = @MISSING_DATE
SET @blnHadRP         = 0
SET @TxDate           = @MISSING_DATE
SET @TxType           = ''
--SET @NumPSAs          = 0
SET @EOD              = ''
SET @LastPSA_Value    = @MISSING_NUMBER
SET @LastPSA_Date     = @MISSING_DATE
SET @MetsEvent        = ''
SET @HormEvent        = ''
 
DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate              datetime NULL,
   VarString             varchar(500) NULL,
   VarDelimited          varchar(500) NULL,
   TableNames            varchar(200) NULL,
   PrimaryKeys           varchar(50) NULL
   )

DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarValue
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarValue     varchar(255) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   VarStopDate  varchar(50) NULL,
   TableName    varchar(50) NULL,
   PrimaryKey   int NOT NULL
   )

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, CAST(dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) as varchar(255)), ISNULL(PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN ProstateBiopsyPath ON Pathology.PathologyId=ProstateBiopsyPath.PathologyId
WHERE Procedures.PatientId = @PatientId AND 
      ProcSite='Prostate' AND ProcName IN('TURP','TRUS Biopsy','Biopsy','Needle Biopsy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ClinStageDateText, ClinStageSystem, ClinStageT, ClinStageQuality, ClinStageDate, 'ClinicalStages', ClinicalStageId
FROM ClinicalStages
WHERE (ClinicalStages.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT DxDateText, DxType, DxResult, DxQuality, DxDate,  'Diagnostics', DiagnosticId
FROM Diagnostics
WHERE (Diagnostics.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT LabDateText, LabTest, LabResult, LabQuality, LabDate, 'LabTests', LabTestId
FROM LabTests
WHERE (LabTests.PatientId = @PatientId AND LabTest IN ('PSA','PSAUS','TEST') AND LabResult IS NOT NULL)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT MedTxDateText, MedTxType, MedTxAgent, MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId
FROM MedicalTherapy
WHERE (MedicalTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy'), LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy'), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName = 'Orchiectomy'

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'Nephrectomy', ISNULL(ProcName,'Nephrectomy') + ISNULL(' '+ProcSide,''), ProcQuality, ProcDate, 'Procedures',Procedures.ProcedureId
FROM Procedures
WHERE PatientId = @PatientId AND ProcName IN('Nephrectomy','Partial Nephrectomy','Laparoscopic Nephroureterectomy','Partial for Horshoe Kidney','Laparoscopic Partial Nephrectomy','Nephroureterectomy','Laparoscopic Radical Nephrectomy','Radical Nephrectomy','Exploratory Laparotomy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, 'RPLND', RTRIM('RPLND ' + ISNULL(ProcApproach,'')), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName = 'RPLND'

--Added Rank in case need to use top 1 clause to return only the best row version
INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, RPSummary, DataQuality, ProcDate, TableName, ProcedureId
FROM 
(
SELECT ProcDateText, ISNULL(ProcName,'Prostatectomy') ProcName,
       dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(PathQuality,ProcQuality)) + ' (' + 
       dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(PathQuality,ProcQuality))+ ')' + ' (' + ISNULL(PathQuality,ProcQuality) + ')' RPSummary, 
       ISNULL(PathQuality,ProcQuality) DataQuality, ProcDate,  'Procedures' TableName, Procedures.ProcedureId,
       CASE PathQuality WHEN 'OUT' THEN 1 
                        WHEN 'REV' THEN 2
                        WHEN 'STD' THEN 3
                        WHEN 'RR' THEN 4
                        ELSE 0
       END RP_RANK
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN ProstatectomyPath ON ProstatectomyPath.PathologyId = Pathology.PathologyId
WHERE Procedures.PatientId = @PatientId AND ProcName IN('CP','LP','LP_CONV','PP','RALP','RP','SalvCP','SalvLP','SalvRP')
) a 
ORDER BY ProcDate DESC, RP_RANK DESC

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText,'Cystectomy', ISNULL(ProcName,'Cystectomy'),ProcQuality,ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures 
WHERE PatientId = @PatientId AND ProcName IN('Cystectomy','CP','Cysto-Prostatectomy','Partial Cystectomy','Radical Cystectomy','Salvage Radical Cystectomy')
      AND Procedures.ProcedureId NOT IN (SELECT PrimaryKey FROM @ChronoTable WHERE TableName='Procedures')

--procedures not in the current list
INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT ProcDateText, ProcName, LTRIM(ISNULL(ProcSide + ' ','') + ISNULL(ProcSite,'')), ProcQuality, ProcDate, 'Procedures', Procedures.ProcedureId
FROM Procedures LEFT OUTER JOIN 
                (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey)
SELECT RadTxDateText, RadTxType, RadTxTotalDose, RadTxQuality, RadTxDate,RadTxStopDateText, 'RadiationTherapy', RadiationTherapyId
FROM RadiationTherapy
WHERE (RadiationTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT BrachyDateText,'Brachytherapy',BrachyIsotope,BrachyQuality,BrachyDate,'BrachyTherapy',PatientId
FROM BrachyTherapy
WHERE (BrachyTherapy.PatientId = @PatientId AND ISNULL(BrachyPending,0)=0)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT StatusDateText, 'Status', status, statusQuality, statusDate, 'Status', statusId
FROM Status
WHERE (Status.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT PtDeathDateText, 'Status', PtDeathType, Null, PtDeathDate, 'Patients', PatientID
FROM Patients
WHERE (PtDeathDate IS NOT NULL) AND (PatientID=@PatientID)

--Clean up local variables for each record fetched
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarValue = ''
WHERE VarValue IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarValue = dbo.fnPacManStr(VarValue)
WHERE TableName = 'LabTests' AND (ISNUMERIC(VarValue)=0 OR VarValue LIKE '%,%')
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL

--SELECT * FROM @ChronoTable ORDER BY SortDate
SET @strOutPut = ''
SET @strPatientHPI = ''
DECLARE tables_cursor CURSOR LOCAL FAST_FORWARD
   FOR
   SELECT VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,PrimaryKey,TableName
   FROM @ChronoTable
   ORDER BY SortDate ASC
OPEN tables_cursor
IF CURSOR_STATUS ('local','tables_cursor') = 1
BEGIN
   --SET @starttime= GETDATE()
   --SET @strDebug= 'START ' + CAST(@starttime as varchar)
   FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@intPrimaryKey,@strTableName
   WHILE (@@FETCH_STATUS <> -1)
   BEGIN  
      --DETERMINE if record is pre-treatment assume record is not pre-treatment
      SET @blnPreTx = 0
      IF @dteDate IS NULL 
         SET @blnPreTx = 1
      ELSE IF @TxDate = @MISSING_DATE
         SET @blnPreTx = 1
      ELSE IF @dteDate = @TxDate
         SET @blnPreTx = 1     

      -- PSA
      IF @strVariable IN('PSA','PSAUS')
      BEGIN
         --accomodate <,>, <=, >=
         --SET @strValue = dbo.fnPacManStr(@strValue) --not need cause of update statement        
         IF ISNUMERIC(@strValue) = 1
         BEGIN
            SET @blnValidPSA = 1
            -- PSA invalid if patient on hormone therapy
            IF (@blnPreTx = 1 AND @NeoAdjHormTx <> '') OR (@AdjHormTx <> '') OR (@HormEvent <> '')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@HormTxDate = @MISSING_DATE) OR (@dteDate > @HormTxDate)
                     SET @blnValidPSA = 0

            -- PSA invalid if patient on chemotherapy
            IF (@blnPreTx = 1 AND @NeoAdjChemoTx <> '') OR (@AdjChemoTx <> '') OR (@MetsEvent LIKE '%CHEMO%')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@ChemoTxDate = @MISSING_DATE) OR (@dteDate > @ChemoTxDate)
                     SET @blnValidPSA = 0

            -- PSAs invalid within specified days after prostate biopsy
            IF @BiopsyDate <> @MISSING_DATE AND @dteDate IS NOT NULL
               IF @dteDate > @BiopsyDate
                  IF (@dteDate - @BiopsyDate) < @BiopsyDays
                     SET @blnValidPSA = 0

            -- find valid pre-treatment PSA 
            IF @blnValidPSA = 1   
               IF @blnPreTx = 1
               BEGIN
                  IF NOT (@dteDate IS NULL AND @PreTxPSA <> @MISSING_NUMBER AND @PreTxPSA > CAST(@strValue AS float(24)))
                     BEGIN
                        SET @PreTxPSA = CAST(@strValue AS float(24))
                        IF @EForm=1
                           SET @PreTxPSAID = @intPrimaryKey --used for eform
                     END 
                  IF @dteDate IS NOT NULL
                     SET @PreTxPSADate = @dteDate
               END
               ELSE
                  SET @LastPSA_Value = @strValue
               IF @dteDate IS NOT NULL
                  SET @LastPSA_Date = @dteDate
         END 
      END
      ELSE
      -- Prostate Biopsy
      IF @strVariable IN('NEEDLE BIOPSY','BIOPSY','TURP','TRUS Biopsy') --dbo.fnIsBiopsyProstate (@strVariable)= 1
      BEGIN
         -- which biopsy is the diagnostic biopsy?
         -- save date to check for PSAs within 3 weeks of biopsy
         IF @blnPreTx = 1
            IF @dteDate IS NOT NULL
            BEGIN
               SET @BiopsyDate = @dteDate
               -- diagnostic biopsy is first positive biopsy
               -- but if ther are later pre-tx grades, use them
               IF @strValue <> '' AND @strValue NOT IN('NEG','PIN','ASAP','Negative') --dbo.fnIsAbnormalBiopsyProstate (@strValue) = 1
                  IF @DxBxDate = @MISSING_DATE OR 
                                 (@strDataQuality='RR' AND @DxBxQuality <> 'RR' AND @DxBxDate = @dteDate) OR 
                                 (@strDataQuality IN('STD','REV') AND @DxBxQuality = 'OUT' AND @DxBxDate = @dteDate)
                  BEGIN
                     SET @DxBxType = @strVariable
                     SET @DxBxDate = @dteDate
                     SET @DxBxDateText = @strDate
                     SET @DxBxSummary = @strValue + ' (' + @strDataQuality + ')'
                     SET @DxBxQuality = @strDataQuality
	                  SET @DxBiopsyID = @intPrimaryKey --for paper form
                     -- move the clinical state forward
                     IF @ClinState < @LOCALIZED
                     BEGIN
                        SET @ClinState = @LOCALIZED
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                        IF @EForm=1
                           BEGIN
                              SET @ClinStateID = @intPrimaryKey
                              SET @ClinStateTable = @strTableName
                           END                           
                     END
                  END
            END         
      END   -- does not deal with post-curative treatment (RP, XRT) biopsies
      ELSE
      -- UICC/AJCC Clinical Tumor Stage
      IF @strVariable IN('UICC_92','UICC_97','UICC_02')
      BEGIN
         IF @blnPreTx = 1 AND @strValue <> ''
            If @strDataQuality = 'RR' OR @ClinStageQuality <> 'RR'
            BEGIN
               IF @dteDate IS NOT NULL
               BEGIN
	               SET @ClinStageDate = @dteDate            
	               SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
	               SET @ClinStageQuality = @strDataQuality
                  SELECT @ClinStageN = ClinStageN, @ClinStageM = ClinStageM
                  FROM ClinicalStages WHERE ClinicalStageId = @intPrimaryKey
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey --used for eform
	            END
	            ELSE IF @strValue > @ClinStageT
	            BEGIN
		            -- don't need to copy date b/c all nulls sort to top
         		   SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
	               SET @ClinStageQuality = @strDataQuality
                  SELECT @ClinStageN = ClinStageN, @ClinStageM = ClinStageM
                  FROM ClinicalStages WHERE ClinicalStageId = @intPrimaryKey
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey --used for eform
               END
            END       
      END
      ELSE
      BEGIN   
         -- Chemotherapy (NOT AN ELSE b/c of combination therapies)
         IF (@strVariable LIKE '%CHEMO%') AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @ChemoTxDate = @MISSING_DATE
                  SET @ChemoTxDate = @dteDate
   
            IF @blnPreTx = 1
               SET @NeoAdjChemoTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjChemoTx = @strVariable
               -- assumes any chemo after treatment indicates metastasis
               SET @MetsEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' ' 
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               IF @EForm=1
                  INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
               ELSE
                  INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
               SET @strOutput = ''   
         END
         -- Hormone Therapy (NOT AN ELSE b/c of combination therapies)
         IF ((@strVariable LIKE '%HORM%')
            OR (@strVariable = 'ORCH')
            OR (@strVariable ='Bilateral Orchiectomy')
            OR (@strVariable LIKE 'ORCH_BIL%')
            OR (@strVariable LIKE '%LHRH%')
            OR (@strVariable LIKE '%AA%')
            OR (@strVariable LIKE '%ESTROGEN%')
            OR (@strVariable LIKE '%PROGEST%'))
            AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @HormTxDate = @MISSING_DATE
                  SET @HormTxDate = @dteDate
            IF @blnPreTx = 1
               SET @NeoAdjHormTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjHormTx = @strVariable
               SET @HormEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' '  
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               --prevent the same record from being inserted again need a better way
               IF NOT EXISTS(SELECT SortDate FROM @SortTable WHERE SortDate=@dteDate AND VarString=@strOutput)
                  BEGIN
                     IF @EForm=1                  
                        INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
                     ELSE
                        INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)                        
                  END
               SET @strOutput = ''   
         END 
      END    
      --Testosterone
      IF @strVariable LIKE 'TEST%' 
      --look for castrate levels of testosterone
      BEGIN 
        IF ISNUMERIC(@strValue) = 1
           IF CAST(@strValue As float(24)) < @CASTRATE_TESTOSTERONE_LEVEL
              SET @Castrate = 1     
      END
      --check if castrated
      IF @strVariable IN ('ORCH_BIL','Bilateral Orchiectomy')
         SET @Castrate = 1
      --Diagnostics Imaging
      --these should be positive diagnostics for metastasis
      --what exactly is positive?
      --should it require specifying extent of disease?
      --should CT and MRI be confirmed by LN_BX?
      --should BS or PET be confirmed by BONE_BX?
      --add target latter so can use other scan types?
      IF @strVariable IN('BS','Bone Scan','BONE_BX','LN_BX') --('PET','PET Scan','XRAY','X-RAY','RADIOGRPH',)  
            --OR @strVariable LIKE 'CT%' OR @strVariable LIKE '%MRI%'--dbo.fnIsDiagnostic(@strVariable) = 1
      BEGIN
         IF @strValue LIKE 'POS%' OR 
            @strValue LIKE 'ABN_P%' OR 
            @strValue LIKE 'ABN_MAL%' OR
            @strValue='Abnormal Malignant' OR
            @strValue='Abnormal'	OR
            @strValue='Abnormal Prostate'--dbo.fnIsAbnormalDiagnostic(@strValue) = 1
            IF @ClinState < @NON_CASTRATE_METS
            BEGIN
               IF @Castrate = 1
                  BEGIN
                     SET @ClinState = @CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                  END
               ELSE
                  BEGIN
                     SET @ClinState = @NON_CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                  END
               IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
            END
      END
      ELSE
      -- Radiation Therapy
      IF @strVariable IN('XRT','EBRT','RT','COMBO','BRACHY','COMBO','RADIOISOTOPE','SEED'
                        ,'IMPLANT','Brachytherapy',
                        'External Beam','Radiation Therapy, Unspecified','External Beam, IMRT',
                        'High-Dose Rate Brachytherapy','External Beam, 3D Conventional',
                        'External Beam, 3D Conformal') --dbo.fnIsRadiationtherapy(@strVariable) = 1 OR dbo.fnIsBrachytherapy(@strVariable)= 1
      BEGIN
         IF @ClinState < @LOCALIZED
         BEGIN
            SET @ClinState = @LOCALIZED
            IF @EForm=1
               BEGIN
                  SET @ClinStateID = @intPrimaryKey
                  SET @ClinStateTable = @strTableName
               END   
            IF @dteDate IS NOT NULL
               BEGIN
                  SET @ClinStateDate = @dteDate
                  SET @ClinStateDteText = @strDate
               END
         END
         IF @blnPreTx = 1
            BEGIN 
               SET @NeoAdjRadTx = @strVariable
               IF @dteDate IS NOT NULL
                  SET @TxDate = @dteDate
            END
         SET @strOutput = @strOutput + @strDate + ' '
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         SET @strOutput = @strOutput + @strVariable + ' ' + @strValue
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''     
      END
      ELSE
      -- Other Medical Therapy
      IF @strVariable IN('BIO_TX','IMMUNO','CLIN_TRIAL','STEROID','OTHER','GENE_TX')
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' 
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         IF @strValue <> ''
            SET @strOutput = @strOutput +  @strValue
         ELSE
            SET @strOutput = @strOutput + @strVariable
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)            
         SET @strOutput = ''   
      END
      ELSE
      -- Extent of Disease
      IF @strVariable = 'EOD'
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' + @strVariable + ' ' + @strValue -- + @CharLineFeed
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''   
      END
      ELSE
      -- Radical Prostatectomy
      IF @strVariable LIKE 'R[RCPL]P' OR @strVariable LIKE '[RCPL]P' OR @strVariable LIKE 'Salv[RCPL]P' OR @strVariable='RALP' OR @strVariable = 'LP_CONV' --dbo.fnIsRadicalProstatectomy(@strVariable) = 1
      BEGIN
         SET @blnHadRP = 1
         IF @ClinState < @LOCALIZED
         BEGIN
           SET @ClinState = @LOCALIZED
           IF @EForm=1
              BEGIN
                 SET @ClinStateID = @intPrimaryKey
                 SET @ClinStateTable = @strTableName
              END   
           IF @dteDate IS NOT NULL
              BEGIN
                 SET @ClinStateDate = @dteDate
                 SET @ClinStateDteText = @strDate
              END                                         
         END
         IF @blnPreTx = 1 
            IF @dteDate IS NOT NULL
               SET @TxDate = @dteDate
         SET @strOutput = @strOutput + @strDate + ' ' + @strVariable + ' ' + @strValue -- + @CharLineFeed
         IF @EForm=1
            BEGIN
            	SET @strTableNames = 'ProstatectomyProc'
               SET @strPrimaryKeys = CAST(@intPrimaryKey as varchar(50))
               SET @strVarDelimited = '__'+ @strDate + ' ' + @strVariable + '|'
               IF @strValue <> ''
                  BEGIN
                     SELECT TOP 1 @ProstatePathId=ProstatectomyPath.PathologyId 
                     FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId=Pathology.ProcedureId
                                     INNER JOIN ProstatectomyPath ON Pathology.PathologyId=ProstatectomyPath.PathologyId
                     WHERE Procedures.ProcedureId=@intPrimaryKey
                     IF @ProstatePathId IS NOT NULL
                        BEGIN
                           SET @strTableNames = @strTableNames + ',ProstatectomyPath'
                           SET @strPrimaryKeys =  @strPrimaryKeys + ',' + CAST(@ProstatePathId as varchar(50))
                           SET @strVarDelimited = @strVarDelimited + '__' + @strValue + '|'
                        END
                     ELSE
                        SET @strVarDelimited = @strVarDelimited + '__' + @strValue + '|'

                     SELECT TOP 1 @PLNDProcId=Procedures.ProcedureId 
                     FROM Procedures LEFT OUTER JOIN Pathology ON Procedures.ProcedureId=Pathology.ProcedureId
                     WHERE Procedures.OperatingRoomDetailId IN
                           (SELECT OperatingRoomDetailId FROM Procedures WHERE ProcedureId=@intPrimaryKey) AND 
                           Procedures.PatientId=@PatientId AND ProcName='PLND' AND PathResult IS NOT NULL
                     IF @PLNDProcId IS NOT NULL
                        BEGIN
                           SET @strTableNames = @strTableNames + ',Procedures'
                           SELECT @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@PLNDProcId as varchar(50))
                           IF @ProstatePathId IS NOT NULL
                              SET @strVarDelimited = REPLACE(@strVarDelimited,'LNI','|__LNI')
                        END
                  END
               INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,@strVarDelimited,@strTableNames,@strPrimaryKeys)
               SET @strTableNames = ''
               SET @strPrimaryKeys = ''
               SET @strVarDelimited = ''
            END
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''   
      END      
      ELSE
      -- Display all these other surgeries
      IF (@strVariable LIKE '%Orchiectomy') OR @strVariable IN('Nephrectomy','RPLND','Cystectomy')
      BEGIN
         SET @strOutput = @strOutput +  @strDate + ' ' + @strVariable + ' ' +  @strValue
         IF @EForm=1     
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE 
            INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
         SET @strOutput = ''
      END
      ELSE
      -- Status    
      IF @strVariable = 'Status'
      BEGIN

      -- Extent of Disease
         IF @strValue IN('Localized','LCR','Local Recurrence')
            BEGIN
               IF @ClinState < @LOCALIZED                   BEGIN
                        SET @ClinState = @LOCALIZED
                        IF @EForm=1
                           BEGIN
                              SET @ClinStateID = @intPrimaryKey
                              SET @ClinStateTable = @strTableName
                           END   
                        IF @dteDate IS NOT NULL
                           BEGIN
                              SET @ClinStateDate = @dteDate
                              SET @ClinStateDteText = @strDate
                           END
                  END
            END
         ELSE
            IF @strValue IN('BCR','Biochemical Recurrence')
            BEGIN
               IF @Castrate = 1 AND @ClinState < @RISING_PSA_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_CASTRATE
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
               ELSE IF @ClinState < @RISING_PSA_NON_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_NON_CASTRATE
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         ELSE
            IF @strValue IN('RisingPSA_Castrate','Rising PSA Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('RisingPSA_NonCastrate','Rising PSA Non-Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_NON_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_NON_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsNonCastrate','Non-Castrate Mets','Clinical Mets Non-Castrate')
            BEGIN
               IF @ClinState < @NON_CASTRATE_METS
               BEGIN
                  SET @ClinState = @NON_CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsCastrate','Castrate Mets','Clinical Mets Castrate')
            BEGIN
               IF @ClinState < @CASTRATE_METS
               BEGIN
                  SET @ClinState = @CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                     END   
                  IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
               END
            END
         ELSE
            IF @strValue IN('METS','Distant Metastasis')
            BEGIN
               IF @ClinState < @CASTRATE_METS AND @Castrate = 1
                  BEGIN
                     SET @ClinState = @CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
               ELSE IF @ClinState < @NON_CASTRATE_METS
                  BEGIN
                     SET @ClinState = @NON_CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         ELSE
            IF @strValue IN('DOD','DOC','DUC','Dead','Death from Prostate Cancer','Death from Other Cause',
                            'Death from Unknown Causes')
            BEGIN
               If @ClinState < @DEAD 
                  BEGIN
                     SET @ClinState = @DEAD
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                        END   
                     IF @dteDate IS NOT NULL
                        BEGIN
                           SET @ClinStateDate = @dteDate
                           SET @ClinStateDteText = @strDate
                        END
                  END
            END
         --Active Surveillance detection removed due to inaccuracy, code based detection algorithm built
         /*
         ELSE
            IF @strValue = 'Active Surveillance'
               BEGIN
                  IF @ActiveSurId IS NULL
                     BEGIN 
                        SELECT @ActiveSurId=StatusId
                        FROM Status 
                        WHERE Status = 'Active Surveillance' AND
                              StatusDisease IN('Prostate','Prostate Cancer') AND
                              StatusDate IS NOT NULL AND
                              StatusId = @intPrimaryKey

                        IF @ActiveSurId IS NOT NULL
                           BEGIN 
                              SET @strOutput = @strDate + ' Started ' + @strValue
                              IF @EForm=1
                                 INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
                              ELSE
                                 INSERT @SortTable (SortDate,VarString) VALUES(@dteDate,@strOutPut)
                              SET @strOutput = ''
                           END
                     END
               END
         */
      END
      --PRINT @strDate + ' ' + @strVariable + ' ' + @strValue + ' ' + @strDataQuality
      --SET @stoptime= GETDATE()
      --SET @strdebug = @strdebug + char(10) + @strVariable + ' ' + @stoptime --Cast to text
      --SELECT @stoptime - @starttime
      FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@intPrimaryKey,@strTableName
      --SET @starttime= GETDATE()
   END
   DEALLOCATE tables_cursor
   --PRINT @strdebug
END      
   
   -- assembles diagnosis date, stage, grade, pre tx psa line
   IF @EForm=1
      BEGIN
         IF @DxBxDate <> @MISSING_DATE
            BEGIN
               SET @strPatientHPI = @DxBxDateText + ' '
            	SET @strTableNames = 'Procedures'
               SET @strPrimaryKeys = CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = '__' + @DxBxDateText + '|'
            END 
         IF @ClinStageT <> ''
            BEGIN
               SET @strPatientHPI = @strPatientHPI + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ') '
               SET @strTableNames = @strTableNames + ',ClinicalStages'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@ClinStageID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ')|'
            END
         IF @DxBxType <> ''
            BEGIN 
               SET @strPatientHPI =  @strPatientHPI + @DxBxType + ' ' + @DxBxSummary + ' '
               SET @strTableNames = @strTableNames + ',Procedures'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @DxBxType + ' ' + @DxBxSummary + '|'
            END
         IF @PreTxPSA <> @MISSING_NUMBER AND @blnHadRP =1
            BEGIN
               SET @strPatientHPI = @strPatientHPI + ' PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + ' '
               SET @strTableNames = @strTableNames + ',LabTests'
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@PreTxPSAID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + '|'
            END
         --strip leading comma from TableNames and PrimaryKeys concatenation
         IF LEFT(@strTableNames,1) = ','
            SET @strTableNames = RIGHT(@strTableNames,LEN(@strTableNames)-1)
         IF LEFT(@strPrimaryKeys,1) = ','
            SET @strPrimaryKeys = RIGHT(@strPrimaryKeys,LEN(@strPrimaryKeys)-1)
         INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@strPrimaryKeys)
         SET @strTableNames = ''
         SET @strPrimaryKeys = ''
         SET @strVarDelimited = ''
      END 
   ELSE
      BEGIN
         IF @DxBxDate <> @MISSING_DATE
            SET @strPatientHPI = @DxBxDateText + ' '
         IF @ClinStageT <> ''
            SET @strPatientHPI = @strPatientHPI + @ClinStageT + ISNULL(@ClinStageN,'') + ISNULL(@ClinStageM,'') + ' (' + RIGHT(@ClinStageSystem,2) + ') '
         IF @DxBxType <> ''
            SET @strPatientHPI =  @strPatientHPI + @DxBxType + ' ' + @DxBxSummary + ' ' 
         IF @PreTxPSA <> @MISSING_NUMBER AND @blnHadRP =1
            SET @strPatientHPI = @strPatientHPI + ' PreRP PSA ' + CAST(@PreTxPSA AS varchar(50)) + ' '
         INSERT @SortTable (SortDate,VarString) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI)
      END
   SET @strPatientHPI = ''   -- make sure this is set to '' by default

   --adds pre diagnosis biopsy psa to HPI
   IF @EForm=1
      INSERT INTO @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys)
      SELECT TOP 1 SortDate, VarDate + ' PreDx Biopsy PSA: ' + VarValue,'__'+VarDate + ' PreDx Biopsy PSA: ' + VarValue+'|',TableName,PrimaryKey
      FROM @ChronoTable 
      WHERE TableName='LabTests' AND VarName IN('PSA','PSAUS') AND VarValue<>'' AND SortDate<=@DxBxDate
      ORDER BY SortDate DESC
   ELSE
      INSERT INTO  @SortTable (SortDate,VarString)
      SELECT TOP 1 SortDate, VarDate + ' PreDx Biopsy PSA: ' + VarValue
      FROM @ChronoTable 
      WHERE TableName='LabTests' AND VarName IN('PSA','PSAUS') AND VarValue<>'' AND SortDate<=@DxBxDate
      ORDER BY SortDate DESC

   -- assemble clinical state / status line
   IF @ClinStateDate <> @MISSING_DATE
      BEGIN
         SET @strPatientHPI = @strPatientHPI + @ClinStateDteText + ' '
         -- decode numeric clinical states back into text for display
         --IF @ClinState = @NO_PROSTATE_CANCER_DIAGNOSIS
         --   SET @strPatientHPI = @strPatientHPI + '' --Removed 'No Prostate Cancer Diagnosis '
         IF @ClinState = @LOCALIZED
            SET @strPatientHPI = @strPatientHPI + 'Localized'
         IF @ClinState = @RISING_PSA_NON_CASTRATE
            SET @strPatientHPI = @strPatientHPI + 'Rising PSA Non-Castrate'
         IF @ClinState = @RISING_PSA_CASTRATE
            SET @strPatientHPI = @strPatientHPI + 'Rising PSA Castrate'
         IF @ClinState = @NON_CASTRATE_METS
            SET @strPatientHPI = @strPatientHPI + 'Non-Castrate Mets'
         IF @ClinState = @CASTRATE_METS
            SET @strPatientHPI = @strPatientHPI + 'Castrate Mets'
         IF @ClinState = @DEAD
            SET @strPatientHPI = @strPatientHPI + 'Dead'
         IF @EForm=1
            BEGIN
               SET @strVarDelimited = '__' + @strPatientHPI + '|'
               SET @strTableNames = @ClinStateTable
               SET @strPrimaryKeys = CAST(@ClinstateID as varchar(50))
               INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@strPrimaryKeys)
               SET @strTableNames = ''
               SET @strPrimaryKeys = ''
               SET @strVarDelimited = ''
            END
         ELSE
            INSERT @SortTable (SortDate,VarString) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI)
      END     
   SET @strPatientHPI = ''   
  
   IF @EForm=1
      BEGIN
         SELECT VarString AS PatientHPI,VarDelimited AS PatientHPIDelimited,TableNames,PrimaryKeys
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   ELSE
      BEGIN
         SELECT VarString AS PatientHPI 
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   --SELECT * FROM @ChronoTable
  
   SELECT @DxBiopsyID AS DxBiopsyId, NULL AS PreRPNomo,NULL AS PreRPError, 
          NULL AS PreXRTNomo, NULL AS PreXRTError, NULL AS PreBrachyNomo,
          NULL AS PreBrachyError,NULL AS PostRP2yrNomo,NULL AS PostRP5yrNomo,
          NULL AS PostRP7yrNomo,NULL PostRPError

   --Retired, used to view the parameters used to calculate nomogram scores
   IF @NomogramValues = 1 
      SELECT NULL AS PreTxPSA ,NULL AS ClinStage, NULL AS ClinStageSystem, 
             NULL AS ClinStage92, NULL AS ClinStage97, NULL AS BxGG1, 
             NULL AS BxGG2,NULL AS NeoAdjHormTx,NULL AS NeoAdjRadTx,
             @DxBiopsyID AS DxBiopsyId,NULL AS BxGGS, NULL AS XRTDose,NULL AS RP_GGS,
             NULL as RP_ECE,NULL AS RP_MarginStatus,NULL AS RP_SVI,NULL AS RP_LNI

--98ModifyspGetPatientHPIProstateGU.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spGetPatientHPIProstateGU]
   @PatientId int = NULL,
   @EForm bit = 0,
   @Rowcount int = NULL OUTPUT
AS
SET NOCOUNT ON
--These variables are for debuging / testing speed
DECLARE @starttime datetime
DECLARE @stoptime datetime
Declare @strDebug varchar(8000)
--End of Debug variables

DECLARE @strPatientHPI     varchar(1000)
DECLARE @strDate           varchar(50)
DECLARE @strStopDate       varchar(50)
DECLARE @dteDate           datetime
DECLARE @strVariable       varchar(50)
DECLARE @strValue          varchar(255)
DECLARE @strDataQuality    varchar(50)
DECLARE @strTableName      varchar(50)
DECLARE @strExtraInfo      varchar(50) 
DECLARE @intPrimaryKey     int
DECLARE @i                 int
DECLARE @blnPreTx          bit
DECLARE @blnValidPSA       bit
DECLARE @sngTime           float(24) --VBA single float(53) double
DECLARE @BiopsyDate        datetime
DECLARE @BiopsyDays        float(24) -- number of days after prostate biopsy that PSA is invalid
DECLARE @strOutPut         varchar(1000)

--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'
SET @BiopsyDate = @MISSING_DATE
SET @BiopsyDays = 21

--Clinical states constants (must be ordered)
DECLARE @NO_PROSTATE_CANCER_DIAGNOSIS smallint
DECLARE @LOCALIZED                    smallint
DECLARE @RISING_PSA_NON_CASTRATE      smallint
DECLARE @RISING_PSA_CASTRATE          smallint
DECLARE @NON_CASTRATE_METS            smallint
DECLARE @CASTRATE_METS                smallint
DECLARE @DEAD                         smallint
SET @NO_PROSTATE_CANCER_DIAGNOSIS = 0
SET @LOCALIZED = 1
SET @RISING_PSA_NON_CASTRATE = 2
SET @RISING_PSA_CASTRATE = 3
SET @NON_CASTRATE_METS = 4   
SET @CASTRATE_METS = 5  
SET @DEAD = 6

--This is used to determine castrate clinical states
DECLARE @CASTRATE_TESTOSTERONE_LEVEL smallint
SET @CASTRATE_TESTOSTERONE_LEVEL = 50

DECLARE @ClinStateDate    datetime        --date of last clinical state transition
DECLARE @ClinStateDteText varchar(50)     --datetext of last clinical state transition
DECLARE @ClinState        int             --current clinical state (0 to 5)
DECLARE @Castrate         bit             --castrate levels of testosterone (<50)
DECLARE @DxBiopsyID       int             --primary key for diagnostic biopsy record
DECLARE @DxBxDate         datetime        --date of diagnostic (first positive) biopsy
DECLARE @DxBxDateText     varchar(50)     --datetext of diagnostic (first positive) biopsy
DECLARE @DxBxType         varchar(50)     --diagnostic biopsy type: TURP or needle
DECLARE @DxBxSummary      varchar(255)     --pathologic summary of diagnostic biopsy: eg. 3+4
DECLARE @DxBxQuality      varchar(50)     --data quality for diagnostic biopsy
DECLARE @PreTxPSA         float(24)       --valid PSA before any "curative" treatment (XRT or RP)
DECLARE @PreTxPSADate     datetime 
DECLARE @PreDxBxPSA       varchar(50)     --PSA right before diagnostic biopsy
DECLARE @ClinStageDate	  datetime 
DECLARE @ClinStageSystem  varchar(50)     --UICC TNM staging system used
DECLARE @ClinStageT       varchar(50)     --pre-treatment UICC Tumor Stage
DECLARE @ClinStageN       varchar(50)     --pre-treatment UICC Nodes Stage
DECLARE @ClinStageM       varchar(50)     --pre-treatment UICC Metastatis Stage

DECLARE @ClinStageQuality varchar(50)     --data quality of clinical staging data
DECLARE @NeoAdjHormTx     varchar(50)     --patient has had neo-adjuvant hormone therapy
DECLARE @NeoAdjHormTxDate datetime        --date of first hormone therapy (all PSAs after this are invalid?)
DECLARE @NeoAdjRadTx      varchar(50)     --patient has had neo-adjuvant radiation therapy
DECLARE @NeoAdjRadTxDate  datetime        --date of last neo-adjuvant radiation therapy (all following pre-tx PSAs are invalid)
DECLARE @NeoAdjChemoTx    varchar(50)     --patient has had neo-adjuvant chemotherapy
DECLARE @NeoAdjChemoDate  datetime        --date of last neo-adjuvant chemotherapy
--DECLARE @Prostatectomy    bit           --patient had prostatectomy (means he will always use RP PSA recurrence methods)
DECLARE @TxDate           datetime        --date of first "curative" treatment
DECLARE @TxType           varchar(50)     --curative treatment type
DECLARE @AdjHormTx        varchar(50)
DECLARE @AdjChemoTx       varchar(50)
--DECLARE @NumPSAs          int --number of PSAs after curative treatment
DECLARE @EOD              varchar(50)     --last extent of disease 
DECLARE @LastPSA_Value    varchar(50)
DECLARE @LastPSA_Date     datetime   

DECLARE @HormEvent        varchar(50)
DECLARE @HormTxDate       datetime
DECLARE @MetsEvent        varchar(50)
DECLARE @ChemoTxDate      datetime

--used for eform
DECLARE @strTableNames     varchar(200)
DECLARE @strPrimaryKeys    varchar(50)
DECLARE @strVarDelimited   varchar(500)
DECLARE @strFilters        varchar(200)
DECLARE @strQualities      varchar(200)
DECLARE @ClinStageID       int             --primary key for diagnostic clinical stage record
DECLARE @PreTxPSAID        int             --primary key for pre prostatectomy psa record
DECLARE @PreDxBxPSAID      int             --primary key for pre diagnosis biopsy psa record
DECLARE @PreDxBxPSAQuality varchar(50)     --data quality for pre diagnosis biopsy psa record
DECLARE @ClinStateID       int             --primary key for clin state record
DECLARE @ClinStateTable    varchar(50)     --table name where clin state obtained from
DECLARE @ClinStateQuality  varchar(50)     --data quality of clin state
DECLARE @blnHadRP          bit             --patient had prostatectomy
DECLARE @ProstatePathId    int             --primary key for ProstatectomyPath record
DECLARE @PLNDPathId        int             --primary key for Pathology of the PLND record
DECLARE @NO_PK             varchar(50)     --used to indicate that a table has no data for delimited format
DECLARE @NO_DQ             varchar(50)     --used to indicate that a table has no data quality for delimited format

--used for eform
SET @strTableNames    = ''
SET @strPrimaryKeys   = ''
SET @strVarDelimited  = ''
SET @strQualities = ''
SET @NO_PK = ',NO_PK'
SET @NO_DQ = 'NO_DQ'

SET @ClinStateDate     = @MISSING_DATE
SET @ClinStateDteText  = ''
SET @ClinState         = @NO_PROSTATE_CANCER_DIAGNOSIS
SET @Castrate          = 0
SET @DxBxDate          = @MISSING_DATE
SET @DxBxDateText      = ''
SET @DxBxType          = ''
SET @DxBxSummary       = ''
SET @DxBxQuality       = ''
SET @PreTxPSA          = @MISSING_NUMBER
SET @PreTxPSADate      = @MISSING_DATE
SET @ClinStageDate     = @MISSING_DATE
SET @ClinStageSystem   = ''
SET @ClinStageT        = ''
SET @ClinStageN        = ''
SET @ClinStageM        = ''
SET @ClinStageQuality  = ''
SET @NeoAdjHormTx      = 0
SET @NeoAdjHormTxDate  = @MISSING_DATE
SET @NeoAdjRadTx       = 0
SET @NeoAdjRadTxDate   = @MISSING_DATE
SET @NeoAdjChemoTx     = 0
SET @NeoAdjChemoDate   = @MISSING_DATE
SET @HormTxDate        = @MISSING_DATE
SET @ChemoTxDate       = @MISSING_DATE
--SET @Prostatectomy    = 0
SET @TxDate            = @MISSING_DATE
SET @TxType            = ''
--SET @NumPSAs          = 0
SET @EOD               = ''
SET @LastPSA_Value     = @MISSING_NUMBER
SET @LastPSA_Date      = @MISSING_DATE
SET @MetsEvent         = ''
SET @HormEvent         = ''
SET @PreDxBxPSA        = ''
SET @PreDxBxPSAQuality = ''

DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate              datetime NULL,
   VarString             varchar(500) NULL,
   VarDelimited          varchar(500) NULL,
   TableNames            varchar(200) NULL,
   Qualities             varchar(50) NULL,
   PrimaryKeys           varchar(50) NULL,
   StopDateText          varchar(50) NULL,
   Filters               varchar(200) NULL
   )

DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarValue
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarValue     varchar(255) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   VarStopDate  varchar(50) NULL,
   TableName    varchar(50) NULL,
   PrimaryKey   int NULL,
   VarExtraInfo varchar(110) NULL,
   Filters      varchar(200) NULL,
   VarDelimited varchar(500) NULL,
   TableNames   varchar(200) NULL,
   Qualities    varchar(50) NULL,
   PrimaryKeys  varchar(50) NULL
   )

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ProcName, CAST((dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) + ISNULL(' Other Histology: ' + PathHistology2,'')) as varchar(255)), ISNULL(PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId,ProcSite,
       'ProstateProc',
       '__' + ISNULL(ProcDateText,'') + ISNULL(' ' + ProcName,'') + '|' + '__' + ISNULL(CAST((dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) + ISNULL(' Other Histology: ' + PathHistology2,'')) as varchar(255)),'')  + '|',
       'Procedures,ProstateBiopsyPath', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ), CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(ProstateBiopsyPath.PathologyId as varchar(50)),@NO_PK)
FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN ProstateBiopsyPath ON Pathology.PathologyId=ProstateBiopsyPath.PathologyId
WHERE Procedures.PatientId = @PatientId AND 
      ProcSite='Prostate' AND ProcName IN('TURP','TRUS Biopsy','Biopsy','Needle Biopsy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo)
SELECT ClinStageDateText, ClinStageSystem, ClinStageT, ClinStageQuality, ClinStageDate, 'ClinicalStages', ClinicalStageId,
       ISNULL(ClinStageN,'') + ISNULL(',' + ClinStageM,'')
FROM ClinicalStages
WHERE (ClinicalStages.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT DxDateText, DxType, DxResult, DxQuality, DxDate,  'Diagnostics', DiagnosticId
FROM Diagnostics
WHERE (Diagnostics.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT LabDateText, LabTest, LabResult, LabQuality, LabDate, 'LabTests', LabTestId
FROM LabTests
WHERE (LabTests.PatientId = @PatientId AND LabTest IN ('PSA','TEST') AND LabResult IS NOT NULL)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey,VarExtraInfo,Filters)
SELECT MedTxDateText, MedTxType, MedTxAgent, MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId,ProtocolNum, 'MedTxType_' + MedTxType
FROM MedicalTherapy LEFT OUTER JOIN Protocols ON MedicalTherapy.ProtocolId=Protocols.ProtocolId
WHERE (MedicalTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText,LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy'), ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,''), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId,'TestisProc',
       '__' + ISNULL(ProcDateText,'') +  ' ' + LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy') + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK)       
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId
WHERE Procedures.PatientId = @PatientId AND ProcName = 'Orchiectomy'

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText,'Cystectomy', LTRIM(ISNULL(ProcName,'') + ' ' + ISNULL(RIGHT(PathStageSystem,2),'') + ' ' 
       + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' + ISNULL(PathStageM,'') + ' ' + ISNULL(PathGrade,'') + ' ' + ISNULL(PathResult,'') + ' ' +  ISNULL(PathHistology,'') + ' '
       + CASE WHEN UD_OperatingRoomDetailId IS NULL THEN '' ELSE 'Urinary Diversion:' + UD_ProcName + ' ' END)
       + CASE WHEN Pathology.OperatingRoomDetailId IS NULL THEN '' 
              ELSE ISNULL('Nodes:' + dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)),'')
         END
       , ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId,'BladderProc',
       '__' + ISNULL(ProcDateText,'') + ' ' + LTRIM(ISNULL(ProcName,'')) + '|' + 
       '__' + ISNULL(RIGHT(PathStageSystem,2),'') + ' ' + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' + ISNULL(PathStageM,'') + ' ' + ISNULL(PathGrade,'') + '|' +
       '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,PathologyStageGrade,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathologyStageGrade.PathQuality,','+@NO_DQ) + ISNULL(',' + Pathology.PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + (ISNULL(',' + CAST(PathologyStageGrade.PathologyStageGradeId as varchar(50)),@NO_PK)) + (ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK))
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN (
                                SELECT OperatingRoomDetailId, MAX(ProcedureId) AS UD_MAX_ProcedureId
                                FROM Procedures 
                                WHERE PatientId=@PatientId AND ProcName IN('IlealConduit','NeoBladder','ContCutaneous','ileal conduit','indiana pouch','IndianaPouch','Ileal Loop','Studer Pouch','Sigmoid Conduit','IlealConduit/SigmoidNeobladder')
                                GROUP BY OperatingRoomDetailId 
                                ) AS MaxUD ON Procedures.OperatingRoomDetailId = MaxUD.OperatingRoomDetailId 
                LEFT OUTER JOIN (
                                SELECT OperatingRoomDetailId AS UD_OperatingRoomDetailId, ProcName AS UD_ProcName,ProcedureId AS UD_ProcedureId
                                FROM Procedures 
                                WHERE PatientId=@PatientId
                                ) AS UrinaryDiversions ON UrinaryDiversions.UD_ProcedureId = MaxUD.UD_MAX_ProcedureId  
WHERE Procedures.PatientId = @PatientId AND ProcName IN('Cystectomy','CP','Cysto-Prostatectomy','Partial Cystectomy','Radical Cystectomy','Salvage Radical Cystectomy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ISNULL(ProcName,'Prostatectomy'),
       dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)) +
       ' (' + dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality))+ ')' + 
       ' (' + ISNULL(Pathology.PathQuality,ProcQuality) + ')', 
       ProcQuality, ProcDate,  'Procedures', Procedures.ProcedureId, 'ProstateProc',
       '__' + ISNULL(ProcDateText + ' ' ,'') + '|' + '__' + RTRIM(ISNULL(LkpProcName,'Prostatectomy')) + '|' + '__' + ISNULL(dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)),'') +
       ' (' + dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality))+ ')' + '|',
       'Procedures,ProstatectomyProc,ProstatectomyPath' + CASE WHEN PLND.PathologyId IS NOT NULL THEN ',Pathology' ELSE '' END, 
       ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + ProcQuality,','+@NO_DQ) + ISNULL(',' + Pathology.PathQuality,','+@NO_DQ) + 
       CASE WHEN PLND.PathologyId IS NOT NULL THEN ISNULL(',' + COALESCE(Pathology.PathQuality,ProcQuality),@NO_DQ) ELSE '' END,
       CAST(Procedures.ProcedureId as varchar(50)) + (ISNULL(',' + CAST(ProstatectomyProc.ProcedureId as varchar(50)),@NO_PK)) + (ISNULL(',' + CAST(ProstatectomyPath.PathologyId as varchar(50)),@NO_PK)) + 
       CASE WHEN PLND.PathologyId IS NOT NULL THEN (ISNULL(',' + CAST(PLND.PathologyId as varchar(50)),'')) ELSE '' END
FROM Procedures LEFT OUTER JOIN ProstatectomyProc ON ProstatectomyProc.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN ProstatectomyPath ON ProstatectomyPath.PathologyId = Pathology.PathologyId 
                LEFT OUTER JOIN (
                                SELECT PathologyId,OperatingRoomDetailId,PathQuality,
                                       ROW_NUMBER() OVER(ORDER BY PathologyId DESC) AS RowNum
                                FROM Pathology
                                WHERE Pathology.PatientId=@PatientId AND PathSpecimenType='PLND'
                                ) PLND ON Procedures.OperatingRoomDetailId = PLND.OperatingRoomDetailId AND
                                          COALESCE(Pathology.PathQuality,ProcQuality,'') = ISNULL(PLND.PathQuality,'') AND
                                          RowNum = 1
               LEFT OUTER JOIN (
                               SELECT LkpCode,LkpDescription LkpProcName
                               FROM LookupCodes 
                               WHERE LkpFieldName = 'ProcName' 
                               ) LKP ON ProcName=LkpCode
WHERE Procedures.PatientId = @PatientId AND ProcName IN('CP','LP','LP_CONV','PP','RALP','RP','SalvCP','SalvLP','SalvRP')
      AND Procedures.ProcedureId NOT IN (SELECT PrimaryKey FROM @ChronoTable WHERE TableName='Procedures')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, 'RPLND', LTRIM(ISNULL(ProcApproach,'') + ' ' + ISNULL(PathResult,'') + ' ' + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' +  ISNULL(PathStageM,'')),
       ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId,'TestisProc',
       '__' + ISNULL(ProcDateText,'') + ' ' + RTRIM(ProcName +  ' ' + ISNULL(ProcApproach,'')) + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|' + '__' + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' +  ISNULL(PathStageM,'') + '|',
       'Procedures,Pathology,PathologyStageGrade', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + Pathology.PathQuality,','+@NO_DQ) + ISNULL(',' + PathologyStageGrade.PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + (ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK)) + (ISNULL(',' + CAST(PathologyStageGrade.PathologyStageGradeId as varchar(50)),@NO_PK))
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
WHERE Procedures.PatientId = @PatientId AND ProcName = 'RPLND'

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ProcName, ISNULL(ProcSide,'') + ' ' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,''), ProcQuality, ProcDate, 'Procedures',Procedures.ProcedureId, 'KidneyProc',
       '__' + ISNULL(ProcDateText,'') +  ' ' + ISNULL(ProcName,'') + ' ' + ISNULL(ProcSide,'') + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK) 
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId
WHERE Procedures.PatientId  = @PatientId AND ProcName IN('Nephrectomy','Partial Nephrectomy','Laparoscopic Nephroureterectomy','Partial for Horshoe Kidney','Laparoscopic Partial Nephrectomy','Nephroureterectomy','Laparoscopic Radical Nephrectomy','Radical Nephrectomy')

--procedures not in the current list
INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ISNULL(ProcName,''), ISNULL(ProcSite,'') + ' ' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,''), ProcQuality, ProcDate, 'Procedures', Procedures.ProcedureId, 
       CASE WHEN ProcName='PLND' THEN 'ProstateProc' 
            WHEN ProcName LIKE 'Cysto%' THEN 'CystoProc' 
            ELSE 'OtherProc' 
       END,
       '__' + ISNULL(ProcDateText,'') +  ' ' + ISNULL(ProcName,'') + ' ' + ISNULL(ProcSite,'') + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK)       
FROM Procedures LEFT OUTER JOIN 
                (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
                LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey,VarExtraInfo)
SELECT RadTxDateText, RadTxType, RadTxTotalDose, RadTxQuality, RadTxDate,RadTxStopDateText, 'RadiationTherapy', RadiationTherapyId, ISNULL(RadTxTarget+' ','') + ISNULL(RadTxIntent,'')
FROM RadiationTherapy
WHERE (RadiationTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT BrachyDateText,'Brachytherapy',BrachyIsotope,BrachyQuality,BrachyDate,'BrachyTherapy',PatientId
FROM BrachyTherapy
WHERE (BrachyTherapy.PatientId = @PatientId AND ISNULL(BrachyPending,0)=0)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT statusDateText, 'Status', status, statusQuality, statusDate, 'Status', statusId
FROM Status
WHERE (Status.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT PtDeathDateText, 'Status', PtDeathType, Null, PtDeathDate, 'Patients', PatientID
FROM Patients
WHERE (PtDeathDate Is Not Null) AND (PatientID=@PatientID)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo,VarStopDate)
SELECT VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo,
       (SELECT TOP 1 PtProtocolStatusDateText
        FROM PatientProtocolStatus 
        WHERE PatientProtocolId = PatProtId AND PtProtocolStatus = 'Off Study') VarStopDate
FROM 
   (
   SELECT dbo.fnGetPtProtocolStatusDate(PatientProtocolId,'DateText') VarDate,'Protocol' VarName,
          ISNULL(dbo.fnGetPtProtocolStatusLast(PatientProtocolId),PtProtocolStatus) VarValue,PtProtocolQuality Quality,
          CAST(dbo.fnGetPtProtocolStatusDate(PatientProtocolId,'Date') AS datetime) SortDate,
          'PatientProtocols' TableName,PatientProtocolId PrimaryKey,
          ISNULL(ProtocolNum,'') + ISNULL(' ('+ProtocolAlias+')','') VarExtraInfo,
          PatientProtocolId PatProtId
   FROM PatientProtocols INNER JOIN Protocols ON PatientProtocols.ProtocolId = Protocols.ProtocolId
   WHERE (PatientId = @PatientId) 
   ) a LEFT OUTER JOIN 
   (
   SELECT c.LkpCode 
   FROM LookupCodeAttributes a INNER JOIN
        LookupAttributes b ON a.AttributeId=b.AttributeId INNER JOIN
        LookupCodes c ON a.LookupCodeId=c.LookupCodeId
   WHERE AttributeName = 'ProtocolScreening' AND
         AttributeValue = 'HPI'
   ) b ON a.VarValue LIKE ('%' + b.LkpCode + '%')
WHERE b.LkpCode IS NULL

--Clean up local variables for each record fetched
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarValue = ''
WHERE VarValue IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarValue = dbo.fnPacManStr(VarValue)
WHERE TableName = 'LabTests' AND (ISNUMERIC(VarValue)=0 OR VarValue LIKE '%,%')
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL
UPDATE @ChronoTable 
   SET VarExtraInfo = ''
WHERE VarExtraInfo IS NULL

--Figure out Aborted Prostatectomies
UPDATE @ChronoTable
   SET VarName = 'PLND Aborted Prostatectomy',
       Filters = 'ProstateProc'
FROM @ChronoTable INNER JOIN Procedures ON Procedures.ProcedureId=PrimaryKey
                  LEFT OUTER JOIN Pathology ON Procedures.ProcedureId=Pathology.ProcedureId
WHERE TableName='Procedures' AND VarName='PLND' AND 
      Pathology.ProcedureId IS NULL

SET @strOutPut = ''
SET @strPatientHPI = ''
DECLARE tables_cursor CURSOR LOCAL FAST_FORWARD
   FOR
   SELECT VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey,VarExtraInfo,
          Filters,Qualities,VarDelimited,TableNames,PrimaryKeys
   FROM @ChronoTable
   ORDER BY SortDate ASC   
OPEN tables_cursor
IF CURSOR_STATUS ('local','tables_cursor') = 1
BEGIN
   --SET @starttime= GETDATE()
   --SET @strDebug= 'START ' + CAST(@starttime as varchar)
   FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@strTableName,@intPrimaryKey,@strExtraInfo,@strFilters,@strQualities,@strVarDelimited,@strTableNames,@strPrimaryKeys
   WHILE (@@FETCH_STATUS <> -1)
   BEGIN  
      --DETERMINE if record is pre-treatment assume record is not pre-treatment
      SET @blnPreTx = 0
      IF @dteDate IS NULL 
         SET @blnPreTx = 1
      ELSE IF @TxDate = @MISSING_DATE
         SET @blnPreTx = 1
      ELSE IF @dteDate = @TxDate
         SET @blnPreTx = 1     

      -- PSA
      IF @strVariable = 'PSA'
      BEGIN
         --accomodate <,>, <=, >=
         --SET @strValue = dbo.fnPacManStr(@strValue) --not need cause of update statement        
         IF ISNUMERIC(@strValue) = 1
         BEGIN
            SET @blnValidPSA = 1
            -- PSA invalid if patient on hormone therapy
            IF (@blnPreTx = 1 AND @NeoAdjHormTx <> '') OR (@AdjHormTx <> '') OR (@HormEvent <> '')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@HormTxDate = @MISSING_DATE) OR (@dteDate > @HormTxDate)
                     SET @blnValidPSA = 0

            -- PSA invalid if patient on chemotherapy
            IF (@blnPreTx = 1 AND @NeoAdjChemoTx <> '') OR (@AdjChemoTx <> '') OR (@MetsEvent LIKE '%CHEMO%')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@ChemoTxDate = @MISSING_DATE) OR (@dteDate > @ChemoTxDate)
                     SET @blnValidPSA = 0

            -- PSAs invalid within specified days after prostate biopsy
            IF @BiopsyDate <> @MISSING_DATE AND @dteDate IS NOT NULL
               IF @dteDate > @BiopsyDate
                  IF (@dteDate - @BiopsyDate) < @BiopsyDays
                     SET @blnValidPSA = 0

            -- find valid pre-treatment PSA 
            IF @blnValidPSA = 1   
               IF @blnPreTx = 1
               BEGIN
                  IF NOT (@dteDate IS NULL AND @PreTxPSA <> @MISSING_NUMBER AND @PreTxPSA > CAST(@strValue AS float(24)))
                     SET @PreTxPSA = CAST(@strValue AS float(24))
                     IF @EForm=1
                        SET @PreTxPSAID = @intPrimaryKey  
                  IF @dteDate IS NOT NULL
                     SET @PreTxPSADate = @dteDate
               END
               ELSE
                  SET @LastPSA_Value = @strValue
               IF @dteDate IS NOT NULL
                  SET @LastPSA_Date = @dteDate
         END 
      END
      ELSE
      -- Prostate Biopsy
      IF @strVariable IN('NEEDLE BIOPSY','BIOPSY','TURP','TRUS Biopsy') AND @strExtraInfo='Prostate'--dbo.fnIsBiopsyProstate (@strVariable)= 1
      BEGIN
         -- which biopsy is the diagnostic biopsy?
         -- save date to check for PSAs within 3 weeks of biopsy
         IF @blnPreTx = 1
            IF @dteDate IS NOT NULL
            BEGIN
               SET @BiopsyDate = @dteDate
               -- diagnostic biopsy is first positive biopsy
               -- but if ther are later pre-tx grades, use them
               IF @strValue <> '' AND @strValue NOT IN('NEG','PIN','ASAP','Negative') --dbo.fnIsAbnormalBiopsyProstate (@strValue) = 1
                  IF @DxBxDate = @MISSING_DATE OR 
                                 (@strDataQuality='RR' AND @DxBxQuality <> 'RR' AND @DxBxDate = @dteDate) OR 
                                 (@strDataQuality IN('STD','REV') AND @DxBxQuality = 'OUT' AND @DxBxDate = @dteDate)
                  BEGIN
                     SET @DxBxType = @strVariable
                     SET @DxBxDate = @dteDate
                     SET @DxBxDateText = @strDate
                     SET @DxBxSummary = @strValue
                     SET @DxBxQuality = @strDataQuality
	                  SET @DxBiopsyID = @intPrimaryKey --for paper form
                     -- move the clinical state forward
                     IF @ClinState < @LOCALIZED
                     BEGIN
                        SET @ClinState = @LOCALIZED
                        SET @ClinStateDate = @dteDate 
                        SET @ClinStateDteText = @strDate
                        IF @EForm=1
                           BEGIN
                              SET @ClinStateID = @intPrimaryKey
                              SET @ClinStateTable = @strTableName
                              SET @ClinStateQuality = @strDataQuality
                           END                                             
                     END
                  END
            END         
      END   -- does not deal with post-curative treatment (RP, XRT) biopsies
      ELSE
      -- UICC/AJCC Clinical Tumor Stage
      IF @strVariable IN('UICC_92','UICC_97','UICC_02')
      BEGIN
         IF @blnPreTx = 1 AND @strValue <> ''
            If @strDataQuality = 'RR' OR @ClinStageQuality <> 'RR'
            BEGIN
               IF @dteDate IS NOT NULL
               BEGIN
	               SET @ClinStageDate = @dteDate            
	               SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
                  IF CHARINDEX(',',@strExtraInfo) > 0
                     BEGIN
                        SET @ClinStageN = SUBSTRING(@strExtraInfo,1,CHARINDEX(',',@strExtraInfo)-1)
                        SET @ClinStageM = SUBSTRING(@strExtraInfo,CHARINDEX(',',@strExtraInfo)+1,LEN(@strExtraInfo))
                     END
                  ELSE IF @strExtraInfo <> ''
                     SET @ClinStageN = @strExtraInfo
	               SET @ClinStageQuality = @strDataQuality
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey
	            END
	            ELSE IF @strValue > @ClinStageT
	            BEGIN
		            -- don't need to copy date b/c all nulls sort to top
         		   SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
                  IF CHARINDEX(',',@strExtraInfo) > 0
                     BEGIN
                        SET @ClinStageN = SUBSTRING(@strExtraInfo,1,CHARINDEX(',',@strExtraInfo)-1)
                        SET @ClinStageM = SUBSTRING(@strExtraInfo,CHARINDEX(',',@strExtraInfo)+1,LEN(@strExtraInfo))
                     END
                  ELSE IF @strExtraInfo <> ''
                     SET @ClinStageN = @strExtraInfo
	               SET @ClinStageQuality = @strDataQuality
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey
               END
            END       
      END
      ELSE
      BEGIN   
         -- Chemotherapy (NOT AN ELSE b/c of combination therapies)
         IF (@strVariable LIKE '%CHEMO%') AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @ChemoTxDate = @MISSING_DATE
                  SET @ChemoTxDate = @dteDate
   
            IF @blnPreTx = 1
               SET @NeoAdjChemoTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjChemoTx = @strVariable
               -- assumes any chemo after treatment indicates metastasis
               SET @MetsEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' ' 
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               IF @strExtraInfo <> ''
                  SET @strOutput = @strOutput +  ' IRB#' + @strExtraInfo
               IF @EForm=1
                  INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Filters,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strFilters,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
               ELSE
                  INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''))
               SET @strOutput = ''
         END
         -- Hormone Therapy (NOT AN ELSE b/c of combination therapies)
         IF ((@strVariable LIKE '%HORM%')
            OR (@strVariable = 'ORCH')
            OR (@strVariable ='Bilateral Orchiectomy')
            OR (@strVariable LIKE 'ORCH_BIL%')
            OR (@strVariable LIKE '%LHRH%')
            OR (@strVariable LIKE '%AA%')
            OR (@strVariable LIKE '%ESTROGEN%')
            OR (@strVariable LIKE '%PROGEST%'))
            AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @HormTxDate = @MISSING_DATE
                  SET @HormTxDate = @dteDate
            IF @blnPreTx = 1
               SET @NeoAdjHormTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjHormTx = @strVariable
               SET @HormEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' '  
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               IF @strExtraInfo <> ''
                  SET @strOutput = @strOutput +  ' IRB#' + @strExtraInfo
               --prevent the same record from being inserted again need a better way
               IF NOT EXISTS(SELECT SortDate FROM @SortTable WHERE SortDate=@dteDate AND VarString=@strOutput)
                  BEGIN
                     IF @EForm=1                  
                        INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Filters,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strFilters,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
                     ELSE
                        INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''))                        
                  END
               SET @strOutput = ''   
         END 
      END    
      --Testosterone
      /*
      IF @strVariable LIKE 'TEST%' 
      --look for castrate levels of testosterone
      BEGIN 
        IF ISNUMERIC(@strValue) = 1
           IF CAST(@strValue As float(24)) < @CASTRATE_TESTOSTERONE_LEVEL
              SET @Castrate = 1     
      END
      */
      --check if castrated
      --IF @strVariable IN ('ORCH_BIL','Bilateral Orchiectomy')
      --   SET @Castrate = 1
      --Diagnostics Imaging
      /*
      these should be positive diagnostics for metastasis
      what exactly is positive?
      should it require specifying extent of disease?
      should CT and MRI be confirmed by LN_BX?
      should BS or PET be confirmed by BONE_BX?
      add target latter so can use other scan types?
      */
      /*
      IF @strVariable IN('BS','Bone Scan','BONE_BX','LN_BX') --('PET','PET Scan','XRAY','X-RAY','RADIOGRPH',)  
            --OR @strVariable LIKE 'CT%' OR @strVariable LIKE '%MRI%'--dbo.fnIsDiagnostic(@strVariable) = 1
      BEGIN
         IF @strValue LIKE 'POS%' OR 
            @strValue LIKE 'ABN_P%' OR 
            @strValue LIKE 'ABN_MAL%' OR
            @strValue='Abnormal Malignant' OR
            @strValue='Abnormal'	OR
            @strValue='Abnormal Prostate'--dbo.fnIsAbnormalDiagnostic(@strValue) = 1
            IF @ClinState < @NON_CASTRATE_METS
            BEGIN
               IF @Castrate = 1
                  SET @ClinState = @CASTRATE_METS
               ELSE
                  SET @ClinState = @NON_CASTRATE_METS
               IF @EForm=1
                  BEGIN
                     SET @ClinStateID = @intPrimaryKey
                     SET @ClinStateTable = @strTableName
                  END   
               IF @dteDate IS NOT NULL
               BEGIN
                  SET @ClinStateDate = @dteDate
                  SET @ClinStateDteText = @strDate
               END
            END
      END
      ELSE
      */
      -- Radiation Therapy
      IF @strVariable IN('XRT','EBRT','RT','COMBO','BRACHY','COMBO','RADIOISOTOPE','SEED'
                        ,'IMPLANT','Brachytherapy',
                        'External Beam','Radiation Therapy, Unspecified','External Beam, IMRT',
                        'High-Dose Rate Brachytherapy','External Beam, 3D Conventional',
                        'External Beam, 3D Conformal') --dbo.fnIsRadiationtherapy(@strVariable) = 1 OR dbo.fnIsBrachytherapy(@strVariable)= 1
      BEGIN
         IF @ClinState < @LOCALIZED
         BEGIN
            SET @ClinState = @LOCALIZED
            IF @EForm=1
               BEGIN
                  SET @ClinStateID = @intPrimaryKey
                  SET @ClinStateTable = @strTableName
                  SET @ClinStateQuality = @strDataQuality
               END   
            IF @dteDate IS NOT NULL
            BEGIN
               SET @ClinStateDate = @dteDate
               SET @ClinStateDteText = @strDate
            END                                          
         END
         IF @blnPreTx = 1
            BEGIN 
               SET @NeoAdjRadTx = @strVariable
               --SET @RadTxDate = @dteDate
               IF @dteDate IS NOT NULL
                  SET @TxDate = @dteDate
            END
         SET @strOutput = @strOutput + @strDate + ' '
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         SET @strOutput = @strOutput + @strVariable + ' ' + @strExtraInfo + ' ' + @strValue
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''))
         SET @strOutput = ''     
      END
      ELSE
      -- Extent of Disease
      IF @strVariable = 'EOD'
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' + @strVariable + ' ' + @strValue
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey)
         SET @strOutput = ''   
      END
      ELSE
      -- Radical Prostatectomy
      IF @strVariable LIKE 'R[RCPL]P' OR @strVariable LIKE '[RCPL]P' OR @strVariable LIKE 'Salv[RCPL]P' OR @strVariable='RALP' OR @strVariable = 'LP_CONV' --dbo.fnIsRadicalProstatectomy(@strVariable) = 1
      BEGIN
         IF @ClinState < @LOCALIZED
         BEGIN
           SET @ClinState = @LOCALIZED
           IF @EForm=1
              BEGIN
                 SET @ClinStateID = @intPrimaryKey
                 SET @ClinStateTable = @strTableName
                 SET @ClinStateQuality = @strDataQuality
              END
           IF @dteDate IS NOT NULL
           BEGIN
              SET @ClinStateDate = @dteDate
              SET @ClinStateDteText = @strDate
           END                                          
         END
         IF @blnPreTx = 1 
            IF @dteDate IS NOT NULL
               SET @TxDate = @dteDate
         --recoding some variables here
         SELECT @strVariable=LkpDescription FROM LookupCodes WHERE LkpCode=@strVariable AND LkpFieldName = 'ProcName' 
         SET @strOutput = @strOutput + @strDate + ' ' + ISNULL(@strVariable,'') + ' ' + @strValue
         SET @strOutput = REPLACE(REPLACE(REPLACE(REPLACE(@strOutput,'SMS','Margin'),'ECE','Extension'),'SVI','Seminal Vesicles'),'LNI','Nodes')
         IF @EForm=1
            BEGIN
               SET @strVarDelimited = REPLACE(REPLACE(REPLACE(REPLACE(@strVarDelimited,'SMS','Margin'),'ECE','Extension'),'SVI','Seminal Vesicles'),'LNI','|__Nodes')
               INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strVarDelimited,@strTableNames,@strPrimaryKeys,@strFilters,@strQualities)
               SET @strTableNames = ''
               SET @strPrimaryKeys = ''
               SET @strVarDelimited = ''
            END
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,@strFilters,@strQualities)
         SET @strOutput = ''   
      END
      ELSE
      -- Status    
      IF @strVariable = 'Status'
      BEGIN
         IF @strValue IN('Localized','LCR','Local Recurrence')
            BEGIN
               IF @ClinState < @LOCALIZED 
               BEGIN
                  SET @ClinState = @LOCALIZED
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('BCR','Biochemical Recurrence')
            BEGIN
               IF @Castrate = 1 AND @ClinState < @RISING_PSA_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_CASTRATE
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
               ELSE IF @ClinState < @RISING_PSA_NON_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_NON_CASTRATE
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
            END
         ELSE
            IF @strValue IN('RisingPSA_Castrate','Rising PSA Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('RisingPSA_NonCastrate','Rising PSA Non-Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_NON_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_NON_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END 
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsNonCastrate','Non-Castrate Mets','Clinical Mets Non-Castrate')
            BEGIN
               IF @ClinState < @NON_CASTRATE_METS
               BEGIN
                  SET @ClinState = @NON_CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END 
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsCastrate','Castrate Mets','Clinical Mets Castrate')
            BEGIN
               IF @ClinState < @CASTRATE_METS
               BEGIN
                  SET @ClinState = @CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('METS','Distant Metastasis')
            BEGIN
               IF @ClinState < @CASTRATE_METS AND @Castrate = 1
                  BEGIN
                     SET @ClinState = @CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
               ELSE IF @ClinState < @NON_CASTRATE_METS
                  BEGIN
                     SET @ClinState = @NON_CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
            END
         ELSE
            IF @strValue IN('DOD','DOC','DUC','Dead','Death from Prostate Cancer','Death from Other Cause',
                            'Death from Unknown Causes')
            BEGIN
               If @ClinState < @DEAD 
                  BEGIN
                     SET @ClinState = @DEAD
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
            END
      END
      --Protocols
      IF @strVariable = 'Protocol'
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' '  
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         IF @strVariable <> ''
            SET @strOutput = @strOutput +  @strVariable
         IF @strExtraInfo <> ''
            SET @strOutput = @strOutput +  ' ' + @strExtraInfo
         IF @strValue <> ''
            SET @strOutput = @strOutput + ' ' + @strValue

         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey)
         SET @strOutput = ''
      END
      ELSE
      --PRINT @strDate + ' ' + @strVariable + ' ' + @strValue + ' ' + @strDataQuality
      --SET @stoptime= GETDATE()
      --SET @strdebug = @strdebug + char(10) + @strVariable + ' ' + @stoptime --Cast to text
      --SELECT @stoptime - @starttime
      
      --Here we catch a bunch of values that are normally ignored and instead put them back into the output table
      IF @strTableName IN('MedicalTherapy','RadiationTherapy','BrachyTherapy','Procedures')
         BEGIN
            IF NOT EXISTS(SELECT PrimaryKeys FROM @SortTable WHERE TableNames LIKE '%' + @strTableName + '%' AND PrimaryKeys LIKE '%' + CAST(@intPrimaryKey as varchar(50)) + '%')
               BEGIN
                  IF @strTableName IN('MedicalTherapy','RadiationTherapy')
                     BEGIN
                        SET @strOutput = ISNULL(@strDate,'') + ' ' 
                        IF @strStopDate <> ''
                           SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
                        IF @strTableName='MedicalTherapy'
                           BEGIN
                              IF @strValue <> ''
                                 SET @strOutput = @strOutput +  @strValue
                              ELSE
                                 SET @strOutput = @strOutput + @strVariable
                              IF @strExtraInfo <> ''
                                 SET @strOutput = @strOutput +  ' IRB#' + @strExtraInfo
                           END
                        ELSE
                           SET @strOutput = @strOutput+@strVariable+' '+' '+@strExtraInfo+' '+@strValue
                     END  
                  ELSE IF (@strTableName = 'Procedures' AND @intPrimaryKey<>@DxBiopsyID) OR @strTableName = 'BrachyTherapy'
                     SET @strOutput = RTRIM(LTRIM(ISNULL(@strDate,'') + ' ' + ISNULL(@strVariable,'') + ' ' + ISNULL(@strValue,'')))
                  IF @EForm=1
                     BEGIN
                        IF @strVarDelimited IS NOT NULL AND @strTableNames IS NOT NULL AND @strPrimaryKeys IS NOT NULL
                           INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,StopDateText,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strVarDelimited,@strTableNames,@strPrimaryKeys,NULLIF(@strStopDate,''),@strFilters,@strQualities)
                        ELSE
                           INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,StopDateText,Filters,Qualities) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''),@strFilters,@strDataQuality)
                     END
                  ELSE
                     INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''),@strFilters,@strQualities)
                  SET @strOutput = '' 
               END
         END
      FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@strTableName,@intPrimaryKey,@strExtraInfo,@strFilters,@strQualities,@strVarDelimited,@strTableNames,@strPrimaryKeys
      --SET @starttime= GETDATE()
   END
   DEALLOCATE tables_cursor
   --PRINT @strdebug
END      
   --Capture PreDx Biopsy PSA
   SELECT TOP 1 @PreDxBxPSA=VarValue, @PreDxBxPSAID=PrimaryKey, @PreDxBxPSAQuality=Quality
   FROM @ChronoTable 
   WHERE TableName='LabTests' AND VarName='PSA' AND VarValue<>'' AND SortDate<=@DxBxDate 
   ORDER BY SortDate DESC
   --reformat BxSummary
   IF LEFT(@DxBxSummary,3) LIKE '[1-5]+[1-5]'
      SET @DxBxSummary = 'Gleason ' + CAST(CAST(LEFT(@DxBxSummary,1) AS int) 
                       + CAST(SUBSTRING(@DxBxSummary,3,1) AS int) AS varchar(50)) + ' (' + LEFT(@DxBxSummary,3) + ')' 
                       + CASE WHEN LEN(@DxBxSummary)>3 THEN RIGHT(@DxBxSummary,LEN(@DxBxSummary)-3) ELSE '' END 
   ELSE IF @DxBxSummary<>''
      SET @DxBxSummary = 'Gleason ' + @DxBxSummary
   IF @EForm <> 1
      SET @DxBxSummary = @DxBxSummary + ISNULL(' (' + @DxBxQuality + ')','')

   -- assembles diagnosis date, stage, grade, pre tx psa line
   IF @EForm=1
      BEGIN
         IF @DxBxDate <> @MISSING_DATE
            BEGIN
               SET @strPatientHPI = @DxBxDateText + ' '
            	SET @strTableNames = 'Procedures'
               SET @strQualities = ISNULL(@DxBxQuality,@NO_DQ)
               SET @strPrimaryKeys = CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = '__' + @DxBxDateText + ' ' +  '|'
            END 
         IF @ClinStageT <> ''
            BEGIN
               --SET @strPatientHPI = @strPatientHPI + @ClinStageT + ' (' + RIGHT(@ClinStageSystem,2) + ') '
               SET @strPatientHPI = @strPatientHPI + @ClinStageT + @ClinStageN + @ClinStageM + ' (' + RIGHT(@ClinStageSystem,2) + ') '
               SET @strTableNames = @strTableNames + ',ClinicalStages'
               SET @strQualities = @strQualities +  ISNULL(',' + @ClinStageQuality,','+@NO_DQ)
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@ClinStageID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @ClinStageT + @ClinStageN + @ClinStageM + ' (' + RIGHT(@ClinStageSystem,2) + ')|'
            END
         IF @DxBxType <> ''
            BEGIN 
               SET @strPatientHPI =  @strPatientHPI + @DxBxType + ' ' + @DxBxSummary + ' '
               SET @strTableNames = @strTableNames + ',Procedures'
               SET @strQualities = @strQualities +  ISNULL(',' + @DxBxQuality,','+@NO_DQ)
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @DxBxType + ' ' + @DxBxSummary + '|'
            END
         IF @PreDxBxPSA <> ''
            BEGIN
               SET @strPatientHPI = @strPatientHPI + ' PSA ' + @PreDxBxPSA + ' '
               SET @strTableNames = @strTableNames + ',LabTests'
               SET @strQualities = @strQualities +  ISNULL(',' + @PreDxBxPSAQuality,','+@NO_DQ)
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@PreDxBxPSAID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__ PSA ' + CAST(@PreDxBxPSA AS varchar(50)) + '|'
            END
         --strip leading comma from TableNames and PrimaryKeys concatenation
         IF LEFT(@strTableNames,1) = ','
            SET @strTableNames = RIGHT(@strTableNames,LEN(@strTableNames)-1)
         IF LEFT(@strPrimaryKeys,1) = ','
            SET @strPrimaryKeys = RIGHT(@strPrimaryKeys,LEN(@strPrimaryKeys)-1)
         INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,Filters) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@strQualities,@strPrimaryKeys,'ProstateProc')
         SET @strTableNames = ''
         SET @strPrimaryKeys = ''
         SET @strVarDelimited = ''
      END 
   ELSE
      BEGIN
         IF @DxBxType <> ''
            SET @DxBxSummary = @DxBxType + ' ' + @DxBxSummary
         IF @DxBxDate <> @MISSING_DATE
            SET @strPatientHPI = @DxBxDateText
         IF @ClinStageT <> ''
            SET @strPatientHPI = @strPatientHPI + ' ' + @ClinStageT + @ClinStageN + @ClinStageM + ' (' + RIGHT(@ClinStageSystem,2) + ')'
         IF @DxBxSummary <> ''
            SET @strPatientHPI = @strPatientHPI + ' ' + @DxBxSummary  
         IF @PreDxBxPSA <> ''
            SET @strPatientHPI = @strPatientHPI + ' PSA ' + @PreDxBxPSA + ' '
         IF @strPatientHPI <> ''
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,Filters) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI,NULL,NULL,NULL,'ProstateProc')
      END
   SET @strPatientHPI = ''   -- make sure this is set to '' by default

   -- assemble clinical state / status line
   IF @ClinStateDate <> @MISSING_DATE 
   BEGIN
      SET @strPatientHPI = @strPatientHPI + @ClinStateDteText + ' '
      -- decode numeric clinical states back into text for display
      --Removed by request orignially coded as 'No Prostate Cancer Diagnosis '
      IF @ClinState = @NO_PROSTATE_CANCER_DIAGNOSIS
         SET @strPatientHPI = '' --@strPatientHPI + ''
      IF @ClinState = @LOCALIZED
         SET @strPatientHPI = @strPatientHPI + 'Localized'
      IF @ClinState = @RISING_PSA_NON_CASTRATE
         SET @strPatientHPI = @strPatientHPI + 'Rising PSA Non-Castrate'
      IF @ClinState = @RISING_PSA_CASTRATE
         SET @strPatientHPI = @strPatientHPI + 'Rising PSA Castrate'
      --Removed by request, orignially coded as 'Non-Castrate Mets'
      IF @ClinState = @NON_CASTRATE_METS
         SET @strPatientHPI = '' --@strPatientHPI + 'Metastasis' 
      IF @ClinState = @CASTRATE_METS
         SET @strPatientHPI = @strPatientHPI + 'Castrate Mets'
      IF @ClinState = @DEAD
         SET @strPatientHPI = @strPatientHPI + 'Dead'

      IF @EForm=1 AND @strPatientHPI <> ''
         BEGIN
            SET @strVarDelimited = '__' + @strPatientHPI + '|'
            SET @strTableNames = @ClinStateTable
            SET @strPrimaryKeys = CAST(@ClinstateID as varchar(50))
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,Filters) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@ClinStateQuality,@strPrimaryKeys,CASE WHEN @ClinStateTable = 'Procedures' THEN 'ProstateProc' END)
            SET @strTableNames = ''
            SET @strPrimaryKeys = ''
            SET @strVarDelimited = ''
         END
      ELSE
         INSERT @SortTable (SortDate,VarString) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI)
   END      
   SET @strPatientHPI = '' 

   IF @EForm=1
      BEGIN
         SELECT VarString AS PatientHPI,VarDelimited AS PatientHPIDelimited,TableNames,
                PrimaryKeys, SortDate, StopDateText, Filters, Qualities
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   ELSE
      BEGIN
         SELECT VarString AS PatientHPI--,TableNames,PrimaryKeys
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   --SELECT * FROM @ChronoTable

   SELECT @DxBiopsyID AS DxBiopsyId

--99ModifyTableLabTests.sql
GO
--resize columns
ALTER TABLE AuditLog_LabTests
ALTER COLUMN LabAccessionNum varchar(100)
GO
ALTER TABLE LabTests
ALTER COLUMN LabAccessionNum varchar(100)
GO
--100ModifyspGetPatientHPIProstateGU.sql
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
ALTER PROCEDURE [dbo].[spGetPatientHPIProstateGU]
   @PatientId int = NULL,
   @EForm bit = 0,
   @Rowcount int = NULL OUTPUT,
   @DiagnosisBx bit = 1
AS
SET NOCOUNT ON
--These variables are for debuging / testing speed
DECLARE @starttime datetime
DECLARE @stoptime datetime
Declare @strDebug varchar(8000)
--End of Debug variables

DECLARE @strPatientHPI     varchar(1000)
DECLARE @strDate           varchar(50)
DECLARE @strStopDate       varchar(50)
DECLARE @dteDate           datetime
DECLARE @strVariable       varchar(50)
DECLARE @strValue          varchar(255)
DECLARE @strDataQuality    varchar(50)
DECLARE @strTableName      varchar(50)
DECLARE @strExtraInfo      varchar(50) 
DECLARE @intPrimaryKey     int
DECLARE @i                 int
DECLARE @blnPreTx          bit
DECLARE @blnValidPSA       bit
DECLARE @sngTime           float(24) --VBA single float(53) double
DECLARE @BiopsyDate        datetime
DECLARE @BiopsyDays        float(24) -- number of days after prostate biopsy that PSA is invalid
DECLARE @strOutPut         varchar(1000)

--Default Missing Values
DECLARE @MISSING_NUMBER int
DECLARE @MISSING_DATE   datetime

SET @MISSING_NUMBER = -999
SET @MISSING_DATE = '1899-12-30 00:00:00.000'
SET @BiopsyDate = @MISSING_DATE
SET @BiopsyDays = 21

--Clinical states constants (must be ordered)
DECLARE @NO_PROSTATE_CANCER_DIAGNOSIS smallint
DECLARE @LOCALIZED                    smallint
DECLARE @RISING_PSA_NON_CASTRATE      smallint
DECLARE @RISING_PSA_CASTRATE          smallint
DECLARE @NON_CASTRATE_METS            smallint
DECLARE @CASTRATE_METS                smallint
DECLARE @DEAD                         smallint
SET @NO_PROSTATE_CANCER_DIAGNOSIS = 0
SET @LOCALIZED = 1
SET @RISING_PSA_NON_CASTRATE = 2
SET @RISING_PSA_CASTRATE = 3
SET @NON_CASTRATE_METS = 4   
SET @CASTRATE_METS = 5  
SET @DEAD = 6

--This is used to determine castrate clinical states
DECLARE @CASTRATE_TESTOSTERONE_LEVEL smallint
SET @CASTRATE_TESTOSTERONE_LEVEL = 50

DECLARE @ClinStateDate    datetime        --date of last clinical state transition
DECLARE @ClinStateDteText varchar(50)     --datetext of last clinical state transition
DECLARE @ClinState        int             --current clinical state (0 to 5)
DECLARE @Castrate         bit             --castrate levels of testosterone (<50)
DECLARE @DxBiopsyID       int             --primary key for diagnostic biopsy record
DECLARE @DxBxDate         datetime        --date of diagnostic (first positive) biopsy
DECLARE @DxBxDateText     varchar(50)     --datetext of diagnostic (first positive) biopsy
DECLARE @DxBxType         varchar(50)     --diagnostic biopsy type: TURP or needle
DECLARE @DxBxSummary      varchar(255)     --pathologic summary of diagnostic biopsy: eg. 3+4
DECLARE @DxBxQuality      varchar(50)     --data quality for diagnostic biopsy
DECLARE @PreTxPSA         float(24)       --valid PSA before any "curative" treatment (XRT or RP)
DECLARE @PreTxPSADate     datetime 
DECLARE @PreDxBxPSA       varchar(50)     --PSA right before diagnostic biopsy
DECLARE @ClinStageDate	  datetime 
DECLARE @ClinStageSystem  varchar(50)     --UICC TNM staging system used
DECLARE @ClinStageT       varchar(50)     --pre-treatment UICC Tumor Stage
DECLARE @ClinStageN       varchar(50)     --pre-treatment UICC Nodes Stage
DECLARE @ClinStageM       varchar(50)     --pre-treatment UICC Metastatis Stage

DECLARE @ClinStageQuality varchar(50)     --data quality of clinical staging data
DECLARE @NeoAdjHormTx     varchar(50)     --patient has had neo-adjuvant hormone therapy
DECLARE @NeoAdjHormTxDate datetime        --date of first hormone therapy (all PSAs after this are invalid?)
DECLARE @NeoAdjRadTx      varchar(50)     --patient has had neo-adjuvant radiation therapy
DECLARE @NeoAdjRadTxDate  datetime        --date of last neo-adjuvant radiation therapy (all following pre-tx PSAs are invalid)
DECLARE @NeoAdjChemoTx    varchar(50)     --patient has had neo-adjuvant chemotherapy
DECLARE @NeoAdjChemoDate  datetime        --date of last neo-adjuvant chemotherapy
--DECLARE @Prostatectomy    bit           --patient had prostatectomy (means he will always use RP PSA recurrence methods)
DECLARE @TxDate           datetime        --date of first "curative" treatment
DECLARE @TxType           varchar(50)     --curative treatment type
DECLARE @AdjHormTx        varchar(50)
DECLARE @AdjChemoTx       varchar(50)
--DECLARE @NumPSAs          int --number of PSAs after curative treatment
DECLARE @EOD              varchar(50)     --last extent of disease 
DECLARE @LastPSA_Value    varchar(50)
DECLARE @LastPSA_Date     datetime   

DECLARE @HormEvent        varchar(50)
DECLARE @HormTxDate       datetime
DECLARE @MetsEvent        varchar(50)
DECLARE @ChemoTxDate      datetime

--used for eform
DECLARE @strTableNames     varchar(200)
DECLARE @strPrimaryKeys    varchar(50)
DECLARE @strVarDelimited   varchar(500)
DECLARE @strFilters        varchar(200)
DECLARE @strQualities      varchar(200)
DECLARE @ClinStageID       int             --primary key for diagnostic clinical stage record
DECLARE @PreTxPSAID        int             --primary key for pre prostatectomy psa record
DECLARE @PreDxBxPSAID      int             --primary key for pre diagnosis biopsy psa record
DECLARE @PreDxBxPSAQuality varchar(50)     --data quality for pre diagnosis biopsy psa record
DECLARE @ClinStateID       int             --primary key for clin state record
DECLARE @ClinStateTable    varchar(50)     --table name where clin state obtained from
DECLARE @ClinStateQuality  varchar(50)     --data quality of clin state
DECLARE @blnHadRP          bit             --patient had prostatectomy
DECLARE @ProstatePathId    int             --primary key for ProstatectomyPath record
DECLARE @PLNDPathId        int             --primary key for Pathology of the PLND record
DECLARE @NO_PK             varchar(50)     --used to indicate that a table has no data for delimited format
DECLARE @NO_DQ             varchar(50)     --used to indicate that a table has no data quality for delimited format

--used for eform
SET @strTableNames    = ''
SET @strPrimaryKeys   = ''
SET @strVarDelimited  = ''
SET @strQualities = ''
SET @NO_PK = ',NO_PK'
SET @NO_DQ = 'NO_DQ'

SET @ClinStateDate     = @MISSING_DATE
SET @ClinStateDteText  = ''
SET @ClinState         = @NO_PROSTATE_CANCER_DIAGNOSIS
SET @Castrate          = 0
SET @DxBxDate          = @MISSING_DATE
SET @DxBxDateText      = ''
SET @DxBxType          = ''
SET @DxBxSummary       = ''
SET @DxBxQuality       = ''
SET @PreTxPSA          = @MISSING_NUMBER
SET @PreTxPSADate      = @MISSING_DATE
SET @ClinStageDate     = @MISSING_DATE
SET @ClinStageSystem   = ''
SET @ClinStageT        = ''
SET @ClinStageN        = ''
SET @ClinStageM        = ''
SET @ClinStageQuality  = ''
SET @NeoAdjHormTx      = 0
SET @NeoAdjHormTxDate  = @MISSING_DATE
SET @NeoAdjRadTx       = 0
SET @NeoAdjRadTxDate   = @MISSING_DATE
SET @NeoAdjChemoTx     = 0
SET @NeoAdjChemoDate   = @MISSING_DATE
SET @HormTxDate        = @MISSING_DATE
SET @ChemoTxDate       = @MISSING_DATE
--SET @Prostatectomy    = 0
SET @TxDate            = @MISSING_DATE
SET @TxType            = ''
--SET @NumPSAs          = 0
SET @EOD               = ''
SET @LastPSA_Value     = @MISSING_NUMBER
SET @LastPSA_Date      = @MISSING_DATE
SET @MetsEvent         = ''
SET @HormEvent         = ''
SET @PreDxBxPSA        = ''
SET @PreDxBxPSAQuality = ''

DECLARE @SortTable TABLE
--Temp Table used to force the HPI to sort in an order 
   (
   SortDate              datetime NULL,
   VarString             varchar(500) NULL,
   VarDelimited          varchar(500) NULL,
   TableNames            varchar(200) NULL,
   Qualities             varchar(50) NULL,
   PrimaryKeys           varchar(50) NULL,
   StopDateText          varchar(50) NULL,
   Filters               varchar(200) NULL
   )

DECLARE @ChronoTable TABLE
--Add single compound index on SortDate, VarName, VarValue
   (
   ChronoId     int NOT NULL Identity(1,1) PRIMARY KEY,
   VarDate      varchar(50) NULL,
   VarName      varchar(50) NULL,
   VarValue     varchar(255) NULL,
   Quality      varchar(50) NULL,
   SortDate     datetime,
   VarStopDate  varchar(50) NULL,
   TableName    varchar(50) NULL,
   PrimaryKey   int NULL,
   VarExtraInfo varchar(110) NULL,
   Filters      varchar(200) NULL,
   VarDelimited varchar(500) NULL,
   TableNames   varchar(200) NULL,
   Qualities    varchar(50) NULL,
   PrimaryKeys  varchar(50) NULL
   )

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ProcName, CAST((dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) + ISNULL(' Other Histology: ' + PathHistology2,'')) as varchar(255)), ISNULL(PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId,ProcSite,
       'ProstateProc',
       '__' + ISNULL(ProcDateText,'') + ISNULL(' ' + ProcName,'') + '|' + '__' + ISNULL(CAST((dbo.fnSummaryBxProstate(PathGG1,PathGG2,PathGGS,PathResult) + ISNULL(' Other Histology: ' + PathHistology2,'')) as varchar(255)),'')  + '|',
       'Procedures,ProstateBiopsyPath', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ), CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(ProstateBiopsyPath.PathologyId as varchar(50)),@NO_PK)
FROM Procedures INNER JOIN Pathology ON Procedures.ProcedureId = Pathology.ProcedureId
                LEFT OUTER JOIN ProstateBiopsyPath ON Pathology.PathologyId=ProstateBiopsyPath.PathologyId
WHERE Procedures.PatientId = @PatientId AND 
      ProcSite='Prostate' AND ProcName IN('TURP','TRUS Biopsy','Biopsy','Needle Biopsy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo)
SELECT ClinStageDateText, ClinStageSystem, ClinStageT, ClinStageQuality, ClinStageDate, 'ClinicalStages', ClinicalStageId,
       ISNULL(ClinStageN,'') + ISNULL(',' + ClinStageM,'')
FROM ClinicalStages
WHERE (ClinicalStages.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT DxDateText, DxType, DxResult, DxQuality, DxDate,  'Diagnostics', DiagnosticId
FROM Diagnostics
WHERE (Diagnostics.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT LabDateText, LabTest, LabResult, LabQuality, LabDate, 'LabTests', LabTestId
FROM LabTests
WHERE (LabTests.PatientId = @PatientId AND LabTest IN ('PSA','TEST') AND LabResult IS NOT NULL)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey,VarExtraInfo,Filters)
SELECT MedTxDateText, MedTxType, MedTxAgent, MedTxQuality, MedTxDate,MedTxStopDateText, 'MedicalTherapy', MedicalTherapyId,ProtocolNum, 'MedTxType_' + MedTxType
FROM MedicalTherapy LEFT OUTER JOIN Protocols ON MedicalTherapy.ProtocolId=Protocols.ProtocolId
WHERE (MedicalTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText,LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy'), ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,''), ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId,'TestisProc',
       '__' + ISNULL(ProcDateText,'') +  ' ' + LTRIM(ISNULL(ProcSide,'') + ' Orchiectomy') + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK)       
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId
WHERE Procedures.PatientId = @PatientId AND ProcName = 'Orchiectomy'

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText,'Cystectomy', LTRIM(ISNULL(ProcName,'') + ' ' + ISNULL(RIGHT(PathStageSystem,2),'') + ' ' 
       + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' + ISNULL(PathStageM,'') + ' ' + ISNULL(PathGrade,'') + ' ' + ISNULL(PathResult,'') + ' ' +  ISNULL(PathHistology,'') + ' '
       + CASE WHEN UD_OperatingRoomDetailId IS NULL THEN '' ELSE 'Urinary Diversion:' + UD_ProcName + ' ' END)
       + CASE WHEN Pathology.OperatingRoomDetailId IS NULL THEN '' 
              ELSE ISNULL('Nodes:' + dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)),'')
         END
       , ISNULL(Pathology.PathQuality,ProcQuality), ProcDate, 'Procedures', Procedures.ProcedureId,'BladderProc',
       '__' + ISNULL(ProcDateText,'') + ' ' + LTRIM(ISNULL(ProcName,'')) + '|' + 
       '__' + ISNULL(RIGHT(PathStageSystem,2),'') + ' ' + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' + ISNULL(PathStageM,'') + ' ' + ISNULL(PathGrade,'') + '|' +
       '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,PathologyStageGrade,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathologyStageGrade.PathQuality,','+@NO_DQ) + ISNULL(',' + Pathology.PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + (ISNULL(',' + CAST(PathologyStageGrade.PathologyStageGradeId as varchar(50)),@NO_PK)) + (ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK))
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
                LEFT OUTER JOIN (
                                SELECT OperatingRoomDetailId, MAX(ProcedureId) AS UD_MAX_ProcedureId
                                FROM Procedures 
                                WHERE PatientId=@PatientId AND ProcName IN('IlealConduit','NeoBladder','ContCutaneous','ileal conduit','indiana pouch','IndianaPouch','Ileal Loop','Studer Pouch','Sigmoid Conduit','IlealConduit/SigmoidNeobladder')
                                GROUP BY OperatingRoomDetailId 
                                ) AS MaxUD ON Procedures.OperatingRoomDetailId = MaxUD.OperatingRoomDetailId 
                LEFT OUTER JOIN (
                                SELECT OperatingRoomDetailId AS UD_OperatingRoomDetailId, ProcName AS UD_ProcName,ProcedureId AS UD_ProcedureId
                                FROM Procedures 
                                WHERE PatientId=@PatientId
                                ) AS UrinaryDiversions ON UrinaryDiversions.UD_ProcedureId = MaxUD.UD_MAX_ProcedureId  
WHERE Procedures.PatientId = @PatientId AND ProcName IN('Cystectomy','CP','Cysto-Prostatectomy','Partial Cystectomy','Radical Cystectomy','Salvage Radical Cystectomy')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ISNULL(ProcName,'Prostatectomy'),
       dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)) +
       ' (' + dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality))+ ')' + 
       ' (' + ISNULL(Pathology.PathQuality,ProcQuality) + ')', 
       ProcQuality, ProcDate,  'Procedures', Procedures.ProcedureId, 'ProstateProc',
       '__' + ISNULL(ProcDateText + ' ' ,'') + '|' + '__' + RTRIM(ISNULL(LkpProcName,'Prostatectomy')) + '|' + '__' + ISNULL(dbo.fnSummaryRP(PathGG1,PathGG2,PathGGS,PathMargin,PathExtension,PathSV_Inv,Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality)),'') +
       ' (' + dbo.fnGetNodeRatio(Procedures.OperatingRoomDetailId,ISNULL(Pathology.PathQuality,ProcQuality))+ ')' + '|',
       'Procedures,ProstatectomyProc,ProstatectomyPath' + CASE WHEN PLND.PathologyId IS NOT NULL THEN ',Pathology' ELSE '' END, 
       ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + ProcQuality,','+@NO_DQ) + ISNULL(',' + Pathology.PathQuality,','+@NO_DQ) + 
       CASE WHEN PLND.PathologyId IS NOT NULL THEN ISNULL(',' + COALESCE(Pathology.PathQuality,ProcQuality),@NO_DQ) ELSE '' END,
       CAST(Procedures.ProcedureId as varchar(50)) + (ISNULL(',' + CAST(ProstatectomyProc.ProcedureId as varchar(50)),@NO_PK)) + (ISNULL(',' + CAST(ProstatectomyPath.PathologyId as varchar(50)),@NO_PK)) + 
       CASE WHEN PLND.PathologyId IS NOT NULL THEN (ISNULL(',' + CAST(PLND.PathologyId as varchar(50)),'')) ELSE '' END
FROM Procedures LEFT OUTER JOIN ProstatectomyProc ON ProstatectomyProc.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN ProstatectomyPath ON ProstatectomyPath.PathologyId = Pathology.PathologyId 
                LEFT OUTER JOIN (
                                SELECT PathologyId,OperatingRoomDetailId,PathQuality,
                                       ROW_NUMBER() OVER(ORDER BY PathologyId DESC) AS RowNum
                                FROM Pathology
                                WHERE Pathology.PatientId=@PatientId AND PathSpecimenType='PLND'
                                ) PLND ON Procedures.OperatingRoomDetailId = PLND.OperatingRoomDetailId AND
                                          COALESCE(Pathology.PathQuality,ProcQuality,'') = ISNULL(PLND.PathQuality,'') AND
                                          RowNum = 1
               LEFT OUTER JOIN (
                               SELECT LkpCode,LkpDescription LkpProcName
                               FROM LookupCodes 
                               WHERE LkpFieldName = 'ProcName' 
                               ) LKP ON ProcName=LkpCode
WHERE Procedures.PatientId = @PatientId AND ProcName IN('CP','LP','LP_CONV','PP','RALP','RP','SalvCP','SalvLP','SalvRP')
      AND Procedures.ProcedureId NOT IN (SELECT PrimaryKey FROM @ChronoTable WHERE TableName='Procedures')

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, 'RPLND', LTRIM(ISNULL(ProcApproach,'') + ' ' + ISNULL(PathResult,'') + ' ' + ' ' + ISNULL(PathHistology,'') + ' ' + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' +  ISNULL(PathStageM,'')),
       ProcQuality, ProcDate,'Procedures', Procedures.ProcedureId,'TestisProc',
       '__' + ISNULL(ProcDateText,'') + ' ' + RTRIM(ProcName +  ' ' + ISNULL(ProcApproach,'')) + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|' + '__' + ISNULL(PathStageT,'') + ' ' + ISNULL(PathStageN,'') + ' ' +  ISNULL(PathStageM,'') + '|',
       'Procedures,Pathology,PathologyStageGrade', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + Pathology.PathQuality,','+@NO_DQ) + ISNULL(',' + PathologyStageGrade.PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + (ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK)) + (ISNULL(',' + CAST(PathologyStageGrade.PathologyStageGradeId as varchar(50)),@NO_PK))
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId 
                LEFT OUTER JOIN PathologyStageGrade ON Pathology.PathologyId = PathologyStageGrade.PathologyId
WHERE Procedures.PatientId = @PatientId AND ProcName = 'RPLND'

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ProcName, ISNULL(ProcSide,'') + ' ' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,''), ProcQuality, ProcDate, 'Procedures',Procedures.ProcedureId, 'KidneyProc',
       '__' + ISNULL(ProcDateText,'') +  ' ' + ISNULL(ProcName,'') + ' ' + ISNULL(ProcSide,'') + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK) 
FROM Procedures LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId
WHERE Procedures.PatientId  = @PatientId AND ProcName IN('Nephrectomy','Partial Nephrectomy','Laparoscopic Nephroureterectomy','Partial for Horshoe Kidney','Laparoscopic Partial Nephrectomy','Nephroureterectomy','Laparoscopic Radical Nephrectomy','Radical Nephrectomy')

--procedures not in the current list
INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,Filters,VarDelimited,TableNames,Qualities,PrimaryKeys)
SELECT ProcDateText, ISNULL(ProcName,''), ISNULL(ProcSite,'') + ' ' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,''), ProcQuality, ProcDate, 'Procedures', Procedures.ProcedureId, 
       CASE WHEN ProcName='PLND' THEN 'ProstateProc' 
            WHEN ProcName LIKE 'Cysto%' THEN 'CystoProc' 
            ELSE 'OtherProc' 
       END,
       '__' + ISNULL(ProcDateText,'') +  ' ' + ISNULL(ProcName,'') + ' ' + ISNULL(ProcSite,'') + '|' + '__' + ISNULL(PathResult,'') + ' ' + ISNULL(PathHistology,'') + '|',
       'Procedures,Pathology', ISNULL(ProcQuality,@NO_DQ) + ISNULL(',' + PathQuality,','+@NO_DQ),
       CAST(Procedures.ProcedureId as varchar(50)) + ISNULL(',' + CAST(Pathology.PathologyId as varchar(50)),@NO_PK)       
FROM Procedures LEFT OUTER JOIN 
                (SELECT PrimaryKey FROM @ChronoTable WHERE TableName = 'Procedures') AS b
                ON Procedures.ProcedureId = b.PrimaryKey
                LEFT OUTER JOIN Pathology ON Pathology.ProcedureId = Procedures.ProcedureId
WHERE Procedures.PatientId = @PatientId AND b.PrimaryKey IS NULL

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey,VarExtraInfo)
SELECT RadTxDateText, RadTxType, RadTxTotalDose, RadTxQuality, RadTxDate,RadTxStopDateText, 'RadiationTherapy', RadiationTherapyId, ISNULL(RadTxTarget+' ','') + ISNULL(RadTxIntent,'')
FROM RadiationTherapy
WHERE (RadiationTherapy.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT BrachyDateText,'Brachytherapy',BrachyIsotope,BrachyQuality,BrachyDate,'BrachyTherapy',PatientId
FROM BrachyTherapy
WHERE (BrachyTherapy.PatientId = @PatientId AND ISNULL(BrachyPending,0)=0)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT statusDateText, 'Status', status, statusQuality, statusDate, 'Status', statusId
FROM Status
WHERE (Status.PatientId = @PatientId)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey)
SELECT PtDeathDateText, 'Status', PtDeathType, Null, PtDeathDate, 'Patients', PatientID
FROM Patients
WHERE (PtDeathDate Is Not Null) AND (PatientID=@PatientID)

INSERT @ChronoTable (VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo,VarStopDate)
SELECT VarDate,VarName,VarValue,Quality,SortDate,TableName,PrimaryKey,VarExtraInfo,
       (SELECT TOP 1 PtProtocolStatusDateText
        FROM PatientProtocolStatus 
        WHERE PatientProtocolId = PatProtId AND PtProtocolStatus = 'Off Study') VarStopDate
FROM 
   (
   SELECT dbo.fnGetPtProtocolStatusDate(PatientProtocolId,'DateText') VarDate,'Protocol' VarName,
          ISNULL(dbo.fnGetPtProtocolStatusLast(PatientProtocolId),PtProtocolStatus) VarValue,PtProtocolQuality Quality,
          CAST(dbo.fnGetPtProtocolStatusDate(PatientProtocolId,'Date') AS datetime) SortDate,
          'PatientProtocols' TableName,PatientProtocolId PrimaryKey,
          ISNULL(ProtocolNum,'') + ISNULL(' ('+ProtocolAlias+')','') VarExtraInfo,
          PatientProtocolId PatProtId
   FROM PatientProtocols INNER JOIN Protocols ON PatientProtocols.ProtocolId = Protocols.ProtocolId
   WHERE (PatientId = @PatientId) 
   ) a LEFT OUTER JOIN 
   (
   SELECT c.LkpCode 
   FROM LookupCodeAttributes a INNER JOIN
        LookupAttributes b ON a.AttributeId=b.AttributeId INNER JOIN
        LookupCodes c ON a.LookupCodeId=c.LookupCodeId
   WHERE AttributeName = 'ProtocolScreening' AND
         AttributeValue = 'HPI'
   ) b ON a.VarValue LIKE ('%' + b.LkpCode + '%')
WHERE b.LkpCode IS NULL

--Clean up local variables for each record fetched
UPDATE @ChronoTable 
   SET VarName = ''
WHERE VarName IS NULL
UPDATE @ChronoTable 
   SET VarValue = ''
WHERE VarValue IS NULL
UPDATE @ChronoTable 
   SET VarDate = ''
WHERE VarDate IS NULL
UPDATE @ChronoTable 
   SET Quality = ''
WHERE Quality IS NULL
UPDATE @ChronoTable 
   SET VarValue = dbo.fnPacManStr(VarValue)
WHERE TableName = 'LabTests' AND (ISNUMERIC(VarValue)=0 OR VarValue LIKE '%,%')
UPDATE @ChronoTable 
   SET VarStopDate = ''
WHERE VarStopDate IS NULL
UPDATE @ChronoTable 
   SET VarExtraInfo = ''
WHERE VarExtraInfo IS NULL

--Figure out Aborted Prostatectomies
UPDATE @ChronoTable
   SET VarName = 'PLND Aborted Prostatectomy',
       Filters = 'ProstateProc'
FROM @ChronoTable INNER JOIN Procedures ON Procedures.ProcedureId=PrimaryKey
                  LEFT OUTER JOIN Pathology ON Procedures.ProcedureId=Pathology.ProcedureId
WHERE TableName='Procedures' AND VarName='PLND' AND 
      Pathology.ProcedureId IS NULL

SET @strOutPut = ''
SET @strPatientHPI = ''
DECLARE tables_cursor CURSOR LOCAL FAST_FORWARD
   FOR
   SELECT VarDate,VarName,VarValue,Quality,SortDate,VarStopDate,TableName,PrimaryKey,VarExtraInfo,
          Filters,Qualities,VarDelimited,TableNames,PrimaryKeys
   FROM @ChronoTable
   ORDER BY SortDate ASC   
OPEN tables_cursor
IF CURSOR_STATUS ('local','tables_cursor') = 1
BEGIN
   --SET @starttime= GETDATE()
   --SET @strDebug= 'START ' + CAST(@starttime as varchar)
   FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@strTableName,@intPrimaryKey,@strExtraInfo,@strFilters,@strQualities,@strVarDelimited,@strTableNames,@strPrimaryKeys
   WHILE (@@FETCH_STATUS <> -1)
   BEGIN  
      --DETERMINE if record is pre-treatment assume record is not pre-treatment
      SET @blnPreTx = 0
      IF @dteDate IS NULL 
         SET @blnPreTx = 1
      ELSE IF @TxDate = @MISSING_DATE
         SET @blnPreTx = 1
      ELSE IF @dteDate = @TxDate
         SET @blnPreTx = 1     

      -- PSA
      IF @strVariable = 'PSA'
      BEGIN
         --accomodate <,>, <=, >=
         --SET @strValue = dbo.fnPacManStr(@strValue) --not need cause of update statement        
         IF ISNUMERIC(@strValue) = 1
         BEGIN
            SET @blnValidPSA = 1
            -- PSA invalid if patient on hormone therapy
            IF (@blnPreTx = 1 AND @NeoAdjHormTx <> '') OR (@AdjHormTx <> '') OR (@HormEvent <> '')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@HormTxDate = @MISSING_DATE) OR (@dteDate > @HormTxDate)
                     SET @blnValidPSA = 0

            -- PSA invalid if patient on chemotherapy
            IF (@blnPreTx = 1 AND @NeoAdjChemoTx <> '') OR (@AdjChemoTx <> '') OR (@MetsEvent LIKE '%CHEMO%')
               IF @dteDate IS NOT NULL
                  SET @blnValidPSA = 1 -- assume psas without dates are not effected by homrones
               ELSE
                  IF (@ChemoTxDate = @MISSING_DATE) OR (@dteDate > @ChemoTxDate)
                     SET @blnValidPSA = 0

            -- PSAs invalid within specified days after prostate biopsy
            IF @BiopsyDate <> @MISSING_DATE AND @dteDate IS NOT NULL
               IF @dteDate > @BiopsyDate
                  IF (@dteDate - @BiopsyDate) < @BiopsyDays
                     SET @blnValidPSA = 0

            -- find valid pre-treatment PSA 
            IF @blnValidPSA = 1   
               IF @blnPreTx = 1
               BEGIN
                  IF NOT (@dteDate IS NULL AND @PreTxPSA <> @MISSING_NUMBER AND @PreTxPSA > CAST(@strValue AS float(24)))
                     SET @PreTxPSA = CAST(@strValue AS float(24))
                     IF @EForm=1
                        SET @PreTxPSAID = @intPrimaryKey  
                  IF @dteDate IS NOT NULL
                     SET @PreTxPSADate = @dteDate
               END
               ELSE
                  SET @LastPSA_Value = @strValue
               IF @dteDate IS NOT NULL
                  SET @LastPSA_Date = @dteDate
         END 
      END
      ELSE
      -- Prostate Biopsy
      IF @strVariable IN('NEEDLE BIOPSY','BIOPSY','TURP','TRUS Biopsy') AND @strExtraInfo='Prostate'--dbo.fnIsBiopsyProstate (@strVariable)= 1
      BEGIN
         -- which biopsy is the diagnostic biopsy?
         -- save date to check for PSAs within 3 weeks of biopsy
         IF @blnPreTx = 1
            IF @dteDate IS NOT NULL
            BEGIN
               SET @BiopsyDate = @dteDate
               -- diagnostic biopsy is first positive biopsy
               -- but if ther are later pre-tx grades, use them
               IF @strValue <> '' AND @strValue NOT IN('NEG','PIN','ASAP','Negative') --dbo.fnIsAbnormalBiopsyProstate (@strValue) = 1
                  IF @DxBxDate = @MISSING_DATE OR 
                                 (@strDataQuality='RR' AND @DxBxQuality <> 'RR' AND @DxBxDate = @dteDate) OR 
                                 (@strDataQuality IN('STD','REV') AND @DxBxQuality = 'OUT' AND @DxBxDate = @dteDate)
                  BEGIN
                     SET @DxBxType = @strVariable
                     SET @DxBxDate = @dteDate
                     SET @DxBxDateText = @strDate
                     SET @DxBxSummary = @strValue
                     SET @DxBxQuality = @strDataQuality
	                  SET @DxBiopsyID = @intPrimaryKey --for paper form
                     -- move the clinical state forward
                     IF @ClinState < @LOCALIZED
                     BEGIN
                        SET @ClinState = @LOCALIZED
                        SET @ClinStateDate = @dteDate 
                        SET @ClinStateDteText = @strDate
                        IF @EForm=1
                           BEGIN
                              SET @ClinStateID = @intPrimaryKey
                              SET @ClinStateTable = @strTableName
                              SET @ClinStateQuality = @strDataQuality
                           END                                             
                     END
                  END
            END         
      END   -- does not deal with post-curative treatment (RP, XRT) biopsies
      ELSE
      -- UICC/AJCC Clinical Tumor Stage
      IF @strVariable IN('UICC_92','UICC_97','UICC_02')
      BEGIN
         IF @blnPreTx = 1 AND @strValue <> ''
            If @strDataQuality = 'RR' OR @ClinStageQuality <> 'RR'
            BEGIN
               IF @dteDate IS NOT NULL
               BEGIN
	               SET @ClinStageDate = @dteDate            
	               SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
                  IF CHARINDEX(',',@strExtraInfo) > 0
                     BEGIN
                        SET @ClinStageN = SUBSTRING(@strExtraInfo,1,CHARINDEX(',',@strExtraInfo)-1)
                        SET @ClinStageM = SUBSTRING(@strExtraInfo,CHARINDEX(',',@strExtraInfo)+1,LEN(@strExtraInfo))
                     END
                  ELSE IF @strExtraInfo <> ''
                     SET @ClinStageN = @strExtraInfo
	               SET @ClinStageQuality = @strDataQuality
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey
	            END
	            ELSE IF @strValue > @ClinStageT
	            BEGIN
		            -- don't need to copy date b/c all nulls sort to top
         		   SET @ClinStageSystem = @strVariable
	               SET @ClinStageT = @strValue
                  IF CHARINDEX(',',@strExtraInfo) > 0
                     BEGIN
                        SET @ClinStageN = SUBSTRING(@strExtraInfo,1,CHARINDEX(',',@strExtraInfo)-1)
                        SET @ClinStageM = SUBSTRING(@strExtraInfo,CHARINDEX(',',@strExtraInfo)+1,LEN(@strExtraInfo))
                     END
                  ELSE IF @strExtraInfo <> ''
                     SET @ClinStageN = @strExtraInfo
	               SET @ClinStageQuality = @strDataQuality
                  IF @EForm=1
                     SET @ClinStageID = @intPrimaryKey
               END
            END       
      END
      ELSE
      BEGIN   
         -- Chemotherapy (NOT AN ELSE b/c of combination therapies)
         IF (@strVariable LIKE '%CHEMO%') AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @ChemoTxDate = @MISSING_DATE
                  SET @ChemoTxDate = @dteDate
   
            IF @blnPreTx = 1
               SET @NeoAdjChemoTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjChemoTx = @strVariable
               -- assumes any chemo after treatment indicates metastasis
               SET @MetsEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' ' 
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               IF @strExtraInfo <> ''
                  SET @strOutput = @strOutput +  ' IRB#' + @strExtraInfo
               IF @EForm=1
                  INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Filters,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strFilters,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
               ELSE
                  INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''))
               SET @strOutput = ''
         END
         -- Hormone Therapy (NOT AN ELSE b/c of combination therapies)
         IF ((@strVariable LIKE '%HORM%')
            OR (@strVariable = 'ORCH')
            OR (@strVariable ='Bilateral Orchiectomy')
            OR (@strVariable LIKE 'ORCH_BIL%')
            OR (@strVariable LIKE '%LHRH%')
            OR (@strVariable LIKE '%AA%')
            OR (@strVariable LIKE '%ESTROGEN%')
            OR (@strVariable LIKE '%PROGEST%'))
            AND (@strVariable NOT LIKE '%STOP')
         BEGIN
            IF @dteDate IS NOT NULL
               IF @HormTxDate = @MISSING_DATE
                  SET @HormTxDate = @dteDate
            IF @blnPreTx = 1
               SET @NeoAdjHormTx = @strVariable   
            ELSE
               IF @MetsEvent = '' 
                  SET @AdjHormTx = @strVariable
               SET @HormEvent = @strVariable
               SET @strOutput = @strOutput + @strDate + ' '  
               IF @strStopDate <> ''
                  SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
               IF @strValue <> ''
                  SET @strOutput = @strOutput +  @strValue
               ELSE
                  SET @strOutput = @strOutput + @strVariable
               IF @strExtraInfo <> ''
                  SET @strOutput = @strOutput +  ' IRB#' + @strExtraInfo
               --prevent the same record from being inserted again need a better way
               IF NOT EXISTS(SELECT SortDate FROM @SortTable WHERE SortDate=@dteDate AND VarString=@strOutput)
                  BEGIN
                     IF @EForm=1                  
                        INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Filters,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strFilters,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
                     ELSE
                        INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''))                        
                  END
               SET @strOutput = ''   
         END 
      END    
      --Testosterone
      /*
      IF @strVariable LIKE 'TEST%' 
      --look for castrate levels of testosterone
      BEGIN 
        IF ISNUMERIC(@strValue) = 1
           IF CAST(@strValue As float(24)) < @CASTRATE_TESTOSTERONE_LEVEL
              SET @Castrate = 1     
      END
      */
      --check if castrated
      --IF @strVariable IN ('ORCH_BIL','Bilateral Orchiectomy')
      --   SET @Castrate = 1
      --Diagnostics Imaging
      /*
      these should be positive diagnostics for metastasis
      what exactly is positive?
      should it require specifying extent of disease?
      should CT and MRI be confirmed by LN_BX?
      should BS or PET be confirmed by BONE_BX?
      add target latter so can use other scan types?
      */
      /*
      IF @strVariable IN('BS','Bone Scan','BONE_BX','LN_BX') --('PET','PET Scan','XRAY','X-RAY','RADIOGRPH',)  
            --OR @strVariable LIKE 'CT%' OR @strVariable LIKE '%MRI%'--dbo.fnIsDiagnostic(@strVariable) = 1
      BEGIN
         IF @strValue LIKE 'POS%' OR 
            @strValue LIKE 'ABN_P%' OR 
            @strValue LIKE 'ABN_MAL%' OR
            @strValue='Abnormal Malignant' OR
            @strValue='Abnormal'	OR
            @strValue='Abnormal Prostate'--dbo.fnIsAbnormalDiagnostic(@strValue) = 1
            IF @ClinState < @NON_CASTRATE_METS
            BEGIN
               IF @Castrate = 1
                  SET @ClinState = @CASTRATE_METS
               ELSE
                  SET @ClinState = @NON_CASTRATE_METS
               IF @EForm=1
                  BEGIN
                     SET @ClinStateID = @intPrimaryKey
                     SET @ClinStateTable = @strTableName
                  END   
               IF @dteDate IS NOT NULL
               BEGIN
                  SET @ClinStateDate = @dteDate
                  SET @ClinStateDteText = @strDate
               END
            END
      END
      ELSE
      */
      -- Radiation Therapy
      IF @strVariable IN('XRT','EBRT','RT','COMBO','BRACHY','COMBO','RADIOISOTOPE','SEED'
                        ,'IMPLANT','Brachytherapy',
                        'External Beam','Radiation Therapy, Unspecified','External Beam, IMRT',
                        'High-Dose Rate Brachytherapy','External Beam, 3D Conventional',
                        'External Beam, 3D Conformal') --dbo.fnIsRadiationtherapy(@strVariable) = 1 OR dbo.fnIsBrachytherapy(@strVariable)= 1
      BEGIN
         IF @ClinState < @LOCALIZED
         BEGIN
            SET @ClinState = @LOCALIZED
            IF @EForm=1
               BEGIN
                  SET @ClinStateID = @intPrimaryKey
                  SET @ClinStateTable = @strTableName
                  SET @ClinStateQuality = @strDataQuality
               END   
            IF @dteDate IS NOT NULL
            BEGIN
               SET @ClinStateDate = @dteDate
               SET @ClinStateDteText = @strDate
            END                                          
         END
         IF @blnPreTx = 1
            BEGIN 
               SET @NeoAdjRadTx = @strVariable
               --SET @RadTxDate = @dteDate
               IF @dteDate IS NOT NULL
                  SET @TxDate = @dteDate
            END
         SET @strOutput = @strOutput + @strDate + ' '
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         SET @strOutput = @strOutput + @strVariable + ' ' + @strExtraInfo + ' ' + @strValue
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''))
         SET @strOutput = ''     
      END
      ELSE
      -- Extent of Disease
      IF @strVariable = 'EOD'
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' ' + @strVariable + ' ' + @strValue
         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey)
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey)
         SET @strOutput = ''   
      END
      ELSE
      -- Radical Prostatectomy
      IF @strVariable LIKE 'R[RCPL]P' OR @strVariable LIKE '[RCPL]P' OR @strVariable LIKE 'Salv[RCPL]P' OR @strVariable='RALP' OR @strVariable = 'LP_CONV' --dbo.fnIsRadicalProstatectomy(@strVariable) = 1
      BEGIN
         IF @ClinState < @LOCALIZED
         BEGIN
           SET @ClinState = @LOCALIZED
           IF @EForm=1
              BEGIN
                 SET @ClinStateID = @intPrimaryKey
                 SET @ClinStateTable = @strTableName
                 SET @ClinStateQuality = @strDataQuality
              END
           IF @dteDate IS NOT NULL
           BEGIN
              SET @ClinStateDate = @dteDate
              SET @ClinStateDteText = @strDate
           END                                          
         END
         IF @blnPreTx = 1 
            IF @dteDate IS NOT NULL
               SET @TxDate = @dteDate
         --recoding some variables here
         SELECT @strVariable=LkpDescription FROM LookupCodes WHERE LkpCode=@strVariable AND LkpFieldName = 'ProcName' 
         SET @strOutput = @strOutput + @strDate + ' ' + ISNULL(@strVariable,'') + ' ' + @strValue
         SET @strOutput = REPLACE(REPLACE(REPLACE(REPLACE(@strOutput,'SMS','Margin'),'ECE','Extension'),'SVI','Seminal Vesicles'),'LNI','Nodes')
         IF @EForm=1
            BEGIN
               SET @strVarDelimited = REPLACE(REPLACE(REPLACE(REPLACE(@strVarDelimited,'SMS','Margin'),'ECE','Extension'),'SVI','Seminal Vesicles'),'LNI','|__Nodes')
               INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strVarDelimited,@strTableNames,@strPrimaryKeys,@strFilters,@strQualities)
               SET @strTableNames = ''
               SET @strPrimaryKeys = ''
               SET @strVarDelimited = ''
            END
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,@strFilters,@strQualities)
         SET @strOutput = ''   
      END
      ELSE
      -- Status    
      IF @strVariable = 'Status'
      BEGIN
         IF @strValue IN('Localized','LCR','Local Recurrence')
            BEGIN
               IF @ClinState < @LOCALIZED 
               BEGIN
                  SET @ClinState = @LOCALIZED
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('BCR','Biochemical Recurrence')
            BEGIN
               IF @Castrate = 1 AND @ClinState < @RISING_PSA_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_CASTRATE
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
               ELSE IF @ClinState < @RISING_PSA_NON_CASTRATE
                  BEGIN
                     SET @ClinState = @RISING_PSA_NON_CASTRATE
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
            END
         ELSE
            IF @strValue IN('RisingPSA_Castrate','Rising PSA Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('RisingPSA_NonCastrate','Rising PSA Non-Castrate')
            BEGIN
               IF @ClinState < @RISING_PSA_NON_CASTRATE
               BEGIN
                  SET @ClinState = @RISING_PSA_NON_CASTRATE
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END 
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsNonCastrate','Non-Castrate Mets','Clinical Mets Non-Castrate')
            BEGIN
               IF @ClinState < @NON_CASTRATE_METS
               BEGIN
                  SET @ClinState = @NON_CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END 
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('ClinMetsCastrate','Castrate Mets','Clinical Mets Castrate')
            BEGIN
               IF @ClinState < @CASTRATE_METS
               BEGIN
                  SET @ClinState = @CASTRATE_METS
                  IF @EForm=1
                     BEGIN
                        SET @ClinStateID = @intPrimaryKey
                        SET @ClinStateTable = @strTableName
                        SET @ClinStateQuality = @strDataQuality
                     END
                  IF @dteDate IS NOT NULL
                  BEGIN
                     SET @ClinStateDate = @dteDate
                     SET @ClinStateDteText = @strDate
                  END
               END
            END
         ELSE
            IF @strValue IN('METS','Distant Metastasis')
            BEGIN
               IF @ClinState < @CASTRATE_METS AND @Castrate = 1
                  BEGIN
                     SET @ClinState = @CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
               ELSE IF @ClinState < @NON_CASTRATE_METS
                  BEGIN
                     SET @ClinState = @NON_CASTRATE_METS
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
            END
         ELSE
            IF @strValue IN('DOD','DOC','DUC','Dead','Death from Prostate Cancer','Death from Other Cause',
                            'Death from Unknown Causes')
            BEGIN
               If @ClinState < @DEAD 
                  BEGIN
                     SET @ClinState = @DEAD
                     IF @EForm=1
                        BEGIN
                           SET @ClinStateID = @intPrimaryKey
                           SET @ClinStateTable = @strTableName
                           SET @ClinStateQuality = @strDataQuality
                        END
                     IF @dteDate IS NOT NULL
                     BEGIN
                        SET @ClinStateDate = @dteDate
                        SET @ClinStateDteText = @strDate
                     END
                  END
            END
      END
      --Protocols
      IF @strVariable = 'Protocol'
      BEGIN
         SET @strOutput = @strOutput + @strDate + ' '  
         IF @strStopDate <> ''
            SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
         IF @strVariable <> ''
            SET @strOutput = @strOutput +  @strVariable
         IF @strExtraInfo <> ''
            SET @strOutput = @strOutput +  ' ' + @strExtraInfo
         IF @strValue <> ''
            SET @strOutput = @strOutput + ' ' + @strValue

         IF @EForm=1
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,StopDateText) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@strDataQuality,@intPrimaryKey,NULLIF(@strStopDate,''))
         ELSE
            INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey)
         SET @strOutput = ''
      END
      ELSE
      --PRINT @strDate + ' ' + @strVariable + ' ' + @strValue + ' ' + @strDataQuality
      --SET @stoptime= GETDATE()
      --SET @strdebug = @strdebug + char(10) + @strVariable + ' ' + @stoptime --Cast to text
      --SELECT @stoptime - @starttime
      
      --Here we catch a bunch of values that are normally ignored and instead put them back into the output table
      IF @strTableName IN('MedicalTherapy','RadiationTherapy','BrachyTherapy','Procedures')
         BEGIN
            IF NOT EXISTS(SELECT PrimaryKeys FROM @SortTable WHERE TableNames LIKE '%' + @strTableName + '%' AND PrimaryKeys LIKE '%' + CAST(@intPrimaryKey as varchar(50)) + '%')
               BEGIN
                  IF @strTableName IN('MedicalTherapy','RadiationTherapy')
                     BEGIN
                        SET @strOutput = ISNULL(@strDate,'') + ' ' 
                        IF @strStopDate <> ''
                           SET @strOutput = RTRIM(@strOutput) + '-' + @strStopDate + ' '
                        IF @strTableName='MedicalTherapy'
                           BEGIN
                              IF @strValue <> ''
                                 SET @strOutput = @strOutput +  @strValue
                              ELSE
                                 SET @strOutput = @strOutput + @strVariable
                              IF @strExtraInfo <> ''
                                 SET @strOutput = @strOutput +  ' IRB#' + @strExtraInfo
                           END
                        ELSE
                           SET @strOutput = @strOutput+@strVariable+' '+' '+@strExtraInfo+' '+@strValue
                     END  
                  ELSE IF (@strTableName = 'Procedures' AND @intPrimaryKey<>@DxBiopsyID) OR @strTableName = 'BrachyTherapy'
                     SET @strOutput = RTRIM(LTRIM(ISNULL(@strDate,'') + ' ' + ISNULL(@strVariable,'') + ' ' + ISNULL(@strValue,'')))
                  IF @EForm=1
                     BEGIN
                        IF @strVarDelimited IS NOT NULL AND @strTableNames IS NOT NULL AND @strPrimaryKeys IS NOT NULL
                           INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,StopDateText,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strVarDelimited,@strTableNames,@strPrimaryKeys,NULLIF(@strStopDate,''),@strFilters,@strQualities)
                        ELSE
                           INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,StopDateText,Filters,Qualities) VALUES(@dteDate,@strOutPut,'__'+@strOutPut+'|',@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''),@strFilters,@strDataQuality)
                     END
                  ELSE
                     INSERT @SortTable (SortDate,VarString,TableNames,PrimaryKeys,StopDateText,Filters,Qualities) VALUES(@dteDate,@strOutPut,@strTableName,@intPrimaryKey,NULLIF(@strStopDate,''),@strFilters,@strQualities)
                  SET @strOutput = '' 
               END
         END
      FETCH NEXT FROM tables_cursor INTO @strDate,@strVariable,@strValue,@strDataQuality,@dteDate,@strStopDate,@strTableName,@intPrimaryKey,@strExtraInfo,@strFilters,@strQualities,@strVarDelimited,@strTableNames,@strPrimaryKeys
      --SET @starttime= GETDATE()
   END
   DEALLOCATE tables_cursor
   --PRINT @strdebug
END      
   --Capture PreDx Biopsy PSA
   SELECT TOP 1 @PreDxBxPSA=VarValue, @PreDxBxPSAID=PrimaryKey, @PreDxBxPSAQuality=Quality
   FROM @ChronoTable 
   WHERE TableName='LabTests' AND VarName='PSA' AND VarValue<>'' AND SortDate<=@DxBxDate 
   ORDER BY SortDate DESC
   --reformat BxSummary
   IF LEFT(@DxBxSummary,3) LIKE '[1-5]+[1-5]'
      SET @DxBxSummary = 'Gleason ' + CAST(CAST(LEFT(@DxBxSummary,1) AS int) 
                       + CAST(SUBSTRING(@DxBxSummary,3,1) AS int) AS varchar(50)) + ' (' + LEFT(@DxBxSummary,3) + ')' 
                       + CASE WHEN LEN(@DxBxSummary)>3 THEN RIGHT(@DxBxSummary,LEN(@DxBxSummary)-3) ELSE '' END 
   ELSE IF @DxBxSummary<>''
      SET @DxBxSummary = 'Gleason ' + @DxBxSummary
   IF @EForm <> 1
      SET @DxBxSummary = @DxBxSummary + ISNULL(' (' + @DxBxQuality + ')','')

   -- assembles diagnosis date, stage, grade, pre tx psa line
   IF @EForm=1
      BEGIN
         IF @DxBxDate <> @MISSING_DATE
            BEGIN
               SET @strPatientHPI = @DxBxDateText + ' '
            	SET @strTableNames = 'Procedures'
               SET @strQualities = ISNULL(@DxBxQuality,@NO_DQ)
               SET @strPrimaryKeys = CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = '__' + @DxBxDateText + ' ' +  '|'
            END 
         IF @ClinStageT <> ''
            BEGIN
               --SET @strPatientHPI = @strPatientHPI + @ClinStageT + ' (' + RIGHT(@ClinStageSystem,2) + ') '
               SET @strPatientHPI = @strPatientHPI + @ClinStageT + @ClinStageN + @ClinStageM + ' (' + RIGHT(@ClinStageSystem,2) + ') '
               SET @strTableNames = @strTableNames + ',ClinicalStages'
               SET @strQualities = @strQualities +  ISNULL(',' + @ClinStageQuality,','+@NO_DQ)
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@ClinStageID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @ClinStageT + @ClinStageN + @ClinStageM + ' (' + RIGHT(@ClinStageSystem,2) + ')|'
            END
         IF @DxBxType <> ''
            BEGIN 
               SET @strPatientHPI =  @strPatientHPI + @DxBxType + ' ' + @DxBxSummary + ' '
               SET @strTableNames = @strTableNames + ',Procedures'
               SET @strQualities = @strQualities +  ISNULL(',' + @DxBxQuality,','+@NO_DQ)
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@DxBiopsyID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__' + @DxBxType + ' ' + @DxBxSummary + '|'
            END
         IF @PreDxBxPSA <> ''
            BEGIN
               SET @strPatientHPI = @strPatientHPI + ' PSA ' + @PreDxBxPSA + ' '
               SET @strTableNames = @strTableNames + ',LabTests'
               SET @strQualities = @strQualities +  ISNULL(',' + @PreDxBxPSAQuality,','+@NO_DQ)
               SET @strPrimaryKeys = @strPrimaryKeys + ',' + CAST(@PreDxBxPSAID as varchar(50))
               SET @strVarDelimited = @strVarDelimited + '__ PSA ' + CAST(@PreDxBxPSA AS varchar(50)) + '|'
            END
         --strip leading comma from TableNames and PrimaryKeys concatenation
         IF LEFT(@strTableNames,1) = ','
            SET @strTableNames = RIGHT(@strTableNames,LEN(@strTableNames)-1)
         IF LEFT(@strPrimaryKeys,1) = ','
            SET @strPrimaryKeys = RIGHT(@strPrimaryKeys,LEN(@strPrimaryKeys)-1)
         INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,Filters) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@strQualities,@strPrimaryKeys,'ProstateProc')
         SET @strTableNames = ''
         SET @strPrimaryKeys = ''
         SET @strVarDelimited = ''
      END 
   ELSE
      BEGIN
         IF @DxBxType <> ''
            SET @DxBxSummary = @DxBxType + ' ' + @DxBxSummary
         IF @DxBxDate <> @MISSING_DATE
            SET @strPatientHPI = @DxBxDateText
         IF @ClinStageT <> ''
            SET @strPatientHPI = @strPatientHPI + ' ' + @ClinStageT + @ClinStageN + @ClinStageM + ' (' + RIGHT(@ClinStageSystem,2) + ')'
         IF @DxBxSummary <> ''
            SET @strPatientHPI = @strPatientHPI + ' ' + @DxBxSummary  
         IF @PreDxBxPSA <> ''
            SET @strPatientHPI = @strPatientHPI + ' PSA ' + @PreDxBxPSA + ' '
         IF @strPatientHPI <> ''
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,PrimaryKeys,Filters) VALUES(CASE WHEN @DxBxDate <> @MISSING_DATE THEN @DxBxDate ELSE NULL END,@strPatientHPI,NULL,NULL,NULL,'ProstateProc')
      END
   SET @strPatientHPI = ''   -- make sure this is set to '' by default

   -- assemble clinical state / status line
   IF @ClinStateDate <> @MISSING_DATE 
   BEGIN
      SET @strPatientHPI = @strPatientHPI + @ClinStateDteText + ' '
      -- decode numeric clinical states back into text for display
      --Removed by request orignially coded as 'No Prostate Cancer Diagnosis '
      IF @ClinState = @NO_PROSTATE_CANCER_DIAGNOSIS
         SET @strPatientHPI = '' --@strPatientHPI + ''
      IF @ClinState = @LOCALIZED
         SET @strPatientHPI = @strPatientHPI + 'Localized'
      IF @ClinState = @RISING_PSA_NON_CASTRATE
         SET @strPatientHPI = @strPatientHPI + 'Rising PSA Non-Castrate'
      IF @ClinState = @RISING_PSA_CASTRATE
         SET @strPatientHPI = @strPatientHPI + 'Rising PSA Castrate'
      --Removed by request, orignially coded as 'Non-Castrate Mets'
      IF @ClinState = @NON_CASTRATE_METS
         SET @strPatientHPI = '' --@strPatientHPI + 'Metastasis' 
      IF @ClinState = @CASTRATE_METS
         SET @strPatientHPI = @strPatientHPI + 'Castrate Mets'
      IF @ClinState = @DEAD
         SET @strPatientHPI = @strPatientHPI + 'Dead'

      IF @EForm=1 AND @strPatientHPI <> ''
         BEGIN
            SET @strVarDelimited = '__' + @strPatientHPI + '|'
            SET @strTableNames = @ClinStateTable
            SET @strPrimaryKeys = CAST(@ClinstateID as varchar(50))
            INSERT @SortTable (SortDate,VarString,VarDelimited,TableNames,Qualities,PrimaryKeys,Filters) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI,@strVarDelimited,@strTableNames,@ClinStateQuality,@strPrimaryKeys,CASE WHEN @ClinStateTable = 'Procedures' THEN 'ProstateProc' END)
            SET @strTableNames = ''
            SET @strPrimaryKeys = ''
            SET @strVarDelimited = ''
         END
      ELSE
         INSERT @SortTable (SortDate,VarString) VALUES(CASE WHEN @ClinStateDate <> @MISSING_DATE THEN @ClinStateDate ELSE NULL END,@strPatientHPI)
   END      
   SET @strPatientHPI = '' 

   IF @EForm=1
      BEGIN
         SELECT VarString AS PatientHPI,VarDelimited AS PatientHPIDelimited,TableNames,
                PrimaryKeys, SortDate, StopDateText, Filters, Qualities
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   ELSE
      BEGIN
         SELECT VarString AS PatientHPI--,TableNames,PrimaryKeys
         FROM @SortTable WHERE VarString <> '' ORDER BY SortDate
         SET @Rowcount = @@ROWCOUNT
      END
   --SELECT * FROM @ChronoTable

   IF @DiagnosisBx = 1
      SELECT @DxBiopsyID AS DxBiopsyId
--101ModifyTableProcedureFinding.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_ProcedureFinding
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	ProcedureId int NULL,
	ProcedureFindingId int NULL,
	ProcFinding varchar(50) NULL,
	ProcFindSide varchar(50) NULL,
	ProcFindLaterality varchar(50) NULL,
	ProcFindSite varchar(50) NULL,
	ProcFindSubsite varchar(50) NULL,
	ProcFindDissection varchar(50) NULL,
	ProcFindPrimaryDimension varchar(50) NULL,
	ProcFindSecondaryDimension varchar(50) NULL,
	ProcFindTertiaryDimension varchar(50) NULL,
	ProcFindExtension varchar(50) NULL,
	ProcFindEncapsulation varchar(50) NULL,
	ProcFindDiseaseExtent varchar(50) NULL,
	ProcFindStatus varchar(50) NULL,
	ProcFindFrozen varchar(50) NULL,
	ProcFindMorphology varchar(50) NULL,
	ProcFindHistology varchar(255) NULL,
	ProcFindScore varchar(50) NULL,
	ProcFindNotes varchar(1000) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_ProcedureFinding SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_ProcedureFinding)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_ProcedureFinding (LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcedureFindingId, ProcFinding, ProcFindSide, ProcFindSite, ProcFindSubsite, ProcFindDissection, ProcFindPrimaryDimension, ProcFindSecondaryDimension, ProcFindTertiaryDimension, ProcFindExtension, ProcFindEncapsulation, ProcFindDiseaseExtent, ProcFindStatus, ProcFindFrozen, ProcFindMorphology, ProcFindHistology, ProcFindNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, ProcedureId, ProcedureFindingId, ProcFinding, ProcFindSide, ProcFindSite, ProcFindSubsite, ProcFindDissection, ProcFindPrimaryDimension, ProcFindSecondaryDimension, ProcFindTertiaryDimension, ProcFindExtension, ProcFindEncapsulation, ProcFindDiseaseExtent, ProcFindStatus, ProcFindFrozen, ProcFindMorphology, ProcFindHistology, ProcFindNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_ProcedureFinding WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_ProcedureFinding
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_ProcedureFinding', N'AuditLog_ProcedureFinding', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProcedureFinding
	DROP CONSTRAINT FK_ProcedureFinding_Procedures
GO
ALTER TABLE dbo.Procedures SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_ProcedureFinding
	(
	ProcedureId int NOT NULL,
	ProcedureFindingId int NOT NULL IDENTITY (1, 1),
	ProcFinding varchar(50) NULL,
	ProcFindSide varchar(50) NULL,
	ProcFindLaterality varchar(50) NULL,
	ProcFindSite varchar(50) NULL,
	ProcFindSubsite varchar(50) NULL,
	ProcFindDissection varchar(50) NULL,
	ProcFindPrimaryDimension varchar(50) NULL,
	ProcFindSecondaryDimension varchar(50) NULL,
	ProcFindTertiaryDimension varchar(50) NULL,
	ProcFindExtension varchar(50) NULL,
	ProcFindEncapsulation varchar(50) NULL,
	ProcFindDiseaseExtent varchar(50) NULL,
	ProcFindStatus varchar(50) NULL,
	ProcFindFrozen varchar(50) NULL,
	ProcFindMorphology varchar(50) NULL,
	ProcFindHistology varchar(255) NULL,
	ProcFindScore varchar(50) NULL,
	ProcFindNotes varchar(1000) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_ProcedureFinding SET (LOCK_ESCALATION = TABLE)
GO
SET IDENTITY_INSERT dbo.Tmp_ProcedureFinding ON
GO
IF EXISTS(SELECT * FROM dbo.ProcedureFinding)
	 EXEC('INSERT INTO dbo.Tmp_ProcedureFinding (ProcedureId, ProcedureFindingId, ProcFinding, ProcFindSide, ProcFindSite, ProcFindSubsite, ProcFindDissection, ProcFindPrimaryDimension, ProcFindSecondaryDimension, ProcFindTertiaryDimension, ProcFindExtension, ProcFindEncapsulation, ProcFindDiseaseExtent, ProcFindStatus, ProcFindFrozen, ProcFindMorphology, ProcFindHistology, ProcFindNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT ProcedureId, ProcedureFindingId, ProcFinding, ProcFindSide, ProcFindSite, ProcFindSubsite, ProcFindDissection, ProcFindPrimaryDimension, ProcFindSecondaryDimension, ProcFindTertiaryDimension, ProcFindExtension, ProcFindEncapsulation, ProcFindDiseaseExtent, ProcFindStatus, ProcFindFrozen, ProcFindMorphology, ProcFindHistology, ProcFindNotes, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.ProcedureFinding WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_ProcedureFinding OFF
GO
DROP TABLE dbo.ProcedureFinding
GO
EXECUTE sp_rename N'dbo.Tmp_ProcedureFinding', N'ProcedureFinding', 'OBJECT' 
GO
ALTER TABLE dbo.ProcedureFinding ADD CONSTRAINT
	PK_ProcedureFinding PRIMARY KEY CLUSTERED 
	(
	ProcedureFindingId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.ProcedureFinding WITH NOCHECK ADD CONSTRAINT
	FK_ProcedureFinding_Procedures FOREIGN KEY
	(
	ProcedureId
	) REFERENCES dbo.Procedures
	(
	ProcedureId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	
GO
CREATE TRIGGER dbo.trgAuditProcedureFinding_UD
ON dbo.ProcedureFinding FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_ProcedureFinding
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.ProcedureFindingId = Inserted.ProcedureFindingId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_ProcedureFinding
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
sp_settriggerorder N'trgAuditProcedureFinding_UD', N'last', N'update'
GO
COMMIT
GO

--102ModifyTablePancreasPath.sql
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_AuditLog_PancreasPath
	(
	LoggedOperation varchar(50) NULL,
	LoggedBy varchar(50) NULL,
	LoggedTime datetime NULL,
	PathologyId int NULL,
	PathDifferentiation varchar(50) NULL,
	PathExtraParenchymalInv varchar(50) NULL,
	PathExtraParenchymalInv2 varchar(50) NULL,
	PathVascularInv varchar(50) NULL,
	PathPerineuralInv varchar(50) NULL,
	PathPancreaticMargin varchar(50) NULL,
	PathAnteriorMargin varchar(50) NULL,
	PathPosteriorMargin varchar(50) NULL,
	PathDuodenalMargin varchar(50) NULL,
	PathGastricMargin varchar(50) NULL,
	PathBileDuctMargin varchar(50) NULL,
	PathAnteriorPeritonealInv varchar(50) NULL,
	PathPancreatitis varchar(50) NULL,
	PathFibrosis varchar(50) NULL,
	PathDuodenum varchar(50) NULL,
	PathStomach varchar(50) NULL,
	PathPanIn varchar(50) NULL,
	PathIPMN varchar(50) NULL,
	PathLymphaticInv varchar(50) NULL,
	PathEpitheliumType varchar(50) NULL,
	PathDysplasia varchar(50) NULL,
	PathCarcinoma varchar(50) NULL,
	PathCarcinomaType varchar(50) NULL,
	PathPercCarcinoma varchar(50) NULL,
	PathCarcinomaMaxDim varchar(50) NULL,
	PathNonneoplastic varchar(50) NULL,
	PathAddTissueMargin varchar(50) NULL,
	PathProximalMargin varchar(50) NULL,
	PathDistalMargin varchar(50) NULL,
	PathFocality varchar(50) NULL,
	PathKi67 varchar(50) NULL,
	PathHPF varchar(50) NULL,
	PathWHO varchar(50) NULL,
	EnteredBy varchar(50) NULL,
	EnteredTime datetime NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_AuditLog_PancreasPath SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.AuditLog_PancreasPath)
	 EXEC('INSERT INTO dbo.Tmp_AuditLog_PancreasPath (LoggedOperation, LoggedBy, LoggedTime, PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathExtraParenchymalInv2, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, PathEpitheliumType, PathDysplasia, PathCarcinoma, PathCarcinomaType, PathPercCarcinoma, PathCarcinomaMaxDim, PathNonneoplastic, PathAddTissueMargin, PathProximalMargin, PathDistalMargin, PathFocality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT LoggedOperation, LoggedBy, LoggedTime, PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathExtraParenchymalInv2, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, PathEpitheliumType, PathDysplasia, PathCarcinoma, PathCarcinomaType, PathPercCarcinoma, PathCarcinomaMaxDim, PathNonneoplastic, PathAddTissueMargin, PathProximalMargin, PathDistalMargin, PathFocality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.AuditLog_PancreasPath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.AuditLog_PancreasPath
GO
EXECUTE sp_rename N'dbo.Tmp_AuditLog_PancreasPath', N'AuditLog_PancreasPath', 'OBJECT' 
GO
COMMIT
GO
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PancreasPath
	DROP CONSTRAINT FK_PancreasPath_Pathology
GO
ALTER TABLE dbo.Pathology SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
CREATE TABLE dbo.Tmp_PancreasPath
	(
	PathologyId int NOT NULL,
	PathDifferentiation varchar(50) NULL,
	PathExtraParenchymalInv varchar(50) NULL,
	PathExtraParenchymalInv2 varchar(50) NULL,
	PathVascularInv varchar(50) NULL,
	PathPerineuralInv varchar(50) NULL,
	PathPancreaticMargin varchar(50) NULL,
	PathAnteriorMargin varchar(50) NULL,
	PathPosteriorMargin varchar(50) NULL,
	PathDuodenalMargin varchar(50) NULL,
	PathGastricMargin varchar(50) NULL,
	PathBileDuctMargin varchar(50) NULL,
	PathAnteriorPeritonealInv varchar(50) NULL,
	PathPancreatitis varchar(50) NULL,
	PathFibrosis varchar(50) NULL,
	PathDuodenum varchar(50) NULL,
	PathStomach varchar(50) NULL,
	PathPanIn varchar(50) NULL,
	PathIPMN varchar(50) NULL,
	PathLymphaticInv varchar(50) NULL,
	PathEpitheliumType varchar(50) NULL,
	PathDysplasia varchar(50) NULL,
	PathCarcinoma varchar(50) NULL,
	PathCarcinomaType varchar(50) NULL,
	PathPercCarcinoma varchar(50) NULL,
	PathCarcinomaMaxDim varchar(50) NULL,
	PathNonneoplastic varchar(50) NULL,
	PathAddTissueMargin varchar(50) NULL,
	PathProximalMargin varchar(50) NULL,
	PathDistalMargin varchar(50) NULL,
	PathFocality varchar(50) NULL,
	PathKi67 varchar(50) NULL,
	PathHPF varchar(50) NULL,
	PathWHO varchar(50) NULL,
	EnteredBy varchar(50) NOT NULL,
	EnteredTime datetime NOT NULL,
	UpdatedBy varchar(50) NULL,
	UpdatedTime datetime NULL
	)  ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_PancreasPath SET (LOCK_ESCALATION = TABLE)
GO
IF EXISTS(SELECT * FROM dbo.PancreasPath)
	 EXEC('INSERT INTO dbo.Tmp_PancreasPath (PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathExtraParenchymalInv2, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, PathEpitheliumType, PathDysplasia, PathCarcinoma, PathCarcinomaType, PathPercCarcinoma, PathCarcinomaMaxDim, PathNonneoplastic, PathAddTissueMargin, PathProximalMargin, PathDistalMargin, PathFocality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime)
		SELECT PathologyId, PathDifferentiation, PathExtraParenchymalInv, PathExtraParenchymalInv2, PathVascularInv, PathPerineuralInv, PathPancreaticMargin, PathAnteriorMargin, PathPosteriorMargin, PathDuodenalMargin, PathGastricMargin, PathBileDuctMargin, PathAnteriorPeritonealInv, PathPancreatitis, PathFibrosis, PathDuodenum, PathStomach, PathPanIn, PathIPMN, PathLymphaticInv, PathEpitheliumType, PathDysplasia, PathCarcinoma, PathCarcinomaType, PathPercCarcinoma, PathCarcinomaMaxDim, PathNonneoplastic, PathAddTissueMargin, PathProximalMargin, PathDistalMargin, PathFocality, EnteredBy, EnteredTime, UpdatedBy, UpdatedTime FROM dbo.PancreasPath WITH (HOLDLOCK TABLOCKX)')
GO
DROP TABLE dbo.PancreasPath
GO
EXECUTE sp_rename N'dbo.Tmp_PancreasPath', N'PancreasPath', 'OBJECT' 
GO
ALTER TABLE dbo.PancreasPath ADD CONSTRAINT
	PK_PancreasPath PRIMARY KEY CLUSTERED 
	(
	PathologyId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.PancreasPath WITH NOCHECK ADD CONSTRAINT
	FK_PancreasPath_Pathology FOREIGN KEY
	(
	PathologyId
	) REFERENCES dbo.Pathology
	(
	PathologyId
	) ON UPDATE  CASCADE 
	 ON DELETE  CASCADE 
	 NOT FOR REPLICATION

GO
CREATE TRIGGER dbo.trgAuditPancreasPath_UD
ON dbo.PancreasPath FOR UPDATE, DELETE
AS
DECLARE @i int
DECLARE @d int
DECLARE @action char(6)

IF (@@ROWCOUNT = 0) RETURN 

SELECT @i = COUNT(*) FROM Inserted
SELECT @d = COUNT(*) FROM Deleted

SELECT @action = CASE 
WHEN (@i <> 0) and (@d <> 0) THEN 'UPDATE'
WHEN (@i = 0) and (@d <> 0) THEN 'DELETE'
END

IF @action = 'UPDATE'
   INSERT INTO AuditLog_PancreasPath
   SELECT @action AS LoggedOperation, Inserted.UpdatedBy AS LoggedBy, 
          GETDATE() AS LoggedTime, Deleted.*
   FROM Deleted INNER JOIN INSERTED
   ON Deleted.PathologyId = Inserted.PathologyId
ELSE IF @action = 'DELETE'
   INSERT INTO AuditLog_PancreasPath
   SELECT @action AS LoggedOperation, SYSTEM_USER AS LoggedBy, GETDATE() AS LoggedTime, *
   FROM Deleted
GO
COMMIT
GO

